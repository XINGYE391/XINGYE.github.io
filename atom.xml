<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>XINGYE&#39;s Blog</title>
  
  
  <link href="https://blog.xing-ye.top/atom.xml" rel="self"/>
  
  <link href="https://blog.xing-ye.top/"/>
  <updated>2024-06-27T08:57:40.758Z</updated>
  <id>https://blog.xing-ye.top/</id>
  
  <author>
    <name>XINGYE</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>个人博客图床存储实践方案</title>
    <link href="https://blog.xing-ye.top/posts/ae793e83/"/>
    <id>https://blog.xing-ye.top/posts/ae793e83/</id>
    <published>2024-06-22T16:00:00.000Z</published>
    <updated>2024-06-27T08:57:40.758Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><ul><li><p>本站个人图床存储方案时间线：阿里云OSS→SMMS图床+缤纷云OSS</p></li><li><p>本站建站初期采用阿里云OSS对象存储服务（新用户3个月试用期），3个月到期过后对外宣传资费也很低，但但但但但是那只是存储费用，流量费用你是一点也不提呀！看到有些人之前没当回事，白花花地跑了N多流量，自已也有点害怕（钱包害怕哈哈）。当然不差钱的各位可以跳过下面的啦！（毕竟大厂有保障）<a href="https://help.aliyun.com/zh/oss/product-overview/billing-overview#section-3r1-dle-7v0">附阿里云OSS计费详情</a></p></li><li><p>于是本白嫖党（理直气壮）开始寻找有没有免费的存储服务，欸，于是发现了<a href="https://smms.app/">SM.MS</a>这个运营近10年之久的老牌免费图床厂商，一个账户有5G的存储额度，好处是不需要考虑流量的问题了，但毕竟人家服务器啥的在海外，无奈国内有些地方访问图片速度实在是太慢了甚至有些节点无法访问，于是我又开始找……</p></li><li><p>最后在<a href="https://blog.qyliu.top/">柳哥</a>的推荐下，我的目光瞄准了它——<a href="https://www.bitiful.com/">缤纷云</a></p></li><li><p>缤纷云每月会赠送 50G 的存储容量，CDN 流量 10G，API 请求 10 万次。（白嫖党狂喜！）具体费用可见官方文档：<a href="https://docs.bitiful.com/prices/basic">计费概述</a></p></li></ul><h2 id="个人策略">个人策略</h2><ul><li><p>图片上传工具——<a href="https://github.com/Molunerfinn/PicGo/releases">PicGo</a>（没有软件的，找到对应安装包，下载安装即可）。</p></li><li><p>将博客封面、文章封面、即刻说图片……（对图片访问速度要求高的一类图片）存放至缤纷云图床并做好防盗链配置。</p></li><li><p>将博客文章内的图片压缩后存放到SMMS图床并做好备份。（做了图片懒加载，对访客体验影响较小，实测：大陆地区大部分节点在2s内能加载出图片）</p></li><li><p>后续有条件要上服务器的话，会考虑自建图床（毕竟自己的才最放心）。</p></li></ul><h2 id="使用教程">使用教程</h2><h3 id="SMMS图床">SMMS图床</h3><ol><li><p>进入官网<a href="https://smms.app/">SM.MS</a></p></li><li><p>注册你的个人账户</p><p><img src="https://s2.loli.net/2024/06/23/bT3qRLMIQJyH9xs.webp" alt="image-20240623173635289"></p></li><li><p>登录并进入控制台</p><p><img src="https://s2.loli.net/2024/06/23/3LhCHmwIEM5VYtl.webp" alt="image-20240623173802496"></p></li><li><p>生成<code>API Token</code></p><p><img src="https://s2.loli.net/2024/06/23/gXZPSC8v73JmTQy.webp" alt="image-20240623173855179"></p></li><li><p>配置PicGo，找到SM.MS图床，输入刚刚生成的Token，即配置完成</p><p><img src="https://s2.loli.net/2024/06/23/OkYeyFdm7saVcL9.webp" alt="image-20240623174601753"></p></li></ol><h3 id="缤纷云图床">缤纷云图床</h3><ol><li><p>官网注册账号，登入进入控制台。<a href="https://www.bitiful.com/">缤纷云 Bitiful - 强大低成本的对象存储和CDN服务</a></p></li><li><p>创建桶（名字任意）</p><p><img src="https://s2.loli.net/2024/06/23/lGseYLqQravSZp8.webp" alt="image-20240623175020920"></p></li><li><p>添加子用户，保存好Access Key和Secret Key。</p><p><img src="https://s2.loli.net/2024/06/23/STy6EoCcAWJheR7.webp" alt="image-20240623175142268"></p></li><li><p>配置PicGo</p><ul><li><p>由于缤纷云不是PicGo官方支持的云服务厂商, 所以得靠插件来实现,。</p></li><li><p>由于缤纷云支持s3 api, 所以我选择了Amazon s3插件</p><p><img src="https://s2.loli.net/2024/06/23/5ROk3LQeh6paGtH.webp" alt="image-20240623175449787"></p></li><li><p>应用秘钥ID填Access Key, 应用秘钥填Secret Key, 桶名填你创建的桶名, 文件路径随便填(符合格式就行), 地区和自定义节点在桶信息中都有（要注意的是在填自定义节点的时候前面要加上https://, 否则会报错）</p><p><img src="https://s2.loli.net/2024/06/27/DTS6i4AvW5QwPLY.webp" alt="image-20240627165625942"></p><p><img src="https://s2.loli.net/2024/06/27/A3sbWJ2vVkuZq8K.webp" alt="image-20240627165721348"></p></li><li><p>文件路径：{year}/{month}/{md5}.{extName}（默认上传到桶的文件路径，格式如下：)</p><table><thead><tr><th>payload</th><th>描述</th></tr></thead><tbody><tr><td><code>&#123;year&#125;</code></td><td>当前日期 - 年</td></tr><tr><td><code>&#123;month&#125;</code></td><td>当前日期 - 月</td></tr><tr><td><code>&#123;day&#125;</code></td><td>当前日期 - 日</td></tr><tr><td><code>&#123;fullName&#125;</code></td><td>完整文件名（含扩展名）</td></tr><tr><td><code>&#123;fileName&#125;</code></td><td>文件名（不含扩展名）</td></tr><tr><td><code>&#123;extName&#125;</code></td><td>扩展名（不含 . ）</td></tr><tr><td><code>&#123;md5&#125;</code></td><td>图片 MD5 计算值</td></tr><tr><td><code>&#123;sha1&#125;</code></td><td>图片 SHA1 计算值</td></tr><tr><td><code>&#123;sha256&#125;</code></td><td>图片 SHA256 计算值</td></tr></tbody></table></li><li><p>信息配置完成，可以自行上传图片测试一下。</p></li></ul></li></ol>]]></content>
    
    
    <summary type="html">本站个人博客图床存储方案时间线：阿里云OSS→SMMS图床+缤纷云OSS</summary>
    
    
    
    <category term="博客" scheme="https://blog.xing-ye.top/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="博客" scheme="https://blog.xing-ye.top/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>VMware挂起后无法连接MySQL和Redis问题</title>
    <link href="https://blog.xing-ye.top/posts/7b314330/"/>
    <id>https://blog.xing-ye.top/posts/7b314330/</id>
    <published>2024-06-15T16:00:00.000Z</published>
    <updated>2024-06-17T09:45:54.338Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题描述">问题描述</h1><ul><li><p>本人最近在做一个的项目，使用VMware新装了Centos7虚拟机，在虚拟机里面用docker部署了MySQL、Redis、MQ等等组件以及各种微服务。</p></li><li><p>第一天成功把这些东西部署，然后全部测试完也没什么问题，想着微服务开的比较多，然后工作结束后直接把虚拟机挂起（省得第二天要把其他微服务全部再Run一遍），结果第二天用Navicat连接Mysql死活连不上，想着不会Redis也连不上叭（没错也连不上了），但是其他微服务能正常使用，于是便开始排查问题！</p><p><img src="https://s2.loli.net/2024/06/16/nv1bWzRXQSsTxae.webp" alt="image-20240616135350074"></p><p><img src="https://s2.loli.net/2024/06/16/2FrwbVQL49yxqa8.webp" alt="image-20240616135532981"></p></li></ul><h1 id="问题排查">问题排查</h1><ol><li><p>查了MySQL和Redis的日志，发现日志正常没什么问题。</p></li><li><p>重启MySQL容器，重试连接，同样连不上。</p></li><li><p>重启docker后，就能连上了。</p></li><li><p>重启虚拟机也能连上。</p></li></ol><p>！！！（但我重启docker后，我其他的微服务就要再Run一遍）</p><h1 id="解决办法">解决办法</h1><ul><li>开始在网上搜寻解决办法，发现大家的问题和我不太一样</li></ul><ol><li><p>于是我开始从虚拟机本机文件入手</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /usr/lib/sysctl.d/00-system.conf </span><br></pre></td></tr></table></figure><p>进入后文本如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># Kernel sysctl configuration file</span><br><span class="line">#</span><br><span class="line"># For binary values, 0 is disabled, 1 is enabled.  See sysctl(8) and</span><br><span class="line"># sysctl.conf(5) for more details.</span><br><span class="line"></span><br><span class="line"># Disable netfilter on bridges.</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 0</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 0</span><br><span class="line">net.bridge.bridge-nf-call-arptables = 0</span><br></pre></td></tr></table></figure></li><li><p>在后面添加如下内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net.ipv4.ip_forward = 1</span><br></pre></td></tr></table></figure></li><li><p>保存退出，接着重启网络服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart network</span><br></pre></td></tr></table></figure></li><li><p>重启以后，输入以下命令，查看IPv4转发状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl net.ipv4.ip_forward</span><br></pre></td></tr></table></figure><p>显示如下，则转发成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net.ipv4.ip_forward=1</span><br></pre></td></tr></table></figure></li><li><p>再次挂起VMware，重试连接mysql和redis，就已经没问题了。</p></li></ol><blockquote><p>记录下这个问题，之后遇到相似问题方便查找！</p></blockquote>]]></content>
    
    
    <summary type="html">记录VMware挂起后无法连接MySQL和Redis问题解决</summary>
    
    
    
    <category term="问题排查" scheme="https://blog.xing-ye.top/categories/%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/"/>
    
    
    <category term="Docker" scheme="https://blog.xing-ye.top/tags/Docker/"/>
    
    <category term="Linux" scheme="https://blog.xing-ye.top/tags/Linux/"/>
    
    <category term="VMware" scheme="https://blog.xing-ye.top/tags/VMware/"/>
    
  </entry>
  
  <entry>
    <title>《福格行为模型》全书随记</title>
    <link href="https://blog.xing-ye.top/posts/1a6413b1/"/>
    <id>https://blog.xing-ye.top/posts/1a6413b1/</id>
    <published>2024-06-02T16:00:00.000Z</published>
    <updated>2024-06-25T07:21:38.684Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><ul><li><p>Q：为什么看了这本书呢？</p><p>A：最近关注了一个宝藏up，有一期视频里推荐的。</p></li><li><p>本篇文章呢，是把书中的一些观点精简提炼了出来，以便今后生活中用到的话能够快速回忆。（其实呢，有时间的话还是很推荐大家去拜读原书，书中提供的一些经典案例可以很好的理解其中的观点）</p></li><li><p>最后，送给大家的一句话——阅读跟改变相关的故事和指南是好事，但不要止步于此。请将书中的这些观点应用到日常生活中去。你可以像学习其他技巧一样练习改变的技巧，即使犯错了，也没有关系。</p></li></ul><h2 id="书中前言-行为设计的价值">书中前言　行为设计的价值</h2><ul><li><p><strong>小即是大。即使是小事，也有可能带来巨大的改变。</strong></p><ul><li>这是前言部分的第一句话：强调微习惯的重要性。</li></ul></li><li><p>当我们尝试改变却失败了时，我们却不会责怪“制造商”，而总是会责怪自己。（自我批评）</p><ul><li>然而问题并不在于我们自身，而在于我们为做出改变所采取的方法。这是一个设计问题，而不是个人缺点问题。</li></ul></li><li><p><strong>要想设计出成功的习惯并改变自身行为，你需要做到3件事：</strong></p><ul><li>停止自我批评；</li><li>把你的愿望拆解成微行为；</li><li>将每一次错误当成是一种新发现，并利用它们不断改进。</li></ul></li><li><p>仅有信息是无法保证有效改变行为的。</p><ul><li>（“信息-行动谬论”——如果我们能为人们提供正确的信息，就能改变人们的态度，进而改变人们的行为。）</li></ul></li><li><p><strong>能带来持久改变的只有3件事：经历顿悟、改变环境、从细微之处着手改变自身习惯</strong></p><p>“微习惯”就是让环境和小步骤（baby steps）发挥最大力量的新策略</p></li><li><p><strong>从小改变着手的5个原因</strong></p><p>1，可以利用碎片时间</p><p>2，可以立刻开始改变</p><ul><li>（“毛伊习惯”——请你每天早晨一起床就立刻说出这句话：“今天又是美好的一天！”并在说出这句话的同时，尽量去感受乐观和积极的心态。）</li></ul><p>3，不需要担心会失败</p><ul><li>小习惯也可以默默进行，在没人注意到的同时开始改变。没有人注意，就不会感到压力过大。</li></ul><p>4，一样能吃掉“大鲸鱼”</p><ul><li>我们生活在一种欲望驱动型的文化中，崇尚即时满足，很难做到甚至接受循序渐进，但这恰恰是培养有意义的长期改变所需的品质。如果不能立刻取得期望的结果，人们就会感到灰心丧气。这很正常，但很有可能会导致失败。</li><li>吃掉“大鲸鱼”的最佳方法就是——<strong>一次咬一小口</strong>。</li></ul><p>5，不需要依赖动机或意志力也能做到</p><ul><li>行为设计的一个关键准则：<strong>简单才能促成改变。</strong></li></ul></li><li><p><strong>THE ANATOMY OF TINY HABITS（ABC三步骤）</strong></p><p>1．锚点时刻提醒你去执行新的微行为的关键时点。</p><p>2．新的微行为锚点出现后立刻去执行的微行为。</p><p>3．即时庆祝完成新的微行为后要立刻庆祝。</p><blockquote><p>Anchor　锚点             Behavior　行为                Celebration　庆祝</p></blockquote></li></ul><h2 id="三个影响因素">三个影响因素</h2><p><strong>行为的发生，需要动机、能力和提示3大要素同时发挥作用。</strong></p><ul><li>动机是做出行为的欲望，能力是去做某个行为的执行能力，而提示则是提醒你做出行为的信号。</li></ul><img src="https://s2.loli.net/2024/06/14/EdhTnvKQaW7eGfz.webp" alt="福格行为模型" style="zoom: 33%;" /><h3 id="3要素齐备，行为才能发生"><strong>3要素齐备，行为才能发生</strong></h3><ul><li>这里将B=MAP公式以一种更加直观的方式呈现了出来，它展示了动机和能力之间的关系。</li><li>这里有一个关键点：<strong>能成为习惯的行为一定会落在行动线上方。</strong></li></ul><img src="https://s2.loli.net/2024/06/14/CYPN2WpIvXSoE3H.webp" alt="福格行为模型-整理办公桌" style="zoom:33%;" /><ul><li><p>通过MAP的强弱度来分析行为时，可以参考下面4个原则。</p><ol><li><p>动机越强，行为就越有可能做到（在动机很强时，人们无须依靠提示就能采取行动，还能做出更困难的行为。）</p></li><li><p>行为越容易，就越有可能成为习惯</p></li><li><p>动机和能力要像队友一样密切配合</p><ul><li>既有动机又有能力，才能让行为落到行动线上方，而这两大要素可以像队友那样密切配合。如果其中一方较弱，那另一方就需要很强才能促进行动，让行为落到行动线上方。</li></ul></li><li><p>没有提示，任何行为都不会发生</p><img src="https://s2.loli.net/2024/06/14/jflS26bYpHvQ9Li.webp" alt="福格行为模型-提示" style="zoom: 33%;" /></li></ol></li></ul><h3 id="理解行为，就能影响行为">理解行为，就能影响行为</h3><details class="toggle" ><summary class="toggle-button" style="">书中案例</summary><div class="toggle-content"><p>几年前，我有一次乘坐飞机遇到一个精力旺盛的小孩，他就坐在我后面。他的小脚不停地踢我的座椅靠背。我知道他多半会从起飞一直踢到降落，毕竟他还是个孩子。趁飞机还没起飞，我问自己能不能做点儿什么来制止或减少他的这种行为。</p><p>我使用了福格行为模型来分析他的行为。首先，考虑提示。我能清除它吗？不能。我无法控制这个小孩内心的想法、无聊或能导致他踢我座椅的任何因素。其次，考虑能力。我可以让他的踢腿行为变得困难吗？不能。所以，最后我只剩下一个选择：<strong>动机</strong>。有没有一种冷静又有趣的方式可以让这个小男孩少踢我的座椅呢？我决定使用<strong>互惠法则</strong>。别人送礼物给你时，你自然而然会想到要以某种方式予以回报。这种动力有助于人与人之间友好相处。这是我们可以优雅地影响他人动机的一种方式。我决定试一试。</p><p>我的电脑包里有一个黄色的笑脸按钮。我从包里掏出了按钮，拿给这名小乘客和他的父母看。“嗨，”我说，“我想把这个笑脸按钮送给你。我希望它能帮助你记住在今天的飞行过程中不要踢我的座椅。”小孩说道：“好的！”他的父母则对我报以真诚的微笑。这次飞行很顺利，没有人再踢我的座椅，我还结交了几位朋友。各自领完行李后，我们挥手道别。</p></div></details><h3 id="解决行为问题的3个步骤">解决行为问题的3个步骤</h3><p>你可以遵循如下步骤，按顺序逐个尝试。如果第一步没效果，那就到下一步，依此类推。</p><p>1．检查有没有<strong>行为提示</strong>。</p><p>2．检查有没有<strong>行为能力</strong>。</p><p>3．检查有没有<strong>行为动机</strong>。</p><details class="toggle" ><summary class="toggle-button" style="">书中案例</summary><div class="toggle-content"><p>比如，假设你想让女儿放学回家时帮你买几张海报纸，作为交换条件，她可以开你的车去学校。你觉得这挺公平的，但是那天她放学回家并没有帮你买。你有些不高兴，并且向她解释你有多需要海报纸。（把车给她开和向她解释你的需求，都是动机策略。）你的女儿说：“对不起，我明天去买。”然而，她第二天还是没有帮你买回来。这一次，你生气了，告诉她你不会再让她开你的车，还批评她不靠谱。（这也是一种动机策略。）这种情况可不太妙。</p><p>现在，让我们重新假设你已经知道了解决问题的方法。第一天，当你女儿没有把海报纸带回家时，你并没有发火。你进入了问题解决模式：“你有没有想过用什么办法提醒自己去买海报纸？”“没有。我只是觉得自己能记得，结果却忘记了。”于是你问她：“你觉得明天用什么来提醒你比较好？”这样你就可以来设计第二天的提示。她说她会在手机上记一条待办事项。你猜结果如何？第二天，她高高兴兴地把海报纸交给了你。</p></div></details><p><strong>当你把这种问题解决方法用于自身行为时，会发现这能让你不再自责。</strong></p><p>在多数情况下，有些行为难以做到的根本原因不是缺乏动机。<strong>只要找到一个好的提示，或是让行为更容易做到，就能解决行为问题。</strong></p><h3 id="用福格行为模型观察世界">用福格行为模型观察世界</h3><ul><li><p>问题不在于我们自身，而在于采取行为的方式。把这些行为一步一步地拆解开之后，我们能够发现了其设计的缺陷所在。</p></li><li><p>“我希望你将生活当作自己的专属“改变实验室”，你可以在这里为那个你想成为的自己做任何尝试。这是一个既能让你感到安全，又能让你感到一切皆有可能的地方。”</p></li></ul><h2 id="动机，找到实现愿望的黄金行为">动机，找到实现愿望的黄金行为</h2><blockquote><p>愿望是改变人生的绝佳起点，但无论你想进行何种改变，为自己匹配“对”的行为都是改善生活的关键。</p></blockquote><h3 id="明明拥有动机却还是无法改变的5个原因">明明拥有动机却还是无法改变的5个原因</h3><p><strong>1． 动机很复杂</strong></p><ul><li><p>动机是什么？动机是完成某个特定行为（晚上吃菠菜）或某类行为（每晚吃蔬菜和其他健康食品）的欲望</p></li><li><p>3个动机来源：</p><ul><li>你自己（你想要的）</li><li>你希望通过采取行动可以得到的利益或受到的惩罚（胡萝卜加大棒）</li><li>以及你的周遭环境（例如，所有朋友都在做这件事）</li></ul></li><li><p>人物（person）、行动（action）和情境（context）是理解人类行为的基础。</p></li></ul><img src="https://s2.loli.net/2024/06/17/RnxLdVCPZHeB8WS.webp" alt="PAC小人" style="zoom:33%;" /><p><strong>2．动机冲上顶峰后会迅速回落</strong></p><ul><li>在行为设计领域，我们将动机短期激增的现象称为<strong>动机波浪</strong>。<ul><li>你以前一定有过这样的经历：你的动机冲到顶峰，随后急转直下。或许你会责备自己没能坚持下来，但这不怪你，这就是动机在生活中的运作方式。</li></ul></li></ul><p><strong>3．动机波动十分频繁</strong></p><p><strong>4．将动机用于追逐抽象概念无法产生结果</strong></p><ul><li><p><strong>愿望是改变人生的绝佳起点。</strong></p></li><li><p>但问题是人们往往认为，只要凭借强烈的动机朝着目标前进，就能带来持久的改变。因此，人们选择关注愿望和动机，但这个组合并不能产生结果。</p></li><li><p>把时间和精力用在激励自己或他人追逐不明确的概念上，则是错误的举动。</p></li></ul><p><strong>5．仅凭动机无法实现长期改变</strong></p><ul><li>在福格行为模型的3个要素中，动机是最不可预测和最不可靠的</li><li>如果只关注动机，就会忽视另外两个行为要素：能力和提示。</li></ul><blockquote><p>假设，只要你能立刻将血糖降到正常水平，就会有人给你100万美元。这100万美元很有激励作用吧？但你可以立刻做到吗？也许不能。只有动机是不够的。你无法仅凭高水平动机就收获成果或实现愿望。</p></blockquote><h3 id="明确愿望与列出行为集群">明确愿望与列出行为集群</h3><h4 id="明确愿望">明确愿望</h4><ul><li><p>行为设计的第1步，就是明确愿望（或成果）。</p></li><li><p>你应该有抱负、有梦想，或者有一个愿望清单。描述你想做的事情，越具体越好。只有知道自己想去哪里，才有可能真正地到达。</p></li><li><p>愿望（aspiration）、成果（outcome）和行为（behavior）三者之间的区别</p><ul><li>愿望是抽象的欲望，比如“想让孩子在学校取得成功”；</li><li>而成果更容易衡量，比如“第二学期取得‘优’的成绩”。</li><li>愿望和成果都可以作为行动的起点，但它们都不是行为。</li><li><strong>行为是你现在或在某个特定时刻可以去做的事情</strong></li><li>相比之下，你无法随时实现一个愿望或取得一个成果。</li><li>只有坚持执行正确的具体行为，久而久之，你才能够实现愿望、取得成果。</li></ul></li><li><p>明确愿望有助于对真正想做的事进行有效的行为设计。</p></li></ul><h4 id="列出行为集群，探索行为选项">列出行为集群，探索行为选项</h4><ul><li><p>行为设计的第2步，是探索行为选项。</p></li><li><p>选择一个愿望，然后列出一组有助于实现愿望的具体行为。(不用做出任何决定或承诺，只探索你有哪些选择，列出的行为越多越好。)</p></li><li><p>行为集群的原理：在图中间的云朵里写下愿望，然后在它周围的文本框里填入具体的行为</p><img src="https://s2.loli.net/2024/06/17/wy4RQJnmWVkNL6x.webp" alt="行为集群-探索行为选项" style="zoom: 50%;" /></li><li><p>为了找到尽可能多的行为选项，可以参考下面几种行为类型：</p><ul><li>你想做哪些一次就能完成的行为？</li><li>你想养成哪些新习惯？</li><li>你想终止哪些习惯？</li></ul></li><li><p>最后，你会得到一个行为集群，包含各种奇怪的、正常的、惊人的行为。这就对了。</p></li><li><p>如果你无论如何都想不出什么新想法，那不妨寻求他人的帮助，比如你的伴侣、孩子，甚至是网友，看看他们对于能让你实现愿望的行为有没有什么建议。</p><ul><li>你可以这样提问：“如果我想________，那你认为我应该做哪些事才能成功？”</li></ul></li></ul><h3 id="行为匹配">行为匹配</h3><ul><li><p>行为设计的第3步也是最重要的 一步，<strong>行为匹配</strong>。</p></li><li><p>无论你想进行何种改变，为自己匹配“对”的行为都是改善生活的关键</p></li><li><p>行为匹配的3个误区：</p><ul><li><p>误区1：全凭猜测，毫无章法</p></li><li><p>误区2：从网上找灵感</p></li><li><p>误区3：照搬朋友的成功经验</p></li></ul></li></ul><p>​以上三个误区我自己总结就是：要找到最<strong>适合自己</strong>的行为的最佳方式!</p><ul><li>行为设计领域，我们将那些与你最匹配的行为称为黄金行为。<ul><li>黄金行为的三个标准：<ul><li>这个行为能让你实现愿望（影响）；</li><li>你想做出这个行为（动机）；</li><li>你可以做到这个行为（能力）。</li></ul></li></ul></li></ul><h3 id="焦点地图">焦点地图</h3><ul><li>行为集群中的所有行为都要置入焦点地图。</li></ul><img src="https://s2.loli.net/2024/06/17/ZHAuLbXtWJIOgSU.webp" alt="焦点地图" style="zoom:50%;" /><h4 id="第一回合">第一回合</h4><ul><li>绘制焦点地图的第一回合，先不必考虑行为的可行性或现实性，只考虑<strong>行为的影响程度</strong>就好。</li></ul><details class="toggle" ><summary class="toggle-button" style="">书中案例</summary><div class="toggle-content"><p>马克把自己之前列出的每一个行为都制作成索引卡，然后一张一张地审视它们。</p><p>马克只需要考虑它们对减轻压力有多大的帮助。每查看一个行为，他都会问问自己：这个行为对于减轻压力的效果如何？马克挑选出的第一个行为是每天弹10分钟吉他。这很容易，马克喜欢弹吉他，就算只弹一小会儿，也能让他心情愉悦。这个行为对减轻压力很有帮助，于是马克把这张索引卡放到了靠近高影响行为顶端的位置。他挑选出的下一个行为是每天提早下班15分钟。这个主意看起来不错，但他后来仔细一想，发现这可能会带来反效果，尤其是在工作期限快要到的时候。所以，他把这张索引卡放到了低影响行为的底部。</p></div></details><ul><li>将每一个行为归入合适的位置。如果你不能确定一个行为的影响是高是低，那么先尽量把它放到合适的位置，后面可以随时调整</li></ul><h4 id="第二回合">第二回合</h4><ul><li>第二回合要关注的重点是<strong>行为的可行性和现实性。</strong></li><li>不需要再考虑行为的影响程度，而是要根据行为的可行性<strong>横向</strong>移动它们。</li></ul><details class="toggle" ><summary class="toggle-button" style="">书中案例</summary><div class="toggle-content"><p>马克重新检视了“提早下班”和“每天弹吉他”这两个索引卡，并问自己：我能让自己做到吗？这个问题的措辞很重要，它同时包含动机和能力两大行为要素。大多数人能轻松回答这个可行性问题。当马克问自己：“我能让自己做到每天弹吉他吗？”答案显然是能。然而，当他问自己：“我能让自己每天提早下班吗？”他有点儿愁眉苦脸、犹豫不决。这说明他很可能做不到。</p></div></details><ul><li><p>大多数行为的可行性问题都很容易回答，但对有些行为来说，如果知道是什么让我们犹豫不决会很有帮助。我们可以这样问自己：“我想要做这件事吗？”换句话说就是：“我有做这件事的动机吗？”——不仅涉及动机，而且涉及能力。</p></li><li><p><strong>行为设计强调了这样一个事实：持久改变的关键，在于为自己匹配真心想做的行为。</strong></p></li><li><p>绘制焦点地图的目的，是匹配你早就想做且能让你实现愿望的简单行为。从最简单、最有动机的事情开始做起，也许你就能自然而然地做出更大的改变。</p></li></ul><h3 id="轻松找到你的黄金行为">轻松找到你的黄金行为</h3><ul><li><p>明确愿望后并列出行为集群，将行为放置于焦点地图上（执行回合一、二）。这些行为会分布在焦点地图的各个位置。</p><img src="https://s2.loli.net/2024/06/17/T3AYeB1G2SJWOsf.webp" alt="焦点地图-探索行为选项" style="zoom:50%;" /></li><li><p>焦点地图的最后一步是选出你要设计的行为。<strong>右上方的那些行为</strong>都是可以进行设计的，其他行为就抛之脑后吧。</p></li></ul><img src="https://s2.loli.net/2024/06/25/AekDLG6OEVlUtMI.webp" alt="焦点地图-找到黄金行为" style="zoom:50%;" /><ul><li><p>本章小结：</p><p>愿望可以是抽象的，但实现愿望的行为不行。行为必须实际、具体，它们是让你攀岩而上的支点和立足点。通往顶峰的路径是独属于你自己的，你要根据峭壁的实际情况来选择合适的行为。为自己匹配合适的行为是行为设计过程中最关键的步骤，也是探索问题时要重新检视的要点所在。</p></li></ul><h2 id="能力，让行为简单到随时顺便都能做">能力，让行为简单到随时顺便都能做</h2><blockquote><p>人类的天性决定了我们无法长期坚持做令自己痛苦的事情，但如果从容易做的事情开始，就可以做到你想做的几乎任何事。</p></blockquote><h3 id="“容易做”分析，在能力范围内找到行为">“容易做”分析，在能力范围内找到行为</h3><ul><li>我们通过福格行为模型比较 做20个俯卧撑和做2个靠墙俯卧撑的差别</li></ul><p><img src="https://s2.loli.net/2024/06/17/9rf16aqQRHEo72i.webp" alt="image-20240617165334033" style="zoom:33%;" /><img src="https://s2.loli.net/2024/06/17/Eg7AtdTqGIiWbvy.webp" alt="image-20240617165347896" style="zoom:33%;" /></p><ul><li><p>如果能让行为变得容易做到，那么即使动机很弱，也依然能推动行为至行动线上方</p></li><li><p>这是微习惯策略的优点之一：<strong>把行为拆解到极小，即使没有动机也能做到。</strong></p></li><li><p>能力是维持习惯最可靠的要素，它是让我们处于有利位置的绝佳选择。</p></li><li><p>发现问题：是什么让这个行为难以做到？</p><ul><li><p>你是否有足够的时间？</p></li><li><p>你是否有足够的资金？</p></li><li><p>你是否有足够的体力？</p></li><li><p>这个行为是否需要许多创意或脑力？</p></li><li><p>这个行为符合你现在的日程吗？还是需要做出调整？</p></li><li><p>这5个因素组成了一条能力链，能力链的强度等于其中最薄弱一环</p><img src="https://s2.loli.net/2024/06/17/LQ3nJoGTBmYMeX7.webp" alt="image-20240617170649766" style="zoom:50%;" /></li></ul></li><li><p>解决问题：怎样才能让这个行为更容易做到？</p><ul><li>无论你的愿望是什么，<strong>提升技能、获取工具和资源，以及让行为变得微小</strong>，都能让事情变得更简单。</li></ul></li></ul><h3 id="实现“容易做”的3种方式">实现“容易做”的3种方式</h3><p><strong>1．提升技能</strong></p><p><strong>2．获取工具和资源</strong></p><ul><li>莫莉（案例中的人物）知道工具和资源也是一种行为设计的策略后，便开始尝试使用这个策略，并最终获得了很好的结果——烹饪时间减半，她跨越了从太难到容易的界限。</li><li>不过，我想强调的是，一个灵活的、试验性的问题解决思维，或许才是最好用的工具。</li></ul><p><strong>3．让行为变得微小</strong></p><ul><li><p>入门步骤——即朝理想行为迈出的最开始的一个小举动。</p><ul><li>入门步骤就是你的微行为，是你在培养习惯之初唯一需要进行的行动。为了做到理想行为，要从关键的一小步开始。</li><li>如果你想养成每天健步走1 000多米的习惯，那入门步骤就是穿上运动鞋。穿上运动鞋后，你可能就会改变想法——健步走这件事好像突然变得没那么难了</li><li>每完成一个入门步骤就是一次成功。每一次成功，都能让你继续坚持，增加养成习惯的可能性。</li></ul></li><li><p>缩小规模——将理想行为缩小到极小的规模，再开始行动。</p><ul><li>如果你想培养的习惯是每天健步走1 600米，那你可以把这个行为缩小，比如走到自家的信箱那里，无须更远。</li></ul></li><li><p>案例：</p><p><img src="https://s2.loli.net/2024/06/17/nCtQ4yLP7Vu3wNa.webp" alt="image-20240617173148213"></p></li></ul><h3 id="设计你的微习惯">设计你的微习惯</h3><ul><li><p>案例</p><p><img src="https://s2.loli.net/2024/06/17/zKQeHB28LPnAvgN.webp" alt="image-20240617172025698"></p></li><li><p>让行为“容易做”的设计流程：</p><ul><li>1．你觉得自己有没有足够的动机去学习新技能？<ul><li>有？很好，那就去学吧。继续下一个问题。没有？也继续下一个问题。</li></ul></li><li>2．你觉得自己有没有足够的动机去获取工具和资源？<ul><li>有？非常好，赶紧去做吧。继续下一个问题。没有？下一个问题。</li></ul></li><li>3．你能缩小行为的规模吗？<ul><li>能？好极了。你已经可以开始实践新习惯了。不能？下一个问题。</li></ul></li><li>4．你能找到你的入门步骤吗？<ul><li>能？很棒。把入门步骤当作起点，然后在适当的时候逐渐增加难度。不能？如果所有问题的答案都是否定的，那你可能需要回到行为集群，为自己重新匹配一个行为。</li></ul></li></ul></li><li><p>生活难免会有意外，人会生病、会去度假，也会遇到突发状况。**我们追求的不是完美，而是持续。**这意味着，无论习惯多么微小，都要坚持下去，让它在你的日常生活中扎根。</p></li></ul><h3 id="只要足够简单，就能实现改变">只要足够简单，就能实现改变</h3><ul><li><p><strong>大物始于小</strong>，培养习惯也是同样的道理——从小处和简单着手。</p></li><li><p>人们误以为动机是改变行为的关键。但现在你已经知道，<strong>简单才有可能彻底改变行为。</strong></p></li></ul><h2 id="提示，善用锚点时刻让行为立即发生">提示，善用锚点时刻让行为立即发生</h2><blockquote><p>没有提示，行为就不会发生，提示就是在对你说：“现在就行动。”</p></blockquote><ul><li>提示，是行为发生的决定性要素；没有提示，行为就不会发生。</li><li>对某些习惯来说，关键是要把它插入生活中的合适位置。习惯在生活日常中处于什么位置，决定了行动与否、成败与否。</li></ul><h3 id="生活中常见的3类提示">生活中常见的3类提示</h3><ul><li><p>1．人物提示</p><ul><li>身体会提醒我们做出本能反应，比如肚子饿、困倦和想上厕所。</li><li>然而，如果行为无关本能或生存，那人物提示可能不是一个好办法，因为人类的记忆是不够可靠的。</li></ul></li><li><p>2．情境提示</p><ul><li>周围环境中的任何事物都可以作为采取行动的提示：便利贴、App通知、电话铃声……</li><li>但如果设置的情境提示太多，可能还会产生反效果——令人变得迟钝，无法注意到提示（比如听不到提示铃，或对便利贴视而不见）</li></ul></li><li><p>3．<strong>行动提示</strong>（生活中那些已经稳固的事情）</p><ul><li>将你已经在做的行为当作提示，以此来提醒你为培养新习惯采取必要的行动。</li><li>行动提示是一种将<strong>微习惯和行为</strong>结合起来的方式。</li><li>将自己平常做的一些融入生活的事情（早晨睡醒下床，送孩子上学……）当作一种绝佳的提示。</li></ul></li><li><p><strong>锚点</strong>（即行动提示）</p><ul><li>只要一直将新习惯绑定在既有习惯上，就能毫不费力地不断插入新习惯。<ul><li>ok，举个例子来说，我现在几乎每天都要去图书馆学习（日常行为），从寝室去图书馆的路程大概要10分钟左右，那我想是不是能利用这个时间做些事情，于是我开始在路上收听博客（新行为），慢慢地，这个行为变成了我的新习惯，我可以利用这个时间了解每天世界范围内的商业科技动态！</li></ul></li><li>这种方法避开了人物提示和情境提示的缺点（你不用再依赖自己或他人来提醒你，也不会有过多提示干扰你。生活中的每一个行为都是提示。）</li></ul></li></ul><h3 id="设计“对”的提示的3个步骤">设计“对”的提示的3个步骤</h3><h4 id="1-确定你的锚点">1. 确定你的锚点</h4><ul><li><p>锚点必须是生活中<strong>一定会发生的事情</strong>。</p></li><li><p>福格研究表明，人们往往都是早晨时段的日程安排最多。因此，<strong>早晨是培养新习惯的最佳时间。</strong></p></li><li><p>锚点一定要明确，模糊的锚点（如“晚饭之后”或“当我感到有压力之后”）没有用。</p></li><li><p>确定锚点的3个考量</p><ul><li>匹配物理位置：考虑新习惯发生的地点（首要）</li><li>匹配频率：检视既有日程时，要考虑多久进行一次新习惯</li><li>匹配主题/目的：可以选择与新习惯拥有相同主题或目的的锚点行为</li></ul></li><li><p>设计新习惯配方时，不要追求完美。因为如果你不喜欢这个配方，那你随时可以调整它。</p></li></ul><h4 id="2-用试验将锚点与黄金行为联系起来">2. 用试验将锚点与黄金行为联系起来</h4><ul><li>找到对的锚点，并为它匹配合适的微行为，然后就能对你想改变之处进行有效的行为设计了。</li></ul><h4 id="3-利用“最后动作”优化锚点">3. 利用“最后动作”优化锚点</h4><ul><li><p>更进一步观察锚点，寻找一个更精准的时刻——我称之为“最后动作”，即锚点行为的最后一个动作。</p><ul><li><p>举例：“在我下班回家之后”是一个模糊的锚点，你可以把它改成“在我把包放下之后”，这样的描述更加具体。</p><p><img src="https://s2.loli.net/2024/06/20/65C2rM9DTJldOBx.webp" alt="image-20240620190559819"></p></li></ul></li></ul><h3 id="在日程中找到最佳锚点">在日程中找到最佳锚点</h3><h4 id="为自己设计“顺便习惯”">为自己设计“顺便习惯”</h4><ul><li>碎片时间是培养新习惯的理想时段</li><li>这种碎片时间人人都有：等红灯的时间，排队的时间。与其在这些时间烦恼或胡思乱想，不如将它们当作锚点时刻，来培养新习惯。</li></ul><h4 id="给用户的最佳提示">给用户的最佳提示</h4><ul><li>一个产品或服务的成功，离不开对的提示——在对的时间让用户采取行动的事物。</li></ul><h3 id="“-珍珠习惯”，管理压力与焦虑">“ 珍珠习惯”，管理压力与焦虑</h3><ul><li><p>珍珠习惯：它们的本质是将原本惹人厌烦的事情，转化成美好的提示。</p></li><li><p>我们无法将生命中那些糟糕的人或事一一剔除，因此有时不得不忍受待事不公的、烦人的或举止恶劣的人。不过，我们可以掌控自己这一边。</p></li><li><p>用他人的行为来提示自己做出正向而非自我挫败的行为，在感到无助时不失为一个好主意。</p><ul><li>遇到不如心意的事或人，想想or动手去做那些能让自己快乐的事！</li></ul></li><li><p>微习惯如此美妙是因为它能引发连锁反应，而其中的奥秘就是：<strong>成效最佳的改变，源自感觉良好</strong>，而非感觉糟糕。</p></li></ul><h2 id="创造积极情绪，将行为固化为习惯">创造积极情绪，将行为固化为习惯</h2><blockquote><p>庆祝是习惯养成的“肥料”。每一次庆祝都会让相应的习惯牢牢地扎根，而坚持庆祝的累积效果会滋养整座“习惯花园”。</p></blockquote><ul><li>研究发现：成年人有很多种跟自己说“我做得不好”的方式，却很少掌握对自己说“我做得不错”的方式。</li><li><strong>感觉良好</strong>（庆祝）是微习惯策略的重要组成部分。</li></ul><h3 id="行为设计，本质就是情绪设计">行为设计，本质就是情绪设计</h3><ul><li><p>一系列的积极体验可以强化新行为，让人形成习惯性的反应。</p></li><li><p>缓解身体上的、精神上的或心理上的不适也是一种积极体验。</p></li><li><p>良好感受刺激大脑产生名为多巴胺的神经递质，它控制着大脑的“奖励系统”，帮助我们记住那些可以产生良好感受的行为，这样我们就会继续去执行那些行为。</p><ul><li>举个例子：当父母看见孩子学会走路，为此兴奋地尖叫起来时，同样的现象发生了。孩子的大脑释放多巴胺，将“走路”编码为某种美好的应该再次尝试的动作。</li></ul></li></ul><h3 id="习惯来自让你感觉美好的情绪">习惯来自让你感觉美好的情绪</h3><ul><li><p><strong>情绪创造习惯。</strong></p></li><li><p>自动化度光谱</p><p><img src="https://s2.loli.net/2024/06/20/kdTJBCZvMEpoj1b.webp" alt="自动化度光谱上的行为"></p><ul><li>在光谱左侧，是非自动化的行为。它们不是决策，就是深思熟虑后的选择。</li><li>在光谱右侧，是强习惯，是你不假思索就会做出的行为，比如拿笔或系鞋带的习惯。</li><li>光谱中间的圆圈代表思考过片刻后才做出的行为，所以并不是完全自动化的。</li><li>如果你做出了位于光谱中间的行为，在过程当中或在完成之后立即因它产生了积极的情绪感受，就会导致行为向右移动，变得更加自动化。</li></ul></li><li><p>情绪创造习惯，这既有好处也有坏处。</p><ul><li>不管人类是否认为凌晨两点吃蛋糕是不健康的行为，我们的大脑都只是希望享受吃蛋糕带来的愉悦感。</li><li>作为人类，我们深受情感驱动，因此，大多数人都有着各种各样的习惯，有些是我们认为的好习惯，有些是我们不想要的坏习惯。</li></ul></li></ul><h3 id="用庆祝滋养你的“习惯花园”">用庆祝滋养你的“习惯花园”</h3><ul><li>只要能找到有效的庆祝方式，并在某种新行为发生之后立即庆祝，人的大脑就会重新编码，这能让我们更加自发自愿地重复这种行为。</li><li>不过，习惯养成之后，就不必刻意进行庆祝了。你不需要无止境地持续庆祝同一个行为的发生。</li></ul><h4 id="庆祝的原则，“及时又简单”">庆祝的原则，“及时又简单”</h4><ul><li><p><strong>福格原则2：帮助人们感受成功</strong>(原则上不是获得成功，而是“感受成功”)</p><ul><li>如果某款产品让你感觉自己很笨，很有挫败感，那你很难喜欢上它。但如果某款产品让你有了成就感，那你就会喜欢它，想要多多使用它，甚至离不开它。</li></ul></li><li><p>让习惯迅速且简便地在大脑中扎根的方式如下：</p><ul><li>1．执行你想要转化为习惯的行为序列（锚点结合新习惯）；</li><li>2．立刻庆祝。</li></ul></li><li><p>庆祝需要注意的细节</p><ul><li>你得在行为之后立刻庆祝（即时性），</li><li>同时需要真切感受到庆祝带来的积极情绪（强度）。</li><li>即时性不难做到，找到真正能够创造良好感受的庆祝方式才更有挑战性</li></ul></li></ul><h4 id="找到感觉最自然的庆祝方式">找到感觉最自然的庆祝方式</h4><ul><li>庆祝的唯一规则就是你必须说出点什么（在心里或真的说出来都行）或做点什么，任何能让你感受良好并产生成功的感觉的语言或动作都可以。</li></ul><h4 id="不同场景，不同的庆祝方式">不同场景，不同的庆祝方式</h4><ul><li>我鼓励你逐渐选择和积累多种庆祝方式，以在不同场景下使用，包括公众场合和私人场合。</li></ul><h4 id="庆祝小事，迅速感受到成功">庆祝小事，迅速感受到成功</h4><ul><li><p>庆祝小事，迅速感受到成功.(这不是因为我不希望你取得卓越成就，而是因为你需要从小处着手，方能成就大事。)</p></li><li><p>接受和尊重小事的重要性就是我们为成功做出改变的必然选择</p></li></ul><h4 id="固定习惯需要反复演练">固定习惯需要反复演练</h4><ul><li><p>为了快速固定习惯或帮助自己记住要执行习惯，你需要反复演练行为序列（锚点结合新习惯），然后立刻庆祝，之后重复7～10次。</p></li><li><p>演练微习惯，既是在训练肌肉记忆，也是在给大脑重新连线让它记住。只要找到一个有效的庆祝方式，你就能迅速地钻研和固化习惯。</p></li></ul><h4 id="庆祝的3个时机">庆祝的3个时机</h4><ul><li><p>你想起要执行新习惯的时刻</p><details class="toggle" ><summary class="toggle-button" style="">假设你的微习惯配方是</summary><div class="toggle-content"><p>在我下班回家进门之后，我会把钥匙挂起来。在养成这个习惯的过程中，我推荐你在大脑提醒你执行新习惯的那一刻进行庆祝。想象你下班回家进了门，刚放下背包，这个想法就浮现在你的脑海中：噢，现在就是把钥匙挂起来的时刻了，这样我明天才能轻松找到钥匙。你应该在这一刻进行庆祝。而通过创造一种成功的感觉，你固化了习惯，不是“把钥匙挂起来”的习惯，而是“记住把钥匙挂起来”的习惯。</p></div></details></li><li><p>你正在执行新习惯的时刻</p></li><li><p>你刚刚完成新习惯的时刻</p></li></ul><h4 id="庆祝让习惯保持活力">庆祝让习惯保持活力</h4><ul><li>在行为变得自主自发后，你就不再需要频繁庆祝了</li><li>但当出现长时间没进行过的习惯时，偶尔还是需要用庆祝的方式来固化习惯。</li></ul><h3 id="本章小结：">本章小结：</h3><p><strong>如果你只能从这本书里学到一样东西的话，我希望是：为你的微小成功而庆祝。</strong></p><p><strong>即使你觉得自己一时之间还无法摆脱困境，生活中的小小改变也能够产生巨大的影响力。庆祝可以成为你的救生绳。</strong></p><h2 id="高频率小成功，让小改变自然生长">高频率小成功，让小改变自然生长</h2><blockquote><p>从你想要改变的地方开始，逐渐让自己感受到成功。接着你只需要相信这个过程，期待改变发生。</p></blockquote><ul><li>习惯养成的时间取决于三个因素<ul><li>执行习惯的人</li><li>习惯本身</li><li>情境</li></ul></li></ul><h3 id="从想改变的地方开始，逐渐感受成功">从想改变的地方开始，逐渐感受成功</h3><ul><li>借助微习惯，你可以迅速地取得一连串的微成功，而非那种耗时长久的大成功。（微小的成功能够迅速地增强自信心！）</li></ul><h3 id="掌握技巧，变身“习惯忍者”">掌握技巧，变身“习惯忍者”</h3><ul><li><p>技巧1，行为加工</p><ul><li>关键点：知道自己一次能养成多少新习惯，以及何时能增加更多</li><li><ol><li>专注于你感兴趣的事</li><li>拥抱多样性</li><li>保持灵活性</li></ol></li></ul></li><li><p>技巧2，自我洞察</p><ul><li>关键：找到你可以做出的最小、最容易但意义却最大的改变。</li><li>明确你的愿望或预期成果。</li><li>理解是什么激发了你的动机，也就是知晓你真正想要的和你认为你应该做的之间的区别。</li></ul></li><li><p>技巧3，循序渐进</p><ul><li>关键：知道何时该推自己一把，超越微习惯，提升习惯难度。</li><li>如下是关于如何调整习惯难度的操作指南：<ul><li>不要给自己施加太多压力去试图养成更高阶的习惯。</li><li>如果你想多做一些，不要限制自己。让动机来告诉你该做多少和该怎么做。</li><li>如果你做了很多，一定要为自己额外付出的努力而庆祝。</li><li>利用情感标志来帮助你找到边界。沮丧、痛苦以及逃避等情绪标志着你的习惯出了问题，可能是难度提升太多、太快。</li></ul></li></ul></li><li><p>技巧4，情境设计</p><ul><li>关键：重新设计情境使习惯更易于执行。</li><li>如下是关于重新设计情境的一些指南：<ul><li>在设计新习惯时，也投入时间重新设计情境以便让习惯易于执行。</li><li>开始执行新习惯时，边执行边调整情境，并根据需要重新设计情境以便让习惯易于执行。</li><li>大胆质疑传统。不需要一味顺从规则，要找出对你有效的方式。</li><li>购买你所需要的装备。</li></ul></li></ul></li><li><p>技巧5，心态调整</p><ul><li>关键：拥抱新身份</li><li>构建新身份认知的技巧：<ul><li>用你想要拥抱的一种身份或多种身份，补全“我现在认为自己是那种……的人”这句话。</li><li>参加那些汇集了跟你的新身份相关的人员、产品和服务的活动。</li><li>学习行话，了解谁是专家。</li><li>更新你的社交媒体页面。</li><li>教导他人或成为榜样都能够强化你对新身份的认知。社会地位的力量是很强大的。</li></ul></li></ul></li></ul><h2 id="行为改变系统方案，一次只解一个结">行为改变系统方案，一次只解一个结</h2><blockquote><p>行为设计追求的并非某个独立的结果。行为设计的每一个习惯、每一项改变，都是可以在池塘里引起涟漪的一滴水。</p></blockquote><ul><li><p>3类习惯问题：上山型习惯、下山型习惯和自由落体型习惯。</p><ul><li>上山型习惯是需要努力维持但很容易中断的那种习惯，如闹铃一响立刻起床、去健身房健身或每天进行冥想。</li><li>下山型习惯是容易维持但难以停止的那种习惯，如睡懒觉、说脏话、刷YouTube。</li><li>自由落体型习惯是像药物滥用之类的习惯，除非求助专家，否则很难停止。</li></ul></li><li><p>希望大家不要再用“打破坏习惯”这个短语，因为它有误导性。</p><ul><li>&quot;打破&quot;一词它会暗示你，只要你在某个时刻猛然发力，习惯就会消失不见。但这种做法极少奏效！</li></ul></li></ul><h3 id="行为改变系统的三个方案">行为改变系统的三个方案</h3><h4 id="阶段一，致力于创建新习惯">阶段一，致力于创建新习惯</h4><ul><li><p>改变的技巧</p><ul><li>假设你多年来一直因为体重问题而感到困扰。</li><li>做法：不要在一开始就把减肥或让你感觉痛苦的事情当成目标。相反，你应该从其他方面，比如卫生、人际关系、创造力或任何和体重无关的方面入手，建立一些新习惯。</li></ul></li><li><p>身份转变</p><ul><li>挤走那些你不想要的行为。</li></ul></li></ul><h4 id="阶段二，致力于终止旧习惯">阶段二，致力于终止旧习惯</h4><ul><li><p>让你想终止的习惯更具体</p><ul><li><p>还记的动机那一章的“行为集群”嘛。</p></li><li><p>首先，写下你想要终止的概括型习惯。</p></li><li><p>其次，逐个列出有助于改变概括型习惯的<strong>具体习惯</strong>，把它们写在云朵四周的文本框里。</p></li><li><p>当你看到一大堆具体习惯需要改变时，请不要望而却步，也别感到不知所措。</p><ul><li>究竟应该先挑哪些具体习惯呢？<ul><li>选择最容易的那个；</li><li>选择你最确信自己能做到的那个；</li><li>选择你觉得最没什么大不了的那个。</li></ul></li></ul></li></ul></li><li><p>无论是开始培养新习惯还是终止旧习惯，都必须对具体行为（而非抽象概念）进行设计。</p></li><li><p>聚焦于提示以终止习惯</p><ul><li>移除提示<ul><li>最简单的方法！最佳方式：重新设计周围环境</li></ul></li><li>规避提示<ul><li>不要前往那些会带给你提示的地方；</li><li>不要接近那些会带给你提示的人；</li><li>不要任由别人把提示植入你的周遭环境；</li><li>避免使用那些会带给你提示的社交媒体App。</li></ul></li><li>忽略提示<ul><li>依赖于自身的意志力</li></ul></li></ul></li><li><p>重新设计能力以终止习惯</p><ul><li>回顾下能力链的5个环节嘛：时间、资金、体力、脑力和日程，我们现在要做的就是打破这个链条，让习惯难以养成！</li><li>增加所需时间</li><li>增加所需要的资金——如何让习惯的成本更高？<ul><li>当设计改变的对象是人，大家就不陌生了。简单的例子：如果想让孩子少玩游戏，那可以向他们收取5美元的游戏费，GET！</li></ul></li><li>增强所需的体力</li><li>增加所需脑力</li><li>让习惯跟重要日程发生冲突</li></ul></li><li><p>调整动机以终止习惯</p><ul><li>削弱动机</li><li>增加去激励因素（不太建议使用）</li></ul></li><li><p>从改变一点点开始</p><ul><li>为终止习惯设定更短的时间周期（如戒烟3天，而不是永久戒烟）；</li><li>缩短不想要习惯的时长（如看电视30分钟，而不是4小时）；</li><li>减少不想要习惯的次数（如每天查看1次社交媒体App，而不是10次）；</li><li>降低不想要习惯的强度（如放缓饮酒速度，而不是减少杯数）。</li></ul></li></ul><h4 id="阶段三，致力于用新习惯代替旧习惯">阶段三，致力于用新习惯代替旧习惯</h4><ul><li><p>替换具体的习惯</p></li><li><p>重新映射提示以替换习惯</p></li><li><p><strong>排除障碍指南：如果你会忘记执行新习惯，那么你可以反复演练几次替换和庆祝的过程，在脑海中想象也可以，以强化旧提示和新习惯之间的联结。</strong></p></li><li><p>同时调整能力和动机以替换习惯</p><ul><li><p>执行新习惯的四个选择</p><img src="https://s2.loli.net/2024/06/25/DFHcWjsZ3VNqmdp.webp" alt="image-20240625150948336" style="zoom:50%;" /></li></ul></li><li><p>重要的是找到替代坏习惯的新习惯</p></li></ul><h3 id="一次只解一个结，关键是不断继续">一次只解一个结，关键是不断继续</h3><ul><li><p>在处理疏忽型或规避型习惯问题（迟到、拖延）时，你要做的是让行为发生，而不是让行为停止。</p></li><li><p>让不想要的习惯变得更加消耗体力。并且，你将能识别容易养成坏习惯的场景并学会避开它们。</p></li></ul><h3 id="从小改变中看到颠覆的美">从小改变中看到颠覆的美</h3><ul><li>摆脱坏习惯之后省下来的时间，可以用来做你喜欢的事，也可以用来提升工作效率，还可以用来加深人际关系，或是拓展一个新身份。具体如何做，一部分取决于你自己的选择，一部分则取决于你身边的人。</li></ul><h3 id="小结：">小结：</h3><ul><li>行为设计不只是为了减肥或是在晚餐时放下手机，<strong>它是为了创造改变，以及向着成就更好的自我的方向持续探索。</strong></li></ul><h2 id="群体行为设计，帮助其他人感受成功">群体行为设计，帮助其他人感受成功</h2><blockquote><p>行为设计不是孤独的修行。我们设计的每一个习惯、庆祝的每一个微小成功、做出的每一个改变，都超越了个人的生活。</p></blockquote><ul><li>本章用了相当一部分篇幅，来写迈克和克里斯这对父子的生活，是如何通过清理咖啡机这件小事来缓和父子关系和家庭关系。</li></ul><h3 id="改变他人必须坚持两项原则">改变他人必须坚持两项原则</h3><ul><li><p>在改变群体行为方面，主要有3种方法：</p><ul><li>设计改变自身行为，从而让自己远离群体的负面影响；</li><li>与其他人一起设计改变你们的集体行为；</li><li>为他人设计一个对他们有利的改变</li></ul></li><li><p>精心且高效地设计你的未来，才能让生活的方方面面都变得更好。</p></li><li><p>福格原则1，<strong>帮助人们做他们已经想做的事；</strong></p></li><li><p>福格原则2，<strong>帮助人们感受成功。</strong></p></li></ul><h3 id="引导群体行为的两种身份">引导群体行为的两种身份</h3><h4 id="明确自己在群体中的身份">明确自己在群体中的身份</h4><ul><li><p><strong>头目</strong>：你需要分享自己所学到的微习惯策略和行为设计方面的知识，积极发挥带头作用，以帮助群体做出改变。</p></li><li><p><strong>忍者</strong>：你需要以一种巧妙的方式将行为设计融入生活或工作中，而你的家人或团队甚至都没有发觉你正在进行行为设计。</p></li><li><p><strong>行为设计的步骤</strong>(个人or群体都应该遵循)</p><p><img src="https://s2.loli.net/2024/06/25/GNL6RXtI1h4oc3Q.webp" alt="image-20240625134255352"></p></li></ul>]]></content>
    
    
    <summary type="html">微习惯的重要性！</summary>
    
    
    
    <category term="读书笔记" scheme="https://blog.xing-ye.top/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="读书" scheme="https://blog.xing-ye.top/tags/%E8%AF%BB%E4%B9%A6/"/>
    
    <category term="福格行为模型" scheme="https://blog.xing-ye.top/tags/%E7%A6%8F%E6%A0%BC%E8%A1%8C%E4%B8%BA%E6%A8%A1%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>RuoYi-Vue</title>
    <link href="https://blog.xing-ye.top/posts/c9b9af20/"/>
    <id>https://blog.xing-ye.top/posts/c9b9af20/</id>
    <published>2024-06-01T16:00:00.000Z</published>
    <updated>2024-06-28T04:18:05.060Z</updated>
    
    <content type="html"><![CDATA[<h1 id="介绍">介绍</h1><blockquote><p>很早就听说过若依的强大，今天特地上手简单跑了一下，确实方便且少错</p></blockquote><ul><li>若依系统有很多个版本，那本文是前后端分离版本（RuoYi-Vue）</li></ul><table><thead><tr><th style="text-align:left">版本</th><th style="text-align:left">gitee地址</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">前后端不分离版本</td><td style="text-align:left"><a href="https://gitee.com/y_project/RuoYi">https://gitee.com/y_project/RuoYi</a></td><td style="text-align:left">应该是第一版若依系统，star数量最多，但是前端界面比较丑</td></tr><tr><td style="text-align:left">前后端分离版本</td><td style="text-align:left"><a href="https://gitee.com/y_project/RuoYi-Vue">https://gitee.com/y_project/RuoYi-Vue</a></td><td style="text-align:left">该版本前后端分离，而且前端使用Vue重写了，后端权限部分使用了spring seurity+jwt实现，和原来的前后端不分离版本似乎有所不同</td></tr><tr><td style="text-align:left">微服务版本</td><td style="text-align:left"><a href="https://gitee.com/y_project/RuoYi-Cloud">https://gitee.com/y_project/RuoYi-Cloud</a></td><td style="text-align:left">相对于前后端分离版本，微服务版本将模块拆分的更细，并且单独作为一个服务对外暴露，通过服务发现相互调用</td></tr></tbody></table><h2 id="RuoYi-Vue">RuoYi-Vue</h2><blockquote><p>以下内容来自RuoYi官方文档，（可直接看环境部署部分内容）</p></blockquote><ul><li><p>基于SpringBoot、Spring Security、Jwt、Vue的<code>前后端分离</code>的后台管理系统</p></li><li><p><strong>RuoYi-Vue</strong> 是一个 Java EE 企业级快速开发平台，基于经典技术组合（Spring Boot、Spring Security、MyBatis、Jwt、Vue），内置模块如：部门管理、角色用户、菜单及按钮授权、数据权限、系统参数、日志管理、代码生成等。在线定时任务配置；支持集群，支持多数据源，支持分布式事务。</p></li><li><p>RuoYi 官网地址：<a href="http://ruoyi.vip/">http://ruoyi.vip(opens new window)</a></p></li><li><p>RuoYi 在线文档：<a href="http://doc.ruoyi.vip/">http://doc.ruoyi.vip(opens new window)</a></p></li><li><p>RuoYi 源码下载：<a href="https://gitee.com/y_project/RuoYi-Vue">https://gitee.com/y_project/RuoYi-Vue(opens new window)</a></p></li><li><p>RuoYi 在线提问：<a href="https://gitee.com/y_project/RuoYi-Vue/issues">https://gitee.com/y_project/RuoYi-Vue/issues(opens new window)</a></p></li><li><p>RuoYi 博客：<a href="https://www.oschina.net/p/ruoyi">https://www.oschina.net/p/ruoyi</a></p></li></ul><h1 id="环境部署">环境部署</h1><h2 id="环境准备">环境准备</h2><blockquote><p>我使用的是Windows系统+IDEA（其他系统请自行前往官方文档查阅）</p><p>阅读本文需要一些Java基础，我有些部分不会写的很详细，但都能包括到。</p></blockquote><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">JDK &gt;= 1.8 (推荐1.8版本)</span><br><span class="line">Mysql &gt;= 5.7.0 (推荐5.7版本)</span><br><span class="line">Redis &gt;= 3.0</span><br><span class="line">Maven &gt;= 3.0</span><br><span class="line">Node &gt;= 12</span><br></pre></td></tr></table></figure><h2 id="运行系统">运行系统</h2><h3 id="官方样式">官方样式</h3><ul><li>前往<code>Gitee</code>(<a href="https://gitee.com/y_project/RuoYi-Vue">https://gitee.com/y_project/RuoYi-Vue (opens new window)</a>)下载解压到工作目录/Git拉取</li></ul><h3 id="自定义样式">自定义样式</h3><ul><li><p>官网拉下来的代码的包名（包结构）一眼就看出来是RuoYi的框架，那我们可以选择自定义工程。（千万不要在官方代码上直接改包名等，依赖什么的会冲突！！！）</p></li><li><p>前往<a href="%5BRuoYi%5D(https://doc.ruoyi.vip/)">官方文档</a>右上角有个生态系统，点击RuoYi-Vue项目扩展，里面有很多扩展，拉到最下面（<a href="https://gitee.com/yinm/fastbuild-factory">若依框架包名修改器</a>）</p></li><li><p>在线编辑地址：<a href="http://fastbuild.run/">Fastbuild Factory 快速项目搭建平台|快搭科技</a></p></li><li><p>推荐使用在线编辑，方便直观，项目配置什么的DIY就好</p></li></ul><p><img src="https://s2.loli.net/2024/06/02/YynWiBa2Sx5jc7u.webp" alt="image-20240602154343246"></p><ul><li>源码预览确定包名/包结构之类的是自己想做的项目，之后点击下载源码-&gt;解压源码</li></ul><h3 id="后端运行">后端运行</h3><ol><li>将项目导入到<code>IDEA</code>，然后配置 <code>Maven</code></li></ol><p><img src="https://s2.loli.net/2024/06/02/pGEFWnvhCsRV4aS.webp" alt="image-20240602155548218"></p><ol start="2"><li>创建数据库<code>ry-book</code>并导入数据脚本<code>ry_2021xxxx.sql</code>，<code>quartz.sql</code>（必须要导入！),刷新数据库后得到这些表</li></ol><p><img src="https://s2.loli.net/2024/06/02/MVfK9uBEAdoTyn5.webp" alt="image-20240602161751388"></p><ol start="3"><li>修改配置文件：Book-amdin下的<code>application</code>、<code>application-druid.yml</code>里面的内容</li></ol><ul><li><p>配置自己的服务器、Redis信息（端口、数据库名、密码……）</p></li><li><p>配置自己的MySQL信息（端口、数据库名、密码……）</p></li><li><p>服务器上部署的要注意开放端口、防火墙之类的</p></li><li><p>启用MySQL、Redis</p></li></ul><ol start="4"><li>打开项目运行<code>com.xingye.BookApplication.java</code></li></ol><ul><li>控制台报错（由于我们是自定义的工程，mybaits没扫到包）</li></ul><p><img src="https://s2.loli.net/2024/06/02/ZzlM4xyG78Ldip9.webp" alt="image-20240602163032376"></p><ul><li>解决</li></ul><p><img src="https://s2.loli.net/2024/06/02/lAeupmdjJ8anxLK.webp" alt="image-20240602163352758"></p><p><img src="https://s2.loli.net/2024/06/02/hMD48AP5CilpJW3.webp" alt="image-20240602163951382"></p><ol start="5"><li>运行<code>com.xingye.BookApplication.java</code>，出现如下表示启动成功。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(♥◠‿◠)ﾉﾞ  电子图书管理系统启动成功   ლ(´ڡ`ლ)ﾞ  </span><br><span class="line"> .-------.       ____     __        </span><br><span class="line"> |  _ _   \      \   \   /  /    </span><br><span class="line"> | ( <span class="string">&#x27; )  |       \  _. /  &#x27;</span>       </span><br><span class="line"> |(_ o _) /        _( )_ .<span class="string">&#x27;         </span></span><br><span class="line"><span class="string"> | (_,_).&#x27;</span> __  ___(_ o _)<span class="string">&#x27;          </span></span><br><span class="line"><span class="string"> |  |\ \  |  ||   |(_,_)&#x27;</span>         </span><br><span class="line"> |  | \ `<span class="string">&#x27;   /|   `-&#x27;</span>  /           </span><br><span class="line"> |  |  \    /  \      /           </span><br><span class="line"> <span class="string">&#x27;&#x27;</span>-<span class="string">&#x27;   `&#x27;</span>-<span class="string">&#x27;    `-..-&#x27;</span>       </span><br></pre></td></tr></table></figure><ol start="6"><li>访问<a href="http://localhost:8080/">localhost:8080</a>，出现如下表示后端搭建成功</li></ol><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">欢迎使用Book后台管理框架，当前版本：v3.8.7，请通过前端地址访问。</span><br></pre></td></tr></table></figure><h3 id="前端运行">前端运行</h3><ol><li>官网自行下载node.js-&gt;配置环境变量-&gt;检查是否安装成功（npm -version）</li><li>进入前端项目目录，执行以下代码(前后端分离，前端推荐使用Vs Code)</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入项目目录</span></span><br><span class="line"><span class="built_in">cd</span> ruoyi-ui</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">npm install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 本地开发 启动项目</span></span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure><ol start="3"><li>打开浏览器，输入：(<a href="http://localhost/">http://localhost:80</a>) 默认账户/密码 <code>admin/admin123</code>）</li><li>若能正确展示登录页面，并能成功登录，菜单及页面展示正常，则表明环境搭建成功</li></ol><p><img src="https://s2.loli.net/2024/06/02/8lr7cEpTIVogqft.webp" alt="image-20240602165008255"></p><div class="note info modern"><p>因为本项目是前后端完全分离的，所以需要前后端都单独启动好，才能进行访问。</p></div><h1 id="Demo">Demo</h1><ul><li><p>那我们用若依就是要DIY自己想要的一些功能、界面对叭，这里就展示一个小demo。</p></li><li><p>首先我们去数据库中建一张书本表（无库不coding嘛）</p><p><img src="https://s2.loli.net/2024/06/02/GThF8yfwrDt9eZY.webp" alt="image-20240602181356031"></p></li><li><p>建完表后，我们到前端页面中，找到系统工具-&gt;代码生成-&gt;导入，导入我们刚刚建好的表</p><p><img src="https://s2.loli.net/2024/06/02/X7kEbnS5HhOaFQo.webp" alt="image-20240602181742275"></p></li><li><p>点击确定后，可以编辑代码的生成配置</p><p><img src="https://s2.loli.net/2024/06/02/jMwnkvzW2FV7IDg.webp" alt="image-20240602181938015"></p><p><img src="https://s2.loli.net/2024/06/02/usIx7X6yBUQcGLM.webp" alt="image-20240602182607784"></p></li><li><p>配置好后，生成代码，解压代码，将生成的代码放到对应的文件目录下</p><ul><li><p>domian  mapper  service  放到<code>com.xingye.system</code></p></li><li><p>controller  放到<code> com.xingye.web.controller</code></p></li><li><p>vue文件中的前端代码放到各自对应的目录即可（这里就不贴图了）</p></li><li><p>最后运行b-bookMenu.sql文件（别忘记）</p></li></ul></li><li><p>前后端运行得到如图，可以完成CRUD功能</p></li></ul><p><img src="https://s2.loli.net/2024/06/02/KRWyIkNbEmf5U1w.webp" alt="image-20240602200134819"></p><blockquote><p>代码生成器是个好工具，用好了能提高CRUD效率</p><p>附上：<a href="https://doc.ruoyi.vip/ruoyi/document/htsc.html#%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90">代码生成的手册</a></p></blockquote><ul><li>前端部分的一些内容是随自己的一些心意去搞的，这里就不展开说了</li></ul><h1 id="Ending">Ending</h1><ul><li><p>本文就是简单的讲了一下，RuoYi-Vue这个前后端分离框架如何快速搭建运行</p></li><li><p>以及演示了一个小demo，如何利用若依的工具上手实现一些功能</p></li><li><p>若依本身还有很多本文没有讲到的强大的功能（权限控制等等）</p></li><li><p>那这边请大家建议参考官方的<a href="https://doc.ruoyi.vip/ruoyi-vue/">使用手册</a>以及我找资料看到一个大佬的[专题: Ruoyi Vue](<a href="https://blog.kdyzm.cn/topic/Ruoyi">https://blog.kdyzm.cn/topic/Ruoyi</a> Vue/)</p></li></ul>]]></content>
    
    
    <summary type="html">RuoYi-Vue快速上手</summary>
    
    
    
    <category term="学习笔记" scheme="https://blog.xing-ye.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="RuoYi" scheme="https://blog.xing-ye.top/tags/RuoYi/"/>
    
    <category term="框架" scheme="https://blog.xing-ye.top/tags/%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>月度随笔|2024-05</title>
    <link href="https://blog.xing-ye.top/posts/8962bc2d/"/>
    <id>https://blog.xing-ye.top/posts/8962bc2d/</id>
    <published>2024-05-26T16:00:00.000Z</published>
    <updated>2024-06-23T10:36:52.316Z</updated>
    
    <content type="html"><![CDATA[<h1 id="五月随笔">五月随笔</h1><ul><li><p>这篇随笔严格意义上来说是我的第一篇随笔 。（想到哪儿就写到哪儿了，措辞有问题的地方望海涵）</p></li><li><p>一转眼又来到月末了，时间真的过得好快呀！</p></li></ul><h1 id="5月都干了些什么">5月都干了些什么</h1><h2 id="跑步！跑步！还是跑步！">跑步！跑步！还是跑步！</h2><ul><li><p>其实从上大学开始就断断续续有在跑，为什么是断断续续呢（原因懂得都懂&gt;猪瘾犯了哈哈）</p><p>但这次为什么跑的那么持久！且听我慢慢道来～</p></li><li><p>我下铺总说我胖，总是rua我（其实他比我胖只是不承认罢了），我自己看了看确实肚子上有些肉肉，于是某个晚上我就随口说咱要不明天早晨去跑步叭！他不知道哪个经抽了还答应了，从明早八点出发喊到明早六点出发（跟小孩一样），<span class='p blue'>结果我们真的起来了！</span></p></li><li><p>之后就一发不可收拾，早晨没早八就去跑，要不就抽时间下午or晚上去跑，之后没课就去学习(●v●)，后来又加入了一个小伙伴，他还带我们拉单杠，现在我也能直挺做一个了！</p></li><li><p>锻炼第一天，我说咱要是一直坚持下去，我都不敢想象我们将有多成功！<br>是呀，<span class='p blue'>坚持！坚持！坚持！</span></p></li><li><p>只要坚持，总会有收获。慢一点，也没关系的。</p></li></ul><h2 id="写算法题，背八股！">写算法题，背八股！</h2><ul><li>跟着代码随想录写了小半个月的算法，感觉自己确实有些进步，但时间一长前面的知识点还是会忘。还是要多刷，坚持刷！</li><li>八股最近一周没怎么背了，博客弄得也差不多了，也该把八股捡起来多背背了，赶紧为秋招做些准备！</li></ul><h2 id="捣鼓捣鼓博客～">捣鼓捣鼓博客～</h2><ul><li>看看小站建站日志就知道五月更新的有多勤快了哈哈，确实有一部分精力分给了它，但我觉得还是很值得的。<br>从第一次看到<a href="https://www.fomal.cc/">Fomalhaut佬</a>的个人博客，人家博客内容好充实界面又好看，想着自己也搞一个，之后学会了魔改（在这条路越走越远了hh～，在这儿也感谢各位佬的技术供我参考）。</li><li>在小站建站50天的时候，我申请了一个域名<code>xing-ye.top</code>，从这个时候它也算个真正的小站了(๑•̀ω•́๑)。</li></ul><h2 id="B站收藏夹…">B站收藏夹…</h2><ul><li>前段时间刷B站，突然想看看自己的收藏，点进去一看算上默认收藏夹居然都有三四百个视频了（自己有分类收藏的习惯），心里一想之前看到好东西，就想着放到收藏夹里，现在真是印证了那句话：<u>到我的收藏夹里吃灰去吧。</u></li><li>于是，我开始整理，重新翻看那些稿件，挑出来真正对我还有意义的稿件。（现在就是在边听音乐收藏夹里的歌，边写这篇随笔）</li></ul><h2 id="最后的最后">最后的最后</h2><ul><li>没这个博客前，我可能不太会去总结、去思考这一个月都干了些什么。</li><li>其实<emp>人是要多去思考的</emp>，在这个信息洪流的时代，人们被抖音等各种短视频冲击着，总是被动地接受来自各种方面的信息（我自己也是其中一个），所以我要开始慢慢地学会主动去接触信息，并将其转化成自己的一套逻辑体系。</li><li>最近也在抽时间读《福格行为模型》，下个月应该会整理出一些观点，然后更一篇博客出来！</li><li>写完这些已经是27号晚上11:15，明天没早八但要早起去吃早餐，晚安(。-ω-)zzz</li></ul>]]></content>
    
    
    <summary type="html">记录24年5月的碎碎念</summary>
    
    
    
    <category term="随笔" scheme="https://blog.xing-ye.top/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="随笔" scheme="https://blog.xing-ye.top/tags/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="思考" scheme="https://blog.xing-ye.top/tags/%E6%80%9D%E8%80%83/"/>
    
  </entry>
  
  <entry>
    <title>MySQL经典练习50题(下)</title>
    <link href="https://blog.xing-ye.top/posts/ab4d3de8/"/>
    <id>https://blog.xing-ye.top/posts/ab4d3de8/</id>
    <published>2024-05-19T16:00:00.000Z</published>
    <updated>2024-06-03T08:50:01.544Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://blog.xing-ye.top/posts/b2560ca9/">书接上回（1-25）</a></p></blockquote><h1 id="经典50题（26-50）">经典50题（26-50）</h1><h2 id="查询每门课被选修的学生数">查询每门课被选修的学生数</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> c.c_name,<span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> sc.s_id) <span class="keyword">AS</span> s_num</span><br><span class="line"><span class="keyword">FROM</span> Score sc </span><br><span class="line"><span class="keyword">JOIN</span> Course c <span class="keyword">ON</span> sc.c_id<span class="operator">=</span>c.c_id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> c.c_name</span><br></pre></td></tr></table></figure><blockquote><p>成绩表按科目对s_id计数</p></blockquote><h2 id="查询出只有两门课程的全部学生的学号和姓名">查询出只有两门课程的全部学生的学号和姓名</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s.s_id,s.s_name</span><br><span class="line"><span class="keyword">FROM</span> Score sc</span><br><span class="line"><span class="keyword">JOIN</span> Student s <span class="keyword">ON</span> sc.s_id<span class="operator">=</span>s.s_id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> s.s_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> sc.c_id)<span class="operator">=</span><span class="number">2</span></span><br></pre></td></tr></table></figure><blockquote><p>成绩表按学生对c_id计数</p></blockquote><h2 id="查询男女生人数">查询男女生人数</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s_sex,<span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> s_id) <span class="keyword">AS</span> <span class="string">&#x27;人数&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> s_sex</span><br></pre></td></tr></table></figure><h2 id="查询名字中含有-风-字的学生信息">查询名字中含有 风 字的学生信息</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> s_name <span class="keyword">LIKE</span> <span class="string">&#x27;%风%&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="查询同名同性的学生名单，并统计同名人数">查询同名同性的学生名单，并统计同名人数</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>   s.s_name,  s.s_sex,  <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> same_name_sex_count</span><br><span class="line"><span class="keyword">FROM</span>   Student <span class="keyword">AS</span> s</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span>   s.s_name,   s.s_sex</span><br><span class="line"><span class="keyword">HAVING</span>   <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="operator">&gt;</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span>   s.s_name,   same_name_sex_count <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><blockquote><ol><li><code>GROUP BY s.s_name, s.s_sex</code>：根据学生的姓名和性别进行分组，这样具有相同姓名和性别的学生会被分为一组。</li><li><code>HAVING COUNT(*) &gt; 1</code>：<code>HAVING</code> 子句用于筛选分组后的结果。这里它用来找出那些出现次数大于1的组，即同名同性的学生。</li></ol></blockquote><h2 id="查询-1990-年出生的学生信息">查询 1990 年出生的学生信息</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">YEAR</span>(<span class="type">DATE</span>(s_birth))<span class="operator">=</span><span class="number">1990</span></span><br></pre></td></tr></table></figure><blockquote><p>DATE() 可以将varchar转成日期型<br>YEAR() 函数返回一个指定日期or时间的年份值，范围为1000到9999，如果日期为零，YEAR()函数返回0</p></blockquote><h2 id="查询每门课程的平均成绩，结果按平均成绩降序排列-平均成绩相同时，按课程编号-c-id-升序排列">查询每门课程的平均成绩，结果按平均成绩降序排列;平均成绩相同时，按课程编号 c_id 升序排列</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> c.c_name,ROUND(<span class="built_in">AVG</span>(sc.s_score),<span class="number">2</span>) <span class="keyword">AS</span> <span class="string">&#x27;平均分&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span> Score sc </span><br><span class="line"><span class="keyword">JOIN</span> Course c <span class="keyword">ON</span> sc.c_id<span class="operator">=</span>c.c_id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> c.c_id</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="built_in">AVG</span>(sc.s_score) <span class="keyword">DESC</span>,c.c_id <span class="keyword">ASC</span></span><br></pre></td></tr></table></figure><h2 id="查询平均成绩大于等于-85-的所有学生的学号、姓名和平均成绩">查询平均成绩大于等于 85 的所有学生的学号、姓名和平均成绩</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s.s_id,s.s_name,ROUND(<span class="built_in">AVG</span>(sc.s_score),<span class="number">2</span>) <span class="keyword">AS</span> <span class="string">&#x27;平均成绩&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span> Score sc </span><br><span class="line"><span class="keyword">JOIN</span> Student s <span class="keyword">ON</span> sc.s_id<span class="operator">=</span>s.s_id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> s.s_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">AVG</span>(sc.s_score)<span class="operator">&gt;=</span><span class="number">85</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="built_in">AVG</span>(sc.s_score) <span class="keyword">DESC</span></span><br></pre></td></tr></table></figure><h2 id="查询课程名称为数学，且分数低于-60-的学生姓名和分数">查询课程名称为数学，且分数低于 60 的学生姓名和分数</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s.s_name,sc.s_score</span><br><span class="line"><span class="keyword">FROM</span> Score sc </span><br><span class="line"><span class="keyword">JOIN</span> Student s <span class="keyword">ON</span> sc.s_id<span class="operator">=</span>s.s_id</span><br><span class="line"><span class="keyword">WHERE</span> c_id<span class="operator">=</span>(<span class="keyword">SELECT</span> c_id <span class="keyword">FROM</span> Course <span class="keyword">WHERE</span> c_name<span class="operator">=</span><span class="string">&#x27;数学&#x27;</span>)</span><br><span class="line"><span class="keyword">AND</span> s_score<span class="operator">&lt;</span><span class="number">60</span></span><br><span class="line">##这题连接三张表也可以</span><br></pre></td></tr></table></figure><h2 id="查询所有学生的课程及分数情况"><em><strong>查询所有学生的课程及分数情况</strong></em></h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  s.s_name,</span><br><span class="line">  <span class="built_in">SUM</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> c.c_name <span class="operator">=</span> <span class="string">&#x27;语文&#x27;</span> <span class="keyword">THEN</span> sc.s_score <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>) <span class="keyword">AS</span> 语文,</span><br><span class="line">  <span class="built_in">SUM</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> c.c_name <span class="operator">=</span> <span class="string">&#x27;数学&#x27;</span> <span class="keyword">THEN</span> sc.s_score <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>) <span class="keyword">AS</span> 数学,</span><br><span class="line">  <span class="built_in">SUM</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> c.c_name <span class="operator">=</span> <span class="string">&#x27;英语&#x27;</span> <span class="keyword">THEN</span> sc.s_score <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>) <span class="keyword">AS</span> 英语,</span><br><span class="line">  <span class="built_in">SUM</span>(sc.s_score) <span class="keyword">AS</span> 总分</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  Student s</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> </span><br><span class="line">  Score sc <span class="keyword">ON</span> s.s_id <span class="operator">=</span> sc.s_id</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> </span><br><span class="line">  Course c <span class="keyword">ON</span> sc.c_id <span class="operator">=</span> c.c_id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> </span><br><span class="line">  s.s_name, s.s_id; <span class="comment">-- 增加 s.s_id 以确保正确分组</span></span><br></pre></td></tr></table></figure><h2 id="查询任何一门课程成绩在-70-分以上的姓名、课程名称和分数">查询任何一门课程成绩在 70 分以上的姓名、课程名称和分数</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s.s_name,c.c_name,sc.s_score</span><br><span class="line"><span class="keyword">FROM</span> Score sc</span><br><span class="line"><span class="keyword">JOIN</span> Student s <span class="keyword">ON</span> sc.s_id<span class="operator">=</span>s.s_id</span><br><span class="line"><span class="keyword">JOIN</span> Course c <span class="keyword">ON</span> sc.s_id<span class="operator">=</span>c.c_id</span><br><span class="line"><span class="keyword">WHERE</span> s_score<span class="operator">&gt;</span><span class="number">70</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="查询不及格的课程">查询不及格的课程</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sc.c_id,c.c_name,sc.s_score</span><br><span class="line"><span class="keyword">FROM</span> Score sc </span><br><span class="line"><span class="keyword">JOIN</span> Course c <span class="keyword">ON</span> sc.c_id<span class="operator">=</span>c.c_id</span><br><span class="line"><span class="keyword">WHERE</span> sc.s_score<span class="operator">&lt;</span><span class="number">60</span></span><br></pre></td></tr></table></figure><h2 id="查询课程编号为-01-且课程成绩大于等于-80-的学生的学号和姓名">查询课程编号为 01 且课程成绩大于等于 80 的学生的学号和姓名</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s.s_id,s.s_name</span><br><span class="line"><span class="keyword">FROM</span> Score sc </span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> Student s <span class="keyword">ON</span> sc.s_id<span class="operator">=</span>s.s_id</span><br><span class="line"><span class="keyword">WHERE</span> c_id<span class="operator">=</span><span class="string">&#x27;01&#x27;</span></span><br><span class="line"><span class="keyword">AND</span> s_score<span class="operator">&gt;=</span><span class="number">80</span></span><br></pre></td></tr></table></figure><h2 id="每门课程的学生人数">每门课程的学生人数</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> c.c_name,<span class="built_in">count</span>(<span class="keyword">DISTINCT</span> sc.s_id) <span class="keyword">AS</span> <span class="string">&#x27;人数&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span> Score sc</span><br><span class="line"><span class="keyword">JOIN</span> Course c <span class="keyword">ON</span> sc.c_id<span class="operator">=</span>c.c_id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> c.c_name</span><br></pre></td></tr></table></figure><h2 id="查询选修“张三”老师所授课程的学生中，成绩最高的学生信息及其成绩">查询选修“张三”老师所授课程的学生中，成绩最高的学生信息及其成绩</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>   s.<span class="operator">*</span>,  <span class="built_in">MAX</span>(sc.s_score) <span class="keyword">AS</span> 最高成绩</span><br><span class="line"><span class="keyword">FROM</span>   Student <span class="keyword">AS</span> s</span><br><span class="line"><span class="keyword">JOIN</span>   Score <span class="keyword">AS</span> sc <span class="keyword">ON</span> s.s_id <span class="operator">=</span> sc.s_id</span><br><span class="line"><span class="keyword">JOIN</span>   Course <span class="keyword">AS</span> c <span class="keyword">ON</span> sc.c_id <span class="operator">=</span> c.c_id</span><br><span class="line"><span class="keyword">JOIN</span>   Teacher <span class="keyword">AS</span> t <span class="keyword">ON</span> c.t_id <span class="operator">=</span> t.t_id</span><br><span class="line"><span class="keyword">WHERE</span>   t.t_name <span class="operator">=</span> <span class="string">&#x27;张三&#x27;</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span>   s.s_id,   s.s_name <span class="comment">-- 避免同名</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span>   最高成绩 <span class="keyword">DESC</span></span><br><span class="line">LIMIT <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h2 id="查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩"><em>查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩</em></h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sc1.s_id,sc1.c_id,sc1.s_score</span><br><span class="line"><span class="keyword">FROM</span> Score <span class="keyword">AS</span> sc1</span><br><span class="line"><span class="keyword">JOIN</span> Score <span class="keyword">AS</span> sc2 <span class="keyword">ON</span> sc1.s_score <span class="operator">=</span> sc2.s_score  <span class="keyword">AND</span> sc1.c_id <span class="operator">&lt;&gt;</span> sc2.c_id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> sc1.s_id, sc1.c_id, sc1.s_score</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> sc2.c_id) <span class="operator">&gt;</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><blockquote><ol><li>将成绩表自身进行连接（自连接），连接条件是两个不同的成绩记录具有相同的分数，但课程编号不同。</li><li><code>HAVING</code> 子句用于筛选分组后的结果，这里它用来找出那些在多个不同课程中具有相同成绩的学生记录。</li></ol></blockquote><h2 id="查询每门功课成绩最好的前两名">查询每门功课成绩最好的前两名</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> r.<span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span>(</span><br><span class="line"><span class="keyword">SELECT</span> c_name,s_name,s_score,</span><br><span class="line"><span class="built_in">ROW_NUMBER</span>()<span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> c_name <span class="keyword">ORDER</span> <span class="keyword">BY</span> s_score <span class="keyword">DESC</span>) <span class="keyword">as</span> rank_num</span><br><span class="line"><span class="keyword">FROM</span> Score sc </span><br><span class="line"><span class="keyword">JOIN</span> Course c <span class="keyword">ON</span> sc.c_id<span class="operator">=</span>c.c_id</span><br><span class="line"><span class="keyword">JOIN</span> student s <span class="keyword">ON</span> sc.s_id<span class="operator">=</span>s.s_id)  r</span><br><span class="line"><span class="keyword">WHERE</span> r.rank_num<span class="operator">&lt;=</span><span class="number">2</span></span><br></pre></td></tr></table></figure><blockquote><p>窗口函数 <code>ROW_NUMBER()</code> 为每个课程 (<code>PARTITION BY c_name</code>) 的成绩分配一个唯一的序号，按分数降序排列 (<code>ORDER BY s_score DESC</code>)。</p><p>通过相应的 ID 关联这三个表，以获取完整的课程和学生信息以及他们的分数。</p><p>最后通过where筛选出每门课程成绩排名前两名的学生。</p></blockquote><h2 id="统计每门课程的学生选修人数-超过-5-人的课程才统计-。要求输出课程号和选修人数，查询结果按人数降序排列，-若人数相同，按课程号升序排列">统计每门课程的学生选修人数(超过 5 人的课程才统计)。要求输出课程号和选修人数，查询结果按人数降序排列， 若人数相同，按课程号升序排列</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> c_id,<span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> s_id) <span class="keyword">AS</span> NUMS</span><br><span class="line"><span class="keyword">FROM</span> Score</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> c_id</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> NUMS <span class="keyword">DESC</span>,c_id <span class="keyword">ASC</span></span><br></pre></td></tr></table></figure><h2 id="检索至少选修两门课程的学生学号">检索至少选修两门课程的学生学号</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s_id</span><br><span class="line"><span class="keyword">FROM</span> Score</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> s_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> c_id)<span class="operator">&gt;=</span><span class="number">2</span>S</span><br></pre></td></tr></table></figure><h2 id="查询选修了全部课程的学生信息">查询选修了全部课程的学生信息</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s.<span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> student s</span><br><span class="line"><span class="keyword">JOIN</span> score sc <span class="keyword">ON</span> s.s_id <span class="operator">=</span> sc.s_id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> s.s_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> c_id)<span class="operator">=</span>(<span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>)<span class="keyword">FROM</span> course)</span><br></pre></td></tr></table></figure><h2 id="查询各学生的年龄-按照出生日期来算，当前月日-出生年月的月日则，年龄减-1">查询各学生的年龄:按照出生日期来算，当前月日 &lt; 出生年月的月日则，年龄减 1</h2> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s.<span class="operator">*</span>,</span><br><span class="line"><span class="keyword">CASE</span> </span><br><span class="line"><span class="keyword">WHEN</span> <span class="keyword">MONTH</span>(NOW())<span class="operator">&lt;</span><span class="keyword">MONTH</span>(<span class="type">DATE</span>(s_birth)) <span class="keyword">THEN</span></span><br><span class="line"><span class="keyword">YEAR</span>(NOW())<span class="operator">-</span><span class="keyword">YEAR</span>(<span class="type">DATE</span>(s_birth))<span class="number">-1</span></span><br><span class="line"><span class="keyword">WHEN</span> <span class="keyword">MONTH</span>(NOW())<span class="operator">=</span><span class="keyword">MONTH</span>(<span class="type">DATE</span>(s_birth)) <span class="keyword">AND</span> <span class="keyword">DAY</span>(NOW())<span class="operator">&lt;</span><span class="keyword">DAY</span>(<span class="type">DATE</span>(s_birth)) <span class="keyword">THEN</span></span><br><span class="line"><span class="keyword">YEAR</span>(NOW())<span class="operator">-</span><span class="keyword">YEAR</span>(<span class="type">DATE</span>(s_birth))<span class="number">-1</span></span><br><span class="line"><span class="keyword">ELSE</span></span><br><span class="line"><span class="keyword">YEAR</span>(NOW())<span class="operator">-</span><span class="keyword">YEAR</span>(<span class="type">DATE</span>(s_birth))</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">AS</span> age</span><br><span class="line"><span class="keyword">FROM</span> Student s</span><br></pre></td></tr></table></figure><h2 id="查询本周过生日的学生">查询本周过生日的学生</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s.<span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> student s</span><br><span class="line"><span class="keyword">WHERE</span> WEEK(<span class="type">DATE</span>(s.s_birth))<span class="operator">=</span>WEEK(NOW())</span><br></pre></td></tr></table></figure><h2 id="查询下周过生日的学生">查询下周过生日的学生</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s.<span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> student s</span><br><span class="line"><span class="keyword">WHERE</span> WEEK(<span class="type">DATE</span>(s.s_birth))<span class="operator">=</span>WEEK(NOW())<span class="operator">+</span><span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="查询本月过生的同学">查询本月过生的同学</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s.<span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> student s</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">MONTH</span>(<span class="type">DATE</span>(s.s_birth))<span class="operator">=</span><span class="keyword">MONTH</span>(NOW())</span><br></pre></td></tr></table></figure><h2 id="查询下月过生日的学生">查询下月过生日的学生</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s.<span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> student s</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">MONTH</span>(<span class="type">DATE</span>(s.s_birth))<span class="operator">=</span><span class="keyword">MONTH</span>(NOW())<span class="operator">+</span><span class="number">1</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">MySQL经典练习50题(下)</summary>
    
    
    
    <category term="学习笔记" scheme="https://blog.xing-ye.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="MySQL" scheme="https://blog.xing-ye.top/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>MySQL经典练习50题(上)</title>
    <link href="https://blog.xing-ye.top/posts/b2560ca9/"/>
    <id>https://blog.xing-ye.top/posts/b2560ca9/</id>
    <published>2024-05-14T16:00:00.000Z</published>
    <updated>2024-05-28T08:47:41.695Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MySQL经典练习50题（上）">MySQL经典练习50题（上）</h2><h3 id="创建数据库和表">创建数据库和表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 建 表</span></span><br><span class="line"><span class="comment">-- 学 生 表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `Student`(</span><br><span class="line">`s_id` <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">`s_name` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">`s_birth` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">`s_sex` <span class="type">VARCHAR</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY(`s_id`)</span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 课程表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `Course`(</span><br><span class="line">`c_id` <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">`c_name` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">`t_id` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY(`c_id`)</span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 教师表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `Teacher`(</span><br><span class="line">`t_id` <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">`t_name` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY(`t_id`)</span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 成绩表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `Score`(</span><br><span class="line">`s_id` <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">`c_id` <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">`s_score` <span class="type">INT</span>(<span class="number">3</span>),</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY(`s_id`,`c_id`)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插 入 学 生 表 测 试 数 据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Student <span class="keyword">values</span>(<span class="string">&#x27;01&#x27;</span> , <span class="string">&#x27;赵雷&#x27;</span>,<span class="string">&#x27;1990-01-01&#x27;</span>,<span class="string">&#x27;男&#x27;</span>); </span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Student <span class="keyword">values</span>(<span class="string">&#x27;02&#x27;</span> , <span class="string">&#x27;钱电&#x27;</span>,<span class="string">&#x27;1990-12-21&#x27;</span>,<span class="string">&#x27;男&#x27;</span>); </span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Student <span class="keyword">values</span>(<span class="string">&#x27;03&#x27;</span> , <span class="string">&#x27;孙风&#x27;</span>,<span class="string">&#x27;1990-05-20&#x27;</span>,<span class="string">&#x27;男&#x27;</span>); </span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Student <span class="keyword">values</span>(<span class="string">&#x27;04&#x27;</span> , <span class="string">&#x27;李云&#x27;</span>,<span class="string">&#x27;1990-08-06&#x27;</span>,<span class="string">&#x27;男&#x27;</span>); </span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Student <span class="keyword">values</span>(<span class="string">&#x27;05&#x27;</span> , <span class="string">&#x27;周梅&#x27;</span>,<span class="string">&#x27;1991-12-01&#x27;</span>,<span class="string">&#x27;女&#x27;</span>); </span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Student <span class="keyword">values</span>(<span class="string">&#x27;06&#x27;</span> , <span class="string">&#x27;吴兰&#x27;</span>,<span class="string">&#x27;1992-03-01&#x27;</span>,<span class="string">&#x27;女&#x27;</span>); </span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Student <span class="keyword">values</span>(<span class="string">&#x27;07&#x27;</span> , <span class="string">&#x27;郑竹&#x27;</span>,<span class="string">&#x27;1989-07-01&#x27;</span>,<span class="string">&#x27;女&#x27;</span>); </span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Student <span class="keyword">values</span>(<span class="string">&#x27;08&#x27;</span> , <span class="string">&#x27;王菊&#x27;</span>,<span class="string">&#x27;1990-01-20&#x27;</span>,<span class="string">&#x27;女&#x27;</span>);</span><br><span class="line"><span class="comment">-- 课 程 表 测 试 数 据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Course <span class="keyword">values</span>(<span class="string">&#x27;01&#x27;</span> , <span class="string">&#x27;语文&#x27;</span> , <span class="string">&#x27;02&#x27;</span>); </span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Course <span class="keyword">values</span>(<span class="string">&#x27;02&#x27;</span> , <span class="string">&#x27;数学&#x27;</span> , <span class="string">&#x27;01&#x27;</span>); </span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Course <span class="keyword">values</span>(<span class="string">&#x27;03&#x27;</span> , <span class="string">&#x27;英语&#x27;</span> , <span class="string">&#x27;03&#x27;</span>);</span><br><span class="line"><span class="comment">-- 教 师 表 测 试 数 据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Teacher <span class="keyword">values</span>(<span class="string">&#x27;01&#x27;</span> , <span class="string">&#x27;张三&#x27;</span>); </span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Teacher <span class="keyword">values</span>(<span class="string">&#x27;02&#x27;</span> , <span class="string">&#x27;李四&#x27;</span>); </span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Teacher <span class="keyword">values</span>(<span class="string">&#x27;03&#x27;</span> , <span class="string">&#x27;王五&#x27;</span>);</span><br><span class="line"><span class="comment">-- 成 绩 表 测 试 数 据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Score <span class="keyword">values</span>(<span class="string">&#x27;01&#x27;</span> , <span class="string">&#x27;01&#x27;</span> , <span class="number">80</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Score <span class="keyword">values</span>(<span class="string">&#x27;01&#x27;</span> , <span class="string">&#x27;02&#x27;</span> , <span class="number">90</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Score <span class="keyword">values</span>(<span class="string">&#x27;01&#x27;</span> , <span class="string">&#x27;03&#x27;</span> , <span class="number">99</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Score <span class="keyword">values</span>(<span class="string">&#x27;02&#x27;</span> , <span class="string">&#x27;01&#x27;</span> , <span class="number">70</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Score <span class="keyword">values</span>(<span class="string">&#x27;02&#x27;</span> , <span class="string">&#x27;02&#x27;</span> , <span class="number">60</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Score <span class="keyword">values</span>(<span class="string">&#x27;02&#x27;</span> , <span class="string">&#x27;03&#x27;</span> , <span class="number">80</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Score <span class="keyword">values</span>(<span class="string">&#x27;03&#x27;</span> , <span class="string">&#x27;01&#x27;</span> , <span class="number">80</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Score <span class="keyword">values</span>(<span class="string">&#x27;03&#x27;</span> , <span class="string">&#x27;02&#x27;</span> , <span class="number">80</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Score <span class="keyword">values</span>(<span class="string">&#x27;03&#x27;</span> , <span class="string">&#x27;03&#x27;</span> , <span class="number">80</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Score <span class="keyword">values</span>(<span class="string">&#x27;04&#x27;</span> , <span class="string">&#x27;01&#x27;</span> , <span class="number">50</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Score <span class="keyword">values</span>(<span class="string">&#x27;04&#x27;</span> , <span class="string">&#x27;02&#x27;</span> , <span class="number">30</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Score <span class="keyword">values</span>(<span class="string">&#x27;04&#x27;</span> , <span class="string">&#x27;03&#x27;</span> , <span class="number">20</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Score <span class="keyword">values</span>(<span class="string">&#x27;05&#x27;</span> , <span class="string">&#x27;01&#x27;</span> , <span class="number">76</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Score <span class="keyword">values</span>(<span class="string">&#x27;05&#x27;</span> , <span class="string">&#x27;02&#x27;</span> , <span class="number">87</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Score <span class="keyword">values</span>(<span class="string">&#x27;06&#x27;</span> , <span class="string">&#x27;01&#x27;</span> , <span class="number">31</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Score <span class="keyword">values</span>(<span class="string">&#x27;06&#x27;</span> , <span class="string">&#x27;03&#x27;</span> , <span class="number">34</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Score <span class="keyword">values</span>(<span class="string">&#x27;07&#x27;</span> , <span class="string">&#x27;02&#x27;</span> , <span class="number">89</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Score <span class="keyword">values</span>(<span class="string">&#x27;07&#x27;</span> , <span class="string">&#x27;03&#x27;</span> , <span class="number">98</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="表关系">表关系</h3><p><img src="https://s2.loli.net/2024/05/17/6tYhu9CSnX2w7PN.png" alt="image-20240517104914070"></p><h3 id="经典50题">经典50题</h3><h4 id="查询-01-课程比-02-课程成绩高的学生的信息及课程分数">查询&quot;01&quot;课程比&quot;02&quot;课程成绩高的学生的信息及课程分数</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> s.<span class="operator">*</span>,sc1.s_score,sc2.s_score</span><br><span class="line"><span class="keyword">from</span> student s </span><br><span class="line"><span class="keyword">join</span> score sc1 <span class="keyword">on</span> s.s_id<span class="operator">=</span>sc1.s_id <span class="keyword">and</span> sc1.c_id<span class="operator">=</span><span class="string">&#x27;01&#x27;</span></span><br><span class="line"><span class="keyword">join</span> score sc2 <span class="keyword">on</span> s.s_id<span class="operator">=</span>sc2.s_id <span class="keyword">and</span> sc2.c_id<span class="operator">=</span><span class="string">&#x27;02&#x27;</span>  </span><br><span class="line"><span class="keyword">where</span> sc1.s_score<span class="operator">&gt;</span>sc2.s_score</span><br></pre></td></tr></table></figure><blockquote><p>需要连接 student 和 score 表，其中 score 表需要连接两次，因为我们需要对比两个课程的成绩。<br>然后，这将返回一个结果集，其中每一行都包含学生的信息，以及他们对应的 “01” 课程和 “02” 课程的成绩。但是，我们仍然需要进一步筛选那些 “01” 课程比 “02” 课程成绩高的学生。为此，我们需要在 WHERE 子句中添加一个条件</p></blockquote><h4 id="查询“01”课程比“02”课程成绩低的学生的信息及课程分数-题目-1-是成绩高">查询“01”课程比“02”课程成绩低的学生的信息及课程分数(题目 1 是成绩高)</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> s.<span class="operator">*</span>,sc1.s_score,sc2.s_score</span><br><span class="line"><span class="keyword">from</span> student s </span><br><span class="line"><span class="keyword">join</span> score sc1 <span class="keyword">on</span> s.s_id<span class="operator">=</span>sc1.s_id <span class="keyword">and</span> sc1.c_id<span class="operator">=</span><span class="string">&#x27;01&#x27;</span></span><br><span class="line"><span class="keyword">join</span> score sc2 <span class="keyword">on</span> s.s_id<span class="operator">=</span>sc2.s_id <span class="keyword">and</span> sc2.c_id<span class="operator">=</span><span class="string">&#x27;02&#x27;</span>  </span><br><span class="line"><span class="keyword">where</span> sc1.s_score<span class="operator">&lt;</span>sc2.s_score</span><br></pre></td></tr></table></figure><blockquote><p>同上</p></blockquote><h4 id="查询平均成绩大于等于-60-分的同学的学生编号和学生姓名和平均成绩">查询平均成绩大于等于 60 分的同学的学生编号和学生姓名和平均成绩</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s.s_id, s.s_name, <span class="built_in">AVG</span>(sc.s_score) <span class="keyword">AS</span> avg_score</span><br><span class="line"><span class="keyword">FROM</span> student s</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> score sc <span class="keyword">ON</span> s.s_id <span class="operator">=</span> sc.s_id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> s.s_id</span><br><span class="line"><span class="keyword">HAVING</span> avg_score <span class="operator">&gt;=</span> <span class="number">60</span>;</span><br></pre></td></tr></table></figure><blockquote><p>先group by分组再用 having过滤</p><ol><li>连接两个表 student 和 score 表，使用 JOIN 连接， score 表中要和同学表关联。</li><li>对学生编号进行分组。</li><li>计算每位学生的平均成绩。</li><li>筛选出平均成绩大于等于 60 分的学生</li></ol></blockquote><h4 id="查询平均成绩小于-60-分的同学的学生编号和学生姓名和平均成绩-包括有成绩的和无成绩的">查询平均成绩小于 60 分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s.s_id, s.s_name, <span class="built_in">AVG</span>(IFNULL(sc.s_score, <span class="number">0</span>)) <span class="keyword">AS</span> avg_score</span><br><span class="line"><span class="keyword">FROM</span> student s</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> score sc <span class="keyword">ON</span> s.s_id <span class="operator">=</span> sc.s_id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> s.s_id</span><br><span class="line"><span class="keyword">HAVING</span> avg_score <span class="operator">&lt;</span> <span class="number">60</span>;</span><br></pre></td></tr></table></figure><blockquote><p>ROUND 函数，用于把数值字段舍入为指定的小数位数。<br>IFNULL 函数是 MySQL 控制流函数之一,它接受两个参数,如果不是 NULL,则返回第一个参数。 否则,IFNULL 函数返回第二个参数。 两个参数可以是文字值或表达式。</p></blockquote><blockquote><ol><li>从 student 表中查询学生编号和学生姓名，使用 LEFT JOIN 连接 score 表，因为有些学生可能没有成绩记录，使用 LEFT JOIN 可以保证这些学生也能被查询到。</li><li>使用 IFNULL 函数将无成绩的记录的成绩值设为 0，这样可以保证所有学生都有成绩值。</li><li>使用 AVG 函数计算每个学生的平均成绩。</li><li>使用 GROUP BY 对学生编号进行分组，以便计算每个学生的平均成绩。</li><li>使用 HAVING 过滤出平均成绩小于 60 分的学生。</li></ol></blockquote><h4 id="查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩">查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s.s_id, s.s_name, <span class="built_in">COUNT</span>(sc.c_id) <span class="keyword">AS</span> course_count, <span class="built_in">SUM</span>(sc.s_score) <span class="keyword">AS</span> total_score</span><br><span class="line"><span class="keyword">FROM</span> student s</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> score sc <span class="keyword">ON</span> s.s_id <span class="operator">=</span> sc.s_id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> s.s_id, s.s_name;</span><br></pre></td></tr></table></figure><blockquote><ol><li>从 student 表中查询学生编号和学生姓名，使用 LEFT JOIN 连接 score 表，因为有些学生可能没有选课记录，使用 LEFT JOIN 可以保证这些学生也能被查询到。</li><li>使用 COUNT 函数计算每个学生的选课总数。</li><li>使用 SUM 函数计算每个学生所有课程的总成绩。</li><li>使用 GROUP BY 对学生编号和学生姓名进行分组，以便计算每个学生的选课总数和所有课程的总成绩。</li></ol></blockquote><h4 id="查询”李”姓老师的数量">查询”李”姓老师的数量</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">as</span> cnt_name_li</span><br><span class="line"><span class="keyword">FROM</span> teacher</span><br><span class="line"><span class="keyword">WHERE</span> t_name <span class="keyword">like</span> &quot;李%&quot;</span><br></pre></td></tr></table></figure><blockquote><ol><li>从 teacher 表中查询所有老师的信息。</li><li>使用 WHERE 子句过滤出姓”李”的老师，使用 LIKE 运算符和通配符%实现模糊匹配。</li><li>使用 COUNT 函数计算符合条件的老师数量。</li></ol><p><strong>COUNT()函数只计算非 NULL 值，如果要计算 NULL 值，可以使用 COUNT(*)</strong></p></blockquote><h4 id="查询学过”张三”老师授课的同学的信息">查询学过”张三”老师授课的同学的信息</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s.<span class="operator">*</span>, t.t_name</span><br><span class="line"><span class="keyword">FROM</span> student s</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> score sc <span class="keyword">ON</span> s.s_id <span class="operator">=</span> sc.s_id</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> course co <span class="keyword">ON</span> sc.c_id <span class="operator">=</span> co.c_id</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> teacher t <span class="keyword">ON</span> co.c_id <span class="operator">=</span> t.t_id</span><br><span class="line"><span class="keyword">WHERE</span> t.t_name <span class="operator">=</span> <span class="string">&#x27;张三&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>就是字面意思</p></blockquote><h4 id="查询没学过”张三”老师授课的同学的信息">查询没学过”张三”老师授课的同学的信息</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">## 查询没学过&quot;张三&quot;老师授课的同学的信息</span><br><span class="line"><span class="keyword">SELECT</span> s.<span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> student s</span><br><span class="line"><span class="keyword">WHERE</span> s.s_id <span class="keyword">NOT</span> <span class="keyword">IN</span> (</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> s.s_id</span><br><span class="line"><span class="keyword">FROM</span> student s</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> score sc <span class="keyword">ON</span> s.s_id <span class="operator">=</span> sc.s_id</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> course c <span class="keyword">ON</span> sc.c_id <span class="operator">=</span> c.c_id</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> teacher t <span class="keyword">ON</span> c.t_id <span class="operator">=</span> t.t_id</span><br><span class="line"><span class="keyword">WHERE</span> t.t_name <span class="operator">=</span> <span class="string">&#x27;张三&#x27;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><blockquote><ol><li>从 student 表中查询学生的信息。</li><li>使用子查询查询学过”张三”老师授课的同学的信息。</li><li>在子查询中，使用 INNER JOIN 连接 score 表、course 表和 teacher 表，以便查询学过”张三”老师授课的课程的学生信息。</li><li>使用 DISTINCT 关键字去重，以便查询不重复的学生信息。</li><li>使用 NOT IN 子句过滤出没学过”张三”老师授课的同学的信息。</li><li>最终查询结果包括学生的学号和姓名。</li></ol></blockquote><h4 id="查询学过编号为”01”并且也学过编号为”02”的课程的同学的信息">查询学过编号为”01”并且也学过编号为”02”的课程的同学的信息</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s.<span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> student s</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> score sc1 <span class="keyword">ON</span> s.s_id <span class="operator">=</span> sc1.s_id <span class="keyword">AND</span> sc1.c_id <span class="operator">=</span> <span class="string">&#x27;01&#x27;</span></span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> score sc2 <span class="keyword">ON</span> s.s_id <span class="operator">=</span> sc2.s_id <span class="keyword">AND</span> sc2.c_id <span class="operator">=</span> <span class="string">&#x27;02&#x27;</span>;</span><br></pre></td></tr></table></figure><blockquote><ol><li>从 student 表中查询学生的信息。</li><li>使用 INNER JOIN 连接 score 表两次，以便查询学过编号为”01”和”02”的课程的学生信息。</li><li>在第一次 INNER JOIN 中，使用 AND 条件将学生 ID 和课程 ID 进行连接。</li><li>在第二次 INNER JOIN 中，使用 AND 条件将学生 ID 和课程 ID 进行连接。</li><li>最终查询结果包括学生的学号和姓名</li></ol></blockquote><h4 id="查询学过编号为”01”但是没有学过编号为”02”的课程的同学的信息">查询学过编号为”01”但是没有学过编号为”02”的课程的同学的信息</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s.<span class="operator">*</span>,sc1.c_id sc1,sc2.c_id sc2</span><br><span class="line"><span class="keyword">FROM</span> student s</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> score sc1 <span class="keyword">ON</span> s.s_id <span class="operator">=</span> sc1.s_id <span class="keyword">AND</span> sc1.c_id <span class="operator">=</span> <span class="string">&#x27;01&#x27;</span></span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> score sc2 <span class="keyword">ON</span> s.s_id <span class="operator">=</span> sc2.s_id <span class="keyword">AND</span> sc2.c_id <span class="operator">=</span> <span class="string">&#x27;02&#x27;</span></span><br><span class="line"><span class="keyword">WHERE</span> sc2.c_id <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure><blockquote><ol><li>从 student 表中查询学生的信息。</li><li>使用 INNER JOIN 连接 score 表，以便查询学过编号为”01”的课程的学生信息。</li><li>在 INNER JOIN 中，使用 AND 条件将学生 ID 和课程 ID 进行连接。</li><li>使用 LEFT JOIN 连接 score 表，以便查询没学过编号为”02”的课程的学生信息。</li><li>在 LEFT JOIN 中，使用 AND 条件将学生 ID 和课程 ID 进行连接。</li><li>使用 WHERE 子句过滤出没学过编号为”02”的课程的学生信息，即 sc2.c_id 为 NULL 的学生信息。</li><li>最终查询结果包括学生的学号和姓名。</li></ol></blockquote><h4 id="查询没有学完全部课程的同学的信息">查询没有学完全部课程的同学的信息</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s.<span class="operator">*</span>,<span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">AS</span> cs_count</span><br><span class="line"><span class="keyword">FROM</span> student s</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> score sc <span class="keyword">ON</span> s.s_id<span class="operator">=</span>sc.s_id </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> s.s_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> sc.c_id)<span class="operator">&lt;</span>(<span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> course)</span><br></pre></td></tr></table></figure><blockquote><p>GROUP BY 筛选  HAVING 过滤出选课数量小于总课程数的人</p></blockquote><h4 id="查询至少有一门课与学号为”01”的同学所学相同的其他同学的信息">查询至少有一门课与学号为”01”的同学所学相同的其他同学的信息</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> s.s_id, s.s_name</span><br><span class="line"><span class="keyword">FROM</span> student s</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> score sc <span class="keyword">ON</span> s.s_id <span class="operator">=</span> sc.s_id</span><br><span class="line"><span class="keyword">WHERE</span> s.s_id <span class="operator">&lt;&gt;</span> <span class="string">&#x27;01&#x27;</span> <span class="keyword">AND</span> sc.c_id <span class="keyword">IN</span></span><br><span class="line">(</span><br><span class="line">  <span class="keyword">SELECT</span> c_id <span class="keyword">FROM</span> score <span class="keyword">WHERE</span> s_id <span class="operator">=</span> <span class="string">&#x27;01&#x27;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><blockquote><p>首先，找到学号为”01”的同学所选修的课程 ID（c_id）。通过 score 表，查询学号为”01”的同学所学的所有课程 ID。<br>接下来，找到除了学号为”01”的同学之外，选修了上述查询结果中课程 ID 的其他同学。通过 score 表和 student 表的联结，查询选修了与学号为”01”的同学所学相同课程的其他同学的学生 ID（s_id）。<br>补充：<br>s.s_id &lt;&gt; ‘01’表示查询条件，其中&lt;&gt;表示不等于的意思。所以 s.s_id &lt;&gt; ‘01’的意思是要筛选出学生 ID（s_id）不等于’01’的学生。换句话说，它将排除学号为’01’的同学，以保证查询结果只包括除了学号为’01’的同学之外的其他同学的信息</p></blockquote><h4 id="查询和”01”号的同学学习的课程完全相同的其他同学的信息">查询和”01”号的同学学习的课程完全相同的其他同学的信息</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> s_id <span class="keyword">IN</span> (</span><br><span class="line"><span class="keyword">SELECT</span> s_id</span><br><span class="line"><span class="keyword">FROM</span> score</span><br><span class="line"><span class="keyword">WHERE</span> s_id <span class="operator">!=</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">AND</span> c_id <span class="keyword">IN</span> (</span><br><span class="line"><span class="keyword">SELECT</span> c_id <span class="keyword">FROM</span> score <span class="keyword">WHERE</span> s_id <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> s_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(c_id) <span class="operator">=</span> (</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(c_id) <span class="keyword">FROM</span> score <span class="keyword">WHERE</span> s_id <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><blockquote><ol><li>student 表和 score 表自我连接，得到所有学生的学号和选课信息。</li><li>对于学号为”01”的学生，筛选出它所选修的课程信息。</li><li>排除学号为”01”的学生，得到其他学生的学号和选课信息。</li><li>将其他学生和”01”学生的选课信息进行匹配，得到和”01”学生选课完全相同的其他学生。</li><li>对这些学生的信息进行聚合，通过计数器比较这些学生选课的数量是否和”01”学生的一致，得到和”01”学生选课完全相同的其他学生的信息</li></ol></blockquote><h4 id="查询没学过”张三”老师讲授的任一门课程的学生姓名">查询没学过”张三”老师讲授的任一门课程的学生姓名</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> stu.s_name</span><br><span class="line"><span class="keyword">FROM</span> student stu</span><br><span class="line"><span class="keyword">WHERE</span> stu.s_id <span class="keyword">NOT</span> <span class="keyword">IN</span> (</span><br><span class="line"><span class="keyword">SELECT</span> sc.c_id</span><br><span class="line"><span class="keyword">FROM</span> score sc</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> course co <span class="keyword">on</span> sc.c_id <span class="operator">=</span> co.c_id</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> teacher t <span class="keyword">on</span> co.t_id <span class="operator">=</span> t.t_id</span><br><span class="line"><span class="keyword">WHERE</span> t_name <span class="operator">=</span> <span class="string">&#x27;张三&#x27;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><blockquote><ol><li>子查询中，通过 INNER JOIN 将 score、course 和 teacher 三个表连接起来，找到所有由”张三”老师讲授的课程对应的学生编号。</li><li>在主查询中，使用 NOT IN 语句找到所有没有在子查询中出现过的学生编号。</li><li>最终查询结果中，只包含学生姓名，而不包含其他信息</li></ol></blockquote><h4 id="查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩">查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s.s_id, s.s_name, <span class="built_in">AVG</span>(sc.s_score) <span class="keyword">as</span> avg_score</span><br><span class="line"><span class="keyword">FROM</span> student s <span class="keyword">INNER</span> <span class="keyword">JOIN</span> score sc <span class="keyword">ON</span> s.s_id <span class="operator">=</span> sc.s_id</span><br><span class="line"><span class="keyword">WHERE</span> sc.s_score <span class="operator">&lt;</span> <span class="number">60</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> s.s_id, s.s_name</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(sc.s_id) <span class="operator">&gt;=</span> <span class="number">2</span>;</span><br></pre></td></tr></table></figure><blockquote><p>1.先使用 JOIN 连接了 student 表和 score 表，以便进行跨表查询。 2.然后使用 WHERE 子句筛选出成绩小于 60 分的记录，代表不及格。 3.接着使用 GROUP BY 对学生的学号和姓名进行分组，方便后续对同一学生的成绩进行平均值计算。 4.最后使用 HAVING 子句筛选出至少有两门不及格课程的学生，并使用 AVG 函数计算出平均成绩。查询结果包括学生的学号、姓名和平均成绩</p></blockquote><h4 id="检索”01”课程分数小于-60，按分数降序排列的学生信息">检索”01”课程分数小于 60，按分数降序排列的学生信息</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s.<span class="operator">*</span>,sc.s_score</span><br><span class="line"><span class="keyword">FROM</span> student s</span><br><span class="line"><span class="keyword">JOIN</span> score sc <span class="keyword">ON</span> s.s_id<span class="operator">=</span>sc.s_id</span><br><span class="line"><span class="keyword">WHERE</span> sc.s_score<span class="operator">&lt;</span><span class="number">60</span> <span class="keyword">AND</span> sc.c_id <span class="operator">=</span> &quot;01&quot;</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> sc.s_score <span class="keyword">DESC</span></span><br></pre></td></tr></table></figure><blockquote><ol><li>将学生表和分数表连接</li><li>where 过滤条件</li><li>order by降序输出</li></ol></blockquote><h4 id="按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩">按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    s.s_id <span class="keyword">AS</span> 学号,</span><br><span class="line">    <span class="comment">-- 选取学生表 student 中的 s_id 列并将其重命名为 &quot;学号&quot;</span></span><br><span class="line">    s.s_name <span class="keyword">AS</span> 姓名,</span><br><span class="line">    <span class="comment">-- 选取学生表 student 中的 s_name 列并将其重命名为 &quot;姓名&quot;</span></span><br><span class="line">    <span class="built_in">SUM</span>(<span class="keyword">CASE</span> c_id <span class="keyword">WHEN</span> <span class="number">1</span> <span class="keyword">THEN</span> s_score <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>) <span class="keyword">AS</span> 语文,</span><br><span class="line">    <span class="comment">-- 计算学生表 student 中的 s_score 列，c_id 为 1 的行数之和，将其命名为 &quot;语文&quot;</span></span><br><span class="line">    <span class="built_in">SUM</span>(<span class="keyword">CASE</span> c_id <span class="keyword">WHEN</span> <span class="number">2</span> <span class="keyword">THEN</span> s_score <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>) <span class="keyword">AS</span> 数学,</span><br><span class="line">    <span class="comment">-- 计算学生表 student 中的 s_score 列，c_id 为 2 的行数之和，将其命名为 &quot;数学&quot;</span></span><br><span class="line">    <span class="built_in">SUM</span>(<span class="keyword">CASE</span> c_id <span class="keyword">WHEN</span> <span class="number">3</span> <span class="keyword">THEN</span> s_score <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>) <span class="keyword">AS</span> 英语,</span><br><span class="line">    <span class="comment">-- 计算学生表 student 中的 s_score 列，c_id 为 3 的行数之和，将其命名为 &quot;英语&quot;</span></span><br><span class="line">    IFNULL(ROUND(<span class="built_in">AVG</span>(s_score), <span class="number">2</span>), <span class="number">0</span>) <span class="keyword">AS</span> 平均成绩</span><br><span class="line">    <span class="comment">-- 计算学生表 student 中的 s_score 列的平均值，并将结果四舍五入保留两位小数，若结果为 NULL，则返回 0，并将其命名为 &quot;平均成绩&quot;</span></span><br><span class="line"><span class="keyword">FROM</span> student s</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> score sc <span class="keyword">ON</span> s.s_id <span class="operator">=</span> sc.s_id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> s.s_id, s.s_name</span><br><span class="line"><span class="comment">-- 按照学生表 student 中的 s_id,s.s_name 分组</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> 平均成绩 <span class="keyword">DESC</span>;</span><br><span class="line"><span class="comment">-- 按照 &quot;平均成绩&quot; 列进行降序排序</span></span><br></pre></td></tr></table></figure><blockquote><p>看注解</p><p>CASE …WHEN…THEN…ELSE… 看作是if else叭</p><p>将sum与case结合使用，可以实现分段统计</p></blockquote><h4 id="查询各科成绩最高分、最低分和平均分，以如下形式显示">查询各科成绩最高分、最低分和平均分，以如下形式显示</h4><p>课程 ID，课程 name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率<br>– 及格为&gt;=60，中等为：70-80，优良为：80-90，优秀为：&gt;=90</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    c.c_id <span class="keyword">as</span> 课程ID,c.c_name <span class="keyword">as</span> 课程name,</span><br><span class="line">    <span class="built_in">max</span>(s_score) <span class="keyword">as</span> 最高分,</span><br><span class="line">    <span class="built_in">min</span>(s_score) <span class="keyword">as</span> 最低分,</span><br><span class="line">    round(<span class="built_in">avg</span>(s_score), <span class="number">2</span>) <span class="keyword">as</span> 平均分,</span><br><span class="line">    concat(round(<span class="built_in">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> s_score <span class="operator">&gt;=</span> <span class="number">60</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>) <span class="operator">/</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="operator">*</span> <span class="number">100</span>, <span class="number">2</span>), <span class="string">&#x27;%&#x27;</span>) <span class="keyword">as</span> 及格率,</span><br><span class="line">    concat(round(<span class="built_in">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> s_score <span class="keyword">between</span> <span class="number">70</span> <span class="keyword">and</span> <span class="number">80</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>) <span class="operator">/</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="operator">*</span> <span class="number">100</span>, <span class="number">2</span>), <span class="string">&#x27;%&#x27;</span>) <span class="keyword">as</span> 中等率,</span><br><span class="line">    concat(round(<span class="built_in">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> s_score <span class="keyword">between</span> <span class="number">80</span> <span class="keyword">and</span> <span class="number">90</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>) <span class="operator">/</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="operator">*</span> <span class="number">100</span>, <span class="number">2</span>), <span class="string">&#x27;%&#x27;</span>) <span class="keyword">as</span> 优良率,</span><br><span class="line">    concat(round(<span class="built_in">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> s_score <span class="operator">&gt;=</span> <span class="number">90</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>) <span class="operator">/</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="operator">*</span> <span class="number">100</span>, <span class="number">2</span>), <span class="string">&#x27;%&#x27;</span>) <span class="keyword">as</span> 优秀率</span><br><span class="line"><span class="keyword">from</span> course c</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> score s <span class="keyword">on</span> c.c_id <span class="operator">=</span> s.c_id</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> c.c_id,c.c_name</span><br></pre></td></tr></table></figure><blockquote><p>concat 表示连接字符的意思</p></blockquote><h4 id="按各科成绩进行排序，并显示排名">按各科成绩进行排序，并显示排名</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  s.s_id,</span><br><span class="line">  s.s_name,</span><br><span class="line">  c.c_name,</span><br><span class="line">  sc.s_score,</span><br><span class="line">  <span class="built_in">RANK</span>() <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> sc.c_id <span class="keyword">ORDER</span> <span class="keyword">BY</span> sc.s_score <span class="keyword">DESC</span>) <span class="keyword">AS</span> score_rank</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  Student <span class="keyword">AS</span> s</span><br><span class="line"><span class="keyword">JOIN</span> </span><br><span class="line">  Score <span class="keyword">AS</span> sc <span class="keyword">ON</span> s.s_id <span class="operator">=</span> sc.s_id</span><br><span class="line"><span class="keyword">JOIN</span> </span><br><span class="line">  Course <span class="keyword">AS</span> c <span class="keyword">ON</span> sc.c_id <span class="operator">=</span> c.c_id</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> </span><br><span class="line">  c.c_name, </span><br><span class="line">  score_rank;</span><br></pre></td></tr></table></figure><blockquote><ol><li><code>SELECT s.s_id, s.s_name, c.c_name, sc.s_score, ...</code>：选择学生的学号(<code>s.s_id</code>)、姓名(<code>s.s_name</code>)、课程名称(<code>c.c_name</code>)和成绩(<code>sc.s_score</code>)。</li><li><code>RANK() OVER (PARTITION BY sc.c_id ORDER BY sc.s_score DESC) AS score_rank</code>：使用窗口函数<code>RANK()</code>来为每个科目的成绩分配排名。<code>PARTITION BY sc.c_id</code>表示排名是按课程ID分组的，<code>ORDER BY sc.s_score DESC</code>表示成绩高的排名在前。</li><li><code>FROM Student AS s</code>：指定查询的主表为<code>Student</code>表，并使用别名<code>s</code>。</li><li><code>JOIN Score AS sc ON s.s_id = sc.s_id</code>：通过内连接将<code>Student</code>表和<code>Score</code>表连接起来，以便能够查询到每个学生的成绩。</li><li><code>JOIN Course AS c ON sc.c_id = c.c_id</code>：通过内连接将<code>Score</code>表和<code>Course</code>表连接起来，以便能够查询到课程名称。</li><li><code>ORDER BY c.c_name, score_rank</code>：对查询结果首先按课程名称进行排序，然后按排名排序。这样，每个科目的学生成绩都会按排名顺序显示。</li></ol><p><code>PARTITION BY</code> 是 SQL 中的一个子句，它与窗口函数一起使用，用于指定窗口函数的分区条件。</p><p>如果需要处理成绩并列的情况，可以将<code>RANK()</code>替换为<code>DENSE_RANK()</code>，这样即使有成绩相同的情况，排名也不会跳过数字</p></blockquote><h4 id="查询学生的总成绩并进行排名">查询学生的总成绩并进行排名</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s.s_name,<span class="built_in">SUM</span>(IFNULL(sc.s_score,<span class="number">0</span>)) <span class="keyword">AS</span> <span class="string">&#x27;总成绩&#x27;</span>,</span><br><span class="line"><span class="built_in">RANK</span>() <span class="keyword">OVER</span>(<span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="built_in">SUM</span>(sc.s_score) <span class="keyword">DESC</span>) <span class="keyword">AS</span> <span class="string">&#x27;排名&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span> Student s </span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> Score sc <span class="keyword">ON</span> s.s_id<span class="operator">=</span>sc.s_id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> s.s_name</span><br></pre></td></tr></table></figure><blockquote><ol><li>SELECT 子句中使用 RANK 函数计算分组排序排名，窗口函数通常会在 ORDER BY 子句中使用。在这个 SQL 语句中，使用 RANK() OVER (ORDER BY SUM(score.s_score) DESC) AS 排名表示对 SUM(score.s_score)的降序排列。</li><li>通过 JOIN 将 score 表和 student 表连接，获取每个学生的成绩信息和学生姓名。</li><li>使用 GROUP BY 这个子句将查询结果分组为每个学生，并用 SUM 聚合函数计算每个学生的总分。</li></ol></blockquote><h4 id="查询不同老师所教不同课程平均分从高到低显示">查询不同老师所教不同课程平均分从高到低显示</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> t.t_name,c.c_name,<span class="built_in">AVG</span>(sc.s_score) <span class="keyword">AS</span>&quot;平均分&quot;</span><br><span class="line"><span class="keyword">FROM</span> teacher t</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> course c <span class="keyword">ON</span> t.t_id <span class="operator">=</span> c.c_id</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> score sc <span class="keyword">ON</span> c.c_id <span class="operator">=</span> sc.c_id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> t.t_name,c.c_name</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="built_in">AVG</span>(sc.s_score) DESCs</span><br></pre></td></tr></table></figure><blockquote><p>这个比较简单就没什么好说的</p></blockquote><h4 id="查询所有课程的成绩第-2-名到第-3-名的学生信息及该课程成绩">查询所有课程的成绩第 2 名到第 3 名的学生信息及该课程成绩</h4> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> student.s_id, student.s_name, student.s_sex, student.s_birth,</span><br><span class="line">    score.s_score, course.c_name</span><br><span class="line"><span class="keyword">FROM</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> s_id, c_id, s_score,</span><br><span class="line">        <span class="built_in">DENSE_RANK</span>() <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> c_id <span class="keyword">ORDER</span> <span class="keyword">BY</span> s_score <span class="keyword">DESC</span>) <span class="keyword">AS</span> `rank`</span><br><span class="line">    <span class="keyword">FROM</span> score</span><br><span class="line">) score</span><br><span class="line"><span class="keyword">JOIN</span> student <span class="keyword">ON</span> score.s_id <span class="operator">=</span> student.s_id</span><br><span class="line"><span class="keyword">JOIN</span> course <span class="keyword">ON</span> score.c_id <span class="operator">=</span> course.c_id</span><br><span class="line"><span class="keyword">WHERE</span> score.`rank` <span class="keyword">BETWEEN</span> <span class="number">2</span> <span class="keyword">AND</span> <span class="number">3</span>;</span><br></pre></td></tr></table></figure><blockquote><ol><li>首先，我们需要为每个学生在每门课程中的成绩计算排名，为此需要使用窗口函数来计算排名。</li><li>在 SQL 中，计算排名的方法是使用 ROW_NUMBER() 或 DENSE_RANK() 等窗口函数完成。这里我们使用 DENSE_RANK() 函数，该函数按照指定的顺序为每一行分配一个排名号。</li><li>在计算排名时，注意到需要在每门课程内进行排名，因此我们需要根据课程编号进行分组，这可以使用 PARTITION BY 关键字来实现。</li><li>对成绩降序排列，这样排名靠前的成绩排在前面，方便后面筛选排名信息。</li><li>完成为每门课程内学生成绩的排名计算。</li><li>接下来，我们需要将排名和学生信息、课程信息进行 JOIN，以便查询出每个学生的详细信息和其在课程中的排名情况。</li><li>最后，我们需要在上述 SQL 语句基础上增加 WHERE 子句，筛选出排名在第二名和第三名的学生记录</li></ol></blockquote><h4 id="统计各科成绩各分数段人数：课程编号-课程名称-100-85-85-70-70-60-0-60-及所占百分比">统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    course.c_id, course.c_name,</span><br><span class="line">    <span class="built_in">COUNT</span>(IF(s_score <span class="keyword">BETWEEN</span> <span class="number">85</span> <span class="keyword">AND</span> <span class="number">100</span>, <span class="number">1</span>, <span class="keyword">NULL</span>)) <span class="keyword">AS</span> <span class="string">&#x27;100-85&#x27;</span>,</span><br><span class="line">    <span class="built_in">COUNT</span>(IF(s_score <span class="keyword">BETWEEN</span> <span class="number">70</span> <span class="keyword">AND</span> <span class="number">84</span>, <span class="number">1</span>, <span class="keyword">NULL</span>)) <span class="keyword">AS</span> <span class="string">&#x27;85-70&#x27;</span>,</span><br><span class="line">    <span class="built_in">COUNT</span>(IF(s_score <span class="keyword">BETWEEN</span> <span class="number">60</span> <span class="keyword">AND</span> <span class="number">69</span>, <span class="number">1</span>, <span class="keyword">NULL</span>)) <span class="keyword">AS</span> <span class="string">&#x27;70-60&#x27;</span>,</span><br><span class="line">    <span class="built_in">COUNT</span>(IF(s_score <span class="keyword">BETWEEN</span> <span class="number">0</span> <span class="keyword">AND</span> <span class="number">59</span>, <span class="number">1</span>, <span class="keyword">NULL</span>)) <span class="keyword">AS</span> <span class="string">&#x27;0-60&#x27;</span>,</span><br><span class="line">    CONCAT(ROUND(<span class="built_in">COUNT</span>(IF(s_score <span class="keyword">BETWEEN</span> <span class="number">85</span> <span class="keyword">AND</span> <span class="number">100</span>, <span class="number">1</span>, <span class="keyword">NULL</span>)) <span class="operator">/</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="operator">*</span> <span class="number">100</span>, <span class="number">2</span>), <span class="string">&#x27;%&#x27;</span>) <span class="keyword">AS</span> <span class="string">&#x27;100-85(%)&#x27;</span>,</span><br><span class="line">    CONCAT(ROUND(<span class="built_in">COUNT</span>(IF(s_score <span class="keyword">BETWEEN</span> <span class="number">70</span> <span class="keyword">AND</span> <span class="number">84</span>, <span class="number">1</span>, <span class="keyword">NULL</span>)) <span class="operator">/</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="operator">*</span> <span class="number">100</span>, <span class="number">2</span>), <span class="string">&#x27;%&#x27;</span>) <span class="keyword">AS</span> <span class="string">&#x27;85-70(%)&#x27;</span>,</span><br><span class="line">    CONCAT(ROUND(<span class="built_in">COUNT</span>(IF(s_score <span class="keyword">BETWEEN</span> <span class="number">60</span> <span class="keyword">AND</span> <span class="number">69</span>, <span class="number">1</span>, <span class="keyword">NULL</span>)) <span class="operator">/</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="operator">*</span> <span class="number">100</span>, <span class="number">2</span>), <span class="string">&#x27;%&#x27;</span>) <span class="keyword">AS</span> <span class="string">&#x27;70-60(%)&#x27;</span>,</span><br><span class="line">    CONCAT(ROUND(<span class="built_in">COUNT</span>(IF(s_score <span class="keyword">BETWEEN</span> <span class="number">0</span> <span class="keyword">AND</span> <span class="number">59</span>, <span class="number">1</span>, <span class="keyword">NULL</span>)) <span class="operator">/</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="operator">*</span> <span class="number">100</span>, <span class="number">2</span>), <span class="string">&#x27;%&#x27;</span>) <span class="keyword">AS</span> <span class="string">&#x27;0-60(%)&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span> course</span><br><span class="line"><span class="keyword">JOIN</span> score <span class="keyword">ON</span> course.c_id <span class="operator">=</span> score.c_id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> course.c_id, course.c_name;</span><br></pre></td></tr></table></figure><blockquote><p>首先，我们需要计算出每门课程中各个分数段（100-85，85-70，70-60，0-60）的学生人数以及每个分数段所占百分比（即分数段的人数占总人数的比例）。这可以通过统计成绩表中不同分数段的学生人数来完成。<br>为了实现该目标，我们可以使用 IF 函数对每个成绩进行分类，然后将每个分数段中成绩符合要求（如成绩在 85-100 分之间）的学生计数为 1。这样，我们可以通过统计不同成绩分类的总数来获得每个分数段的学生人数。<br>在查询语句中，我们采用了以下方式统计不同分数段中的学生人数和所占百分比：</p><ol><li>首先使用 JOIN 连接了学生表（student）、课程表（course）和成绩表（score），按照课程编号进行分组。</li><li>使用 COUNT 函数和 IF 函数组合的方式来计算各个分数段中成绩符合要求的学生人数，例如：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">COUNT</span>(IF(s_score <span class="keyword">BETWEEN</span> <span class="number">85</span> <span class="keyword">AND</span> <span class="number">100</span>, <span class="number">1</span>, <span class="keyword">NULL</span>)) <span class="keyword">AS</span> <span class="string">&#x27;100-85&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SQL</span></span><br></pre></td></tr></table></figure><p>该语句用于统计成绩在 85-100 分之间的学生人数，并将统计结果重命名为 “100-85”。</p><ol><li>将以上计算结果按照课程编号和课程名称进行分组，我们可以获得每门课程中各个分数段的学生人数。</li><li>使用 ROUND 函数和字符串拼接的方式将每个分数段的百分比表示为一个字符串，这里我们使用 CONCAT 函数对字符串进行拼接，例如：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CONCAT(ROUND(<span class="built_in">COUNT</span>(IF(s_score <span class="keyword">BETWEEN</span> <span class="number">85</span> <span class="keyword">AND</span> <span class="number">100</span>, <span class="number">1</span>, <span class="keyword">NULL</span>)) <span class="operator">/</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="operator">*</span> <span class="number">100</span>, <span class="number">2</span>), <span class="string">&#x27;%&#x27;</span>) <span class="keyword">AS</span> <span class="string">&#x27;100-85(%)&#x27;</span></span><br><span class="line"></span><br><span class="line">PLSQL</span><br></pre></td></tr></table></figure><p>该语句用于将成绩在 85-100 分之间的学生人数转换为百分比，并将转换结果与一个百分号字符串相拼接，形成最终结果，例如 93.45%。<br>最终查询结果将包含以下列：课程编号（c_id）、课程名称（c_name）、100-85 分数段内的人数（100-85）、85-70 分数段内的人数（85-70）、70-60 分数段内的人数（70-60）、0-60 分数段内的人数（0-60）、各个分数段所占百分比的字符串表示，例如 12.34%（100-85(%)）。</p></blockquote><h4 id="查询学生平均成绩及其名次">查询学生平均成绩及其名次</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s.s_name,ROUND(<span class="built_in">AVG</span>(sc.s_score),<span class="number">2</span>) <span class="keyword">AS</span> <span class="string">&#x27;平均成绩&#x27;</span>,</span><br><span class="line"><span class="built_in">ROW_NUMBER</span>()<span class="keyword">OVER</span>(<span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="built_in">AVG</span>(sc.s_score) <span class="keyword">DESC</span>) <span class="keyword">AS</span> <span class="string">&#x27;排名&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span> Student s </span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> Score sc <span class="keyword">ON</span> s.s_id<span class="operator">=</span>sc.s_id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> s.s_name</span><br></pre></td></tr></table></figure><blockquote><ol><li><p>连接两张表，求平均成绩、排名</p></li><li><p>按照姓名分组</p></li></ol></blockquote><h4 id="查询各科成绩前三名的记录">查询各科成绩前三名的记录</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> r.c_name,r.rank_num,s.s_name,r.s_score</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">(<span class="keyword">SELECT</span> c.c_name,sc.s_id,sc.s_score,</span><br><span class="line"><span class="built_in">ROW_NUMBER</span>()<span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> c.c_name <span class="keyword">ORDER</span> <span class="keyword">BY</span> sc.s_score <span class="keyword">DESC</span>) <span class="keyword">AS</span> rank_num</span><br><span class="line"><span class="keyword">FROM</span> Course c</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> Score sc <span class="keyword">ON</span> c.c_id<span class="operator">=</span>sc.c_id)r</span><br><span class="line"><span class="keyword">JOIN</span> Student s <span class="keyword">ON</span> r.s_id<span class="operator">=</span>s.s_id <span class="keyword">and</span> r.rank_num<span class="operator">&lt;=</span><span class="number">3</span></span><br></pre></td></tr></table></figure><blockquote><ol><li>在子查询中对总成绩倒序排名</li><li>连接学生表后查询前三名</li></ol></blockquote>]]></content>
    
    
    <summary type="html">MySQL经典练习50题(上)</summary>
    
    
    
    <category term="学习笔记" scheme="https://blog.xing-ye.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="MySQL" scheme="https://blog.xing-ye.top/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Hexo Butterfly解决无法显示Latex数学公式</title>
    <link href="https://blog.xing-ye.top/posts/2218ee0a/"/>
    <id>https://blog.xing-ye.top/posts/2218ee0a/</id>
    <published>2024-04-29T07:40:00.000Z</published>
    <updated>2024-05-28T08:46:28.568Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原因">原因</h2><ul><li>hexo默认的渲染器是<code>marked</code>，并不支持<code>mathjax</code>。</li><li>kramed是在marked基础上修改的，支持了mathjax。你的hexo工程目录下的node_modules中可以找到对应的渲染器文件夹。同时在你的工程目录下用以下命令安装kramed。</li></ul><h2 id="安装渲染器">安装渲染器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall hexo-renderer-marked --save</span><br><span class="line">npm install hexo-renderer-kramed --save</span><br></pre></td></tr></table></figure><h2 id="修改配置文件">修改配置文件</h2><ul><li>到主题配置文件中_config.yml，找到mathjax，将其修改为true即可</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># MathJax</span></span><br><span class="line">mathjax:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  per_page: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># KaTeX</span></span><br><span class="line">katex:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  per_page: <span class="literal">true</span></span><br><span class="line">  hide_scrollbar: <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="文章渲染标签">文章渲染标签</h2><ul><li>为加快渲染速度，渲染器只会在标签中有mathjax: true的文章中使用利用mathjax渲染。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">title: Hexo Butterfly解决无法显示Latex数学公式</span><br><span class="line">categories: 博客</span><br><span class="line">tags:</span><br><span class="line">  - Hexo</span><br><span class="line">  - Butterfly</span><br><span class="line">  - Latex</span><br><span class="line">description: Hexo Butterfly解决无法显示Latex数学公式</span><br><span class="line"><span class="built_in">date</span>: 2024/04/29</span><br><span class="line">mathjax: <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="效果">效果</h2><ul><li>代码</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">\Gamma(z)=\int_0^\infty t^&#123;z-1&#125;e^&#123;-t&#125;dt.</span><br><span class="line">$$</span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><p>$$<br>\Gamma(z)=\int_0^\infty t^{z-1}e^{-t}dt.<br>$$</p>]]></content>
    
    
    <summary type="html">Hexo Butterfly解决无法显示Latex数学公式</summary>
    
    
    
    <category term="博客" scheme="https://blog.xing-ye.top/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="Hexo" scheme="https://blog.xing-ye.top/tags/Hexo/"/>
    
    <category term="Butterfly" scheme="https://blog.xing-ye.top/tags/Butterfly/"/>
    
    <category term="Latex" scheme="https://blog.xing-ye.top/tags/Latex/"/>
    
  </entry>
  
  <entry>
    <title>Markdown语法&amp;常用标签外挂</title>
    <link href="https://blog.xing-ye.top/posts/5e667529/"/>
    <id>https://blog.xing-ye.top/posts/5e667529/</id>
    <published>2024-04-28T16:00:00.000Z</published>
    <updated>2024-05-28T08:48:59.769Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Markdown语法">Markdown语法</h1><blockquote><p>参考：<a href="https://blog.csdn.net/u014061630/article/details/81359144">Markdown 语法图文全面详解(10 分钟学会)</a></p></blockquote><h2 id="代码块">代码块</h2><div class="tabs" id="代码块"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#代码块-1">示例源码</button></li><li class="tab"><button type="button" data-href="#代码块-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="代码块-1"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">\```shell</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">VSCode终端</span></span><br><span class="line">hexo clean; hexo s</span><br><span class="line">hexo clean; hexo g; hexo d</span><br><span class="line">git add .; git commit -m &quot;npm publish&quot;; npm version patch;</span><br><span class="line">git push</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Cmder终端</span></span><br><span class="line">hexo clean &amp;&amp; hexo s</span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br><span class="line">git add . &amp;&amp; git commit -m &quot;npm publish&quot; &amp;&amp; npm version patch</span><br><span class="line">git push</span><br><span class="line">\```</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="代码块-2"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">VSCode终端</span></span><br><span class="line">hexo clean; hexo s</span><br><span class="line">hexo clean; hexo g; hexo d</span><br><span class="line">git add .; git commit -m &quot;npm publish&quot;; npm version patch;</span><br><span class="line">git push</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Cmder终端</span></span><br><span class="line">hexo clean &amp;&amp; hexo s</span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br><span class="line">git add . &amp;&amp; git commit -m &quot;npm publish&quot; &amp;&amp; npm version patch</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="多级标题">多级标题</h2><div class="tabs" id="多级标题"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#多级标题-1">示例源码</button></li><li class="tab"><button type="button" data-href="#多级标题-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="多级标题-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># H1</span></span><br><span class="line"><span class="section">## H2</span></span><br><span class="line"><span class="section">### H3</span></span><br><span class="line"><span class="section">#### H4</span></span><br><span class="line"><span class="section">##### H5</span></span><br><span class="line"><span class="section">###### H6</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="多级标题-2"><ul><li>见本文各分级标题！</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="文字样式">文字样式</h2><div class="tabs" id="多级标题"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#多级标题-1">示例源码</button></li><li class="tab"><button type="button" data-href="#多级标题-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="多级标题-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">u</span>&gt;</span></span>下划线演示<span class="language-xml"><span class="tag">&lt;/<span class="name">u</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">文字<span class="strong">**加粗**</span>演示</span><br><span class="line"></span><br><span class="line">文字<span class="emphasis">*斜体*</span>演示</span><br><span class="line"></span><br><span class="line">文本<span class="code">`高亮`</span>演示</span><br><span class="line"></span><br><span class="line">文本~~删除~~线演示</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span> = <span class="string">5</span>&gt;</span></span>5号字<span class="language-xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">&quot;黑体&quot;</span>&gt;</span></span>黑体<span class="language-xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">blue</span>&gt;</span></span>蓝色<span class="language-xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">MistyRose</span>&gt;</span></span>这里的背景色是：MistyRosen，此处输入任意想输入的内容<span class="language-xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="多级标题-2"><p><u>下划线演示</u></p><p>文字<strong>加粗</strong>演示</p><p>文字<em>斜体</em>演示</p><p>文本<code>高亮</code>演示</p><p>文本<s>删除</s>线演示</p><p><font size = 5>5号字</font><br><font face="黑体">黑体</font><br><font color=blue>蓝色</font></p><table><tr><td bgcolor=MistyRose>这里的背景色是：MistyRosen，此处输入任意想输入的内容</td></tr></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><blockquote><p>参考：<a href="https://blog.csdn.net/qq_43732429/article/details/108034518">【Markdown 语法】字体颜色大小及文字底色设置</a></p></blockquote><h2 id="引用">引用</h2><div class="tabs" id="多级标题"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#多级标题-1">示例源码</button></li><li class="tab"><button type="button" data-href="#多级标题-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="多级标题-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt;  Java</span></span><br><span class="line"><span class="quote">&gt; 二级引用演示</span></span><br><span class="line"><span class="quote">&gt; MySQL</span></span><br><span class="line"><span class="quote">&gt; &gt;外键</span></span><br><span class="line"><span class="quote">&gt; &gt;</span></span><br><span class="line"><span class="quote">&gt; &gt;事务</span></span><br><span class="line"><span class="quote">&gt; &gt;</span></span><br><span class="line"><span class="quote">&gt; &gt;<span class="strong">**行级锁**</span>(引用内部一样可以用格式)</span></span><br><span class="line"><span class="quote">&gt;</span></span><br><span class="line"><span class="quote">&gt; ....</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="多级标题-2"><blockquote><p>Java<br>二级引用演示<br>MySQL</p><blockquote><p>外键</p><p>事务</p><p><strong>行级锁</strong>(引用内部一样可以用格式)</p></blockquote><p>…</p></blockquote><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="分割线">分割线</h2><div class="tabs" id="多级标题"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#多级标题-1">示例源码</button></li><li class="tab"><button type="button" data-href="#多级标题-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="多级标题-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line"><span class="strong">**<span class="emphasis">*</span></span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="多级标题-2"><hr><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="列表-跟空格都可以">列表(*,+,-跟空格都可以)</h2><h3 id="无序列表">无序列表</h3><div class="tabs" id="多级标题"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#多级标题-1">示例源码</button></li><li class="tab"><button type="button" data-href="#多级标题-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="多级标题-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> Java</span><br><span class="line"><span class="bullet">*</span> Python</span><br><span class="line"><span class="bullet">*</span> ...</span><br><span class="line"></span><br><span class="line"><span class="bullet">+</span> Java</span><br><span class="line"><span class="bullet">+</span> Python</span><br><span class="line"><span class="bullet">+</span> ...</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> Java</span><br><span class="line"><span class="bullet">-</span> Python</span><br><span class="line"><span class="bullet">-</span> ...</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="多级标题-2"><ul><li>Java</li><li>Python</li><li>…</li></ul><ul><li>Java</li><li>Python</li><li>…</li></ul><ul><li>Java</li><li>Python</li><li>…</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="有序列表">有序列表</h3><div class="tabs" id="多级标题"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#多级标题-1">示例源码</button></li><li class="tab"><button type="button" data-href="#多级标题-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="多级标题-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 注意后面有空格</span></span><br><span class="line"><span class="bullet">1.</span></span><br><span class="line"><span class="bullet">2.</span></span><br><span class="line"><span class="bullet">3.</span></span><br><span class="line">4.</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="多级标题-2"><ol><li></li><li></li><li></li><li></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="图片">图片</h2><div class="tabs" id="多级标题"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#多级标题-1">示例源码</button></li><li class="tab"><button type="button" data-href="#多级标题-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="多级标题-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 本地图片</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/assets/pusheencode.webp&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;示例图片&quot;</span> <span class="attr">style</span>=<span class="string">&quot;zoom:50%;&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="section"># 在线图片</span></span><br><span class="line">![<span class="string">code</span>](<span class="link">https://s2.loli.net/2024/04/11/nILGS8BgFRb1DxQ.jpg</span>)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="多级标题-2"><p><img src="https://s2.loli.net/2024/04/11/nILGS8BgFRb1DxQ.jpg" alt="code"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="表格">表格</h2><div class="tabs" id="多级标题"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#多级标题-1">示例源码</button></li><li class="tab"><button type="button" data-href="#多级标题-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="多级标题-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| 项目标号 | 资金     | 备注 |</span><br><span class="line">| -------- | -------- | ---- |</span><br><span class="line">| 1        | 100，000 | 无   |</span><br><span class="line">| 2        | 200，000 | 无   |</span><br><span class="line">| 3        | 300,600  | 重要 |</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="多级标题-2"><table><thead><tr><th>项目标号</th><th>资金</th><th>备注</th></tr></thead><tbody><tr><td>1</td><td>100，000</td><td>无</td></tr><tr><td>2</td><td>200，000</td><td>无</td></tr><tr><td>3</td><td>300,600</td><td>重要</td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="公式">公式</h2><div class="tabs" id="多级标题"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#多级标题-1">示例源码</button></li><li class="tab"><button type="button" data-href="#多级标题-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="多级标题-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">\Gamma(z)=\int<span class="emphasis">_0^\infty t^&#123;z-1&#125;e^&#123;-t&#125;dt.</span></span><br><span class="line"><span class="emphasis">$$</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="多级标题-2"><p>$$<br>\Gamma(z)=\int_0^\infty t^{z-1}e^{-t}dt.<br>$$</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="常用标签外挂（Tag-Plugins）">常用标签外挂（Tag Plugins）</h1><div class="note info simple"><p>标签外挂是 Hexo 独有的功能，并不是标准的 Markdown 格式。</p><p>以下的写法，只适用于 Butterfly 主题，用在其它主题上不会有效果，甚至可能会报错。使用前请留意</p></div><h2 id="Note">Note</h2><div class="tabs" id="note"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#note-1">固定icon通用设置</button></li><li class="tab"><button type="button" data-href="#note-2">simple样式</button></li><li class="tab"><button type="button" data-href="#note-3">modern 样式</button></li><li class="tab"><button type="button" data-href="#note-4">flat 样式</button></li><li class="tab"><button type="button" data-href="#note-5">disabled样式</button></li><li class="tab"><button type="button" data-href="#note-6">no-icon样式</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="note-1"><ul><li>语法</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note [class] [no-icon] [style] %&#125;</span><br><span class="line">Any content (support inline tags too.io).</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">用法</th></tr></thead><tbody><tr><td style="text-align:center">class</td><td style="text-align:center">【可选】标识，不同的标识有不同的配色<br/>（ default / primary / success / info / warning / danger ）</td></tr><tr><td style="text-align:center">no-icon</td><td style="text-align:center">【可选】不显示 icon</td></tr><tr><td style="text-align:center">style</td><td style="text-align:center">【可选】可以覆盖配置中的 style<br/>（simple/modern/flat/disabled）</td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-2"><div class="note simple"><p>默认 提示块标签</p></div><div class="note default simple"><p>default 提示块标签</p></div><div class="note primary simple"><p>primary 提示块标签</p></div><div class="note success simple"><p>success 提示块标签</p></div><div class="note info simple"><p>info 提示块标签</p></div><div class="note warning simple"><p>warning 提示块标签</p></div><div class="note danger simple"><p>danger 提示块标签</p></div><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note simple %&#125;</span><br><span class="line">默认 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default simple %&#125;</span><br><span class="line">default 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary simple %&#125;</span><br><span class="line">primary 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success simple %&#125;</span><br><span class="line">success 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info simple %&#125;</span><br><span class="line">info 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning simple %&#125;</span><br><span class="line">warning 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger simple %&#125;</span><br><span class="line">danger 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-3"><div class="note modern"><p>默认 提示块标签</p></div><div class="note default modern"><p>default 提示块标签</p></div><div class="note primary modern"><p>primary 提示块标签</p></div><div class="note success modern"><p>success 提示块标签</p></div><div class="note info modern"><p>info 提示块标籤</p></div><div class="note warning modern"><p>warning 提示块标签</p></div><div class="note danger modern"><p>danger 提示块标签</p></div><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note modern %&#125;</span><br><span class="line">默认 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default modern %&#125;</span><br><span class="line">default 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary modern %&#125;</span><br><span class="line">primary 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success modern %&#125;</span><br><span class="line">success 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info modern %&#125;</span><br><span class="line">info 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning modern %&#125;</span><br><span class="line">warning 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger modern %&#125;</span><br><span class="line">danger 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-4"><div class="note flat"><p>默认 提示块标签</p></div><div class="note default flat"><p>default 提示块标签</p></div><div class="note primary flat"><p>primary 提示块标签</p></div><div class="note success flat"><p>success 提示块标签</p></div><div class="note info flat"><p>info 提示块标签</p></div><div class="note warning flat"><p>warning 提示块标签</p></div><div class="note danger flat"><p>danger 提示块标签</p></div><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note flat %&#125;</span><br><span class="line">默认 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default flat %&#125;</span><br><span class="line">default 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary flat %&#125;</span><br><span class="line">primary 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success flat %&#125;</span><br><span class="line">success 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info flat  %&#125;</span><br><span class="line">info 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning flat %&#125;</span><br><span class="line">warning 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger flat %&#125;</span><br><span class="line">danger 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-5"><div class="note disabled"><p>默认 提示块标签</p></div><div class="note default disabled"><p>default 提示块标签</p></div><div class="note primary disabled"><p>primary 提示块标签</p></div><div class="note success disabled"><p>success 提示块标签</p></div><div class="note info disabled"><p>info 提示块标签</p></div><div class="note warning disabled"><p>warning 提示块标签</p></div><div class="note danger disabled"><p>danger 提示块标签</p></div><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note disabled %&#125;</span><br><span class="line">默认 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default disabled %&#125;</span><br><span class="line">default 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary disabled %&#125;</span><br><span class="line">primary 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success disabled %&#125;</span><br><span class="line">success 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info disabled %&#125;</span><br><span class="line">info 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning disabled %&#125;</span><br><span class="line">warning 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger disabled %&#125;</span><br><span class="line">danger 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-6"><div class="note disabled"><p>默认 提示块标签</p></div><div class="note default no-icon flat"><p>default 提示块标签</p></div><div class="note primary no-icon flat"><p>primary 提示块标签</p></div><div class="note success no-icon flat"><p>success 提示块标签</p></div><div class="note info no-icon flat"><p>info 提示块标签</p></div><div class="note warning no-icon flat"><p>warning 提示块标签</p></div><div class="note danger no-icon flat"><p>danger 提示块标签</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="Tabs">Tabs</h2><ul><li>使用方法</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs Unique name, [index] %&#125;</span><br><span class="line">&lt;!-- tab [Tab caption] [@icon] --&gt;</span><br><span class="line">Any content (support inline tags too).</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br><span class="line"></span><br><span class="line">Unique name   : Unique name of tabs block tag without comma.</span><br><span class="line"><span class="code">                Will be used in #id&#x27;s as prefix for each tab with their index numbers.</span></span><br><span class="line"><span class="code">                If there are whitespaces in name, for generate #id all whitespaces will replaced by dashes.</span></span><br><span class="line"><span class="code">                Only for current url of post/page must be unique!</span></span><br><span class="line"><span class="code">[index]       : Index number of active tab.</span></span><br><span class="line"><span class="code">                If not specified, first tab (1) will be selected.</span></span><br><span class="line"><span class="code">                If index is -1, no tab will be selected. It&#x27;s will be something like spoiler.</span></span><br><span class="line"><span class="code">                Optional parameter.</span></span><br><span class="line"><span class="code">[Tab caption] : Caption of current tab.</span></span><br><span class="line"><span class="code">                If not caption specified, unique name with tab index suffix will be used as caption of tab.</span></span><br><span class="line"><span class="code">                If not caption specified, but specified icon, caption will empty.</span></span><br><span class="line"><span class="code">                Optional parameter.</span></span><br><span class="line"><span class="code">[@icon]       : FontAwesome icon name (full-name, look like &#x27;fas fa-font&#x27;)</span></span><br><span class="line"><span class="code">                Can be specified with or without space; e.g. &#x27;Tab caption @icon&#x27; similar to &#x27;Tab caption@icon&#x27;.</span></span><br><span class="line"><span class="code">                Optional parameter.</span></span><br></pre></td></tr></table></figure><blockquote><p>例子 - 自定义 Tab 名 + 只有 icon + icon 和 Tab 名</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test4 %&#125;</span><br><span class="line">&lt;!-- tab 第一个Tab --&gt;</span><br><span class="line"><span class="strong">**tab名字为第一个Tab**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab @fab fa-apple-pay --&gt;</span><br><span class="line"><span class="strong">**只有图标 没有Tab名字**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab 炸弹@fas fa-bomb --&gt;</span><br><span class="line"><span class="strong">**名字+icon**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><div class="tabs" id="test4"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test4-1">第一个Tab</button></li><li class="tab"><button type="button" data-href="#test4-2"><i class="fab fa-apple-pay" style="text-align: center;"></i></button></li><li class="tab"><button type="button" data-href="#test4-3"><i class="fas fa-bomb"></i>炸弹</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p><strong>tab名字为第一个Tab</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-2"><p><strong>只有图标 没有Tab名字</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-3"><p><strong>名字+icon</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="Tag-hide">Tag-hide</h2><div class="tabs" id="tag-hide"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tag-hide-1">Toggle</button></li><li class="tab"><button type="button" data-href="#tag-hide-2">Inline</button></li><li class="tab"><button type="button" data-href="#tag-hide-3">Block</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tag-hide-1"><p>如果你需要展示的内容太多，可以把它隐藏在收缩框里，需要时再把它展开。</p><p>( display 不能包含英文逗号，可用 ‚)</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% hideToggle display,bg,color %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endhideToggle %&#125;</span><br></pre></td></tr></table></figure><blockquote><p>示例</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% hideToggle Butterfly安装方法 %&#125;</span><br><span class="line">在你的博客根目录里</span><br><span class="line">git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/Butterfly</span><br><span class="line">如果想要安装比较新的dev分支，可以</span><br><span class="line">git clone -b dev https://github.com/jerryc127/hexo-theme-butterfly.git themes/Butterfly</span><br><span class="line">&#123;% endhideToggle %&#125;</span><br></pre></td></tr></table></figure><details class="toggle" ><summary class="toggle-button" style="">Butterfly安装方法</summary><div class="toggle-content"><p>在你的博客根目录里<br>git clone -b master <a href="https://github.com/jerryc127/hexo-theme-butterfly.git">https://github.com/jerryc127/hexo-theme-butterfly.git</a> themes/Butterfly<br>如果想要安装比较新的dev分支，可以<br>git clone -b dev <a href="https://github.com/jerryc127/hexo-theme-butterfly.git">https://github.com/jerryc127/hexo-theme-butterfly.git</a> themes/Butterfly</p></div></details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tag-hide-2"><p>inline 在文本里面添加按钮隐藏内容，只限文字</p><p>( content 不能包含英文逗号，可用 ‚)</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% hideInline content,display,bg,color %&#125;</span><br></pre></td></tr></table></figure><ul><li><p>content: 文本内容</p></li><li><p>display: 按钮显示的文字 (可选)</p></li><li><p>bg: 按钮的背景颜色 (可选)</p></li><li><p>color: 按钮文字的颜色 (可选)</p></li></ul><blockquote><p>示例</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">哪个英文字母最酷？ &#123;% hideInline 因为西装裤(C装酷),查看答案,#FF7242,#fff %&#125;</span><br><span class="line"></span><br><span class="line">门里站着一个人? &#123;% hideInline 闪 %&#125;</span><br></pre></td></tr></table></figure><p>哪个英文字母最酷？ <span class="hide-inline"><button type="button" class="hide-button" style="background-color: #FF7242;color: #fff">查看答案<br></button><span class="hide-content">因为西装裤(C装酷)</span></span></p><p>门里站着一个人? <span class="hide-inline"><button type="button" class="hide-button" style="">Click<br></button><span class="hide-content">闪</span></span></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tag-hide-3"><p>block 独立的 block 隐藏内容，可以隐藏很多内容，包括图片，代码块等等</p><p>( display 不能包含英文逗号，可用 ‚)</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% hideBlock display,bg,color %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endhideBlock %&#125;</span><br></pre></td></tr></table></figure><ul><li>content: 文本内容</li><li>display: 按钮显示的文字 (可选)</li><li>bg: 按钮的背景颜色 (可选)</li><li>color: 按钮文字的颜色 (可选)</li></ul><blockquote><p>示例</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">查看答案</span><br><span class="line">&#123;% hideBlock 查看答案 %&#125;</span><br><span class="line">傻子，怎么可能有答案</span><br><span class="line">&#123;% endhideBlock %&#125;</span><br></pre></td></tr></table></figure><p>查看答案</p><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><p>傻子，怎么可能有答案</p></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="Time-line">Time line</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline title,color %&#125;</span><br><span class="line">&lt;!-- timeline title --&gt;</span><br><span class="line">xxxxx</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&lt;!-- timeline title --&gt;</span><br><span class="line">xxxxx</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><ul><li>text：标题 / 时间线</li><li>color：timeline 颜色，default (留空) （blue /pink/red/purple/orange/green）</li></ul><blockquote><p>示例 留空和蓝色 ，其余颜色任意调整</p></blockquote><div class="tabs" id="timeline"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#timeline-1">留空</button></li><li class="tab"><button type="button" data-href="#timeline-2">蓝色</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="timeline-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline 2022 %&#125;</span><br><span class="line">&lt;!-- timeline 01-02 --&gt;</span><br><span class="line">这是测试页面</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><div class="timeline undefined"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>2022</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>01-02</p></div></div><div class='timeline-item-content'><p>这是测试页面</p></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="timeline-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline 2022,blue %&#125;</span><br><span class="line">&lt;!-- timeline 01-02 --&gt;</span><br><span class="line">这是测试页面</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><div class="timeline blue"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>2022</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>01-02</p></div></div><div class='timeline-item-content'><p>这是测试页面</p></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><blockquote><p>更多标签请参考：<a href="https://butterfly.js.org/posts/4aa8abbe/#%E6%A8%99%E7%B1%A4%E5%A4%96%E6%8E%9B%EF%BC%88Tag-Plugins%EF%BC%89">標籤外掛（Tag-Plugins）</a></p></blockquote>]]></content>
    
    
    <summary type="html">Markdown语法&amp;常用标签外挂</summary>
    
    
    
    <category term="博客" scheme="https://blog.xing-ye.top/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="Markdown语法" scheme="https://blog.xing-ye.top/tags/Markdown%E8%AF%AD%E6%B3%95/"/>
    
    <category term="标签外挂" scheme="https://blog.xing-ye.top/tags/%E6%A0%87%E7%AD%BE%E5%A4%96%E6%8C%82/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客评论系统（Twikoo+Giscus）</title>
    <link href="https://blog.xing-ye.top/posts/d15d90d9/"/>
    <id>https://blog.xing-ye.top/posts/d15d90d9/</id>
    <published>2024-04-20T16:00:00.000Z</published>
    <updated>2024-06-23T08:59:59.949Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>UPD:本站评论系统已由Giscus更换至Twikoo</p></blockquote><h1 id="Twikoo（推荐版）">Twikoo（推荐版）</h1><ul><li>Twikoo 是一个简洁、安全、免费的静态网站评论系统，基于腾讯云开发。</li></ul><h2 id="特色">特色</h2><div class="tabs" id="twikoo"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#twikoo-1">简单</button></li><li class="tab"><button type="button" data-href="#twikoo-2">易用</button></li><li class="tab"><button type="button" data-href="#twikoo-3">安全</button></li><li class="tab"><button type="button" data-href="#twikoo-4">即时</button></li><li class="tab"><button type="button" data-href="#twikoo-5">个性</button></li><li class="tab"><button type="button" data-href="#twikoo-6">便捷管理</button></li><li class="tab"><button type="button" data-href="#twikoo-7">缺点</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="twikoo-1"><ul><li>免费搭建（使用云开发作为评论后台，每个用户均长期享受1个免费的标准型基础版1资源套餐）</li><li>简单部署（支持一键部署、手动部署、命令行部署）</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="twikoo-2"><ul><li>支持回复、点赞</li><li>无需额外适配，支持搭配浅色主题与深色主题使用</li><li>支持 API 调用，批量获取文章评论数、最新评论</li><li>访客在昵称栏输入 QQ 号，会自动补全 QQ 昵称和 QQ 邮箱</li><li>访客填写数字 QQ 邮箱，会使用 QQ 头像作为评论头像</li><li>支持评论框粘贴图片（可禁用）</li><li>支持插入图片（可禁用）</li><li>支持去不图床、云开发图床</li><li>支持插入表情（可禁用）</li><li>支持 Ctrl + Enter 快捷回复</li><li>评论框内容实时保存草稿，刷新不会丢失</li><li><a href="https://twikoo.js.org/faq.html#%E5%A6%82%E4%BD%95%E5%90%AF%E7%94%A8-katex-%E6%94%AF%E6%8C%81">支持 Katex 公式</a></li><li>支持按语言的代码高亮</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="twikoo-3"><ul><li>隐私信息安全（通过云函数控制敏感字段（邮箱、IP、环境配置等）不会泄露）</li><li>支持 Akismet 垃圾评论检测（需自行注册 <a href="https://akismet.com/">akismet.com</a>）</li><li>支持腾讯云内容安全垃圾评论检测（需自行注册 <a href="https://console.cloud.tencent.com/cms/text/overview">腾讯云内容安全</a>）</li><li>支持人工审核模式</li><li>防 XSS 注入</li><li>支持限制每个 IP 每 10 分钟最多发表多少条评论</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="twikoo-4"><ul><li>支持邮件提醒（访客和博主）</li><li>支持微信提醒（仅针对博主，基于 <a href="https://sc.ftqq.com/3.version">Server酱</a>，需自行注册）</li><li>支持 QQ 提醒（仅针对博主，基于 <a href="https://qmsg.zendee.cn/">Qmsg酱</a>，需自行注册）</li><li>支持 QQ 提醒（针对博主QQ或者群，基于 <a href="https://docs.go-cqhttp.org/">go-cqhttp</a>，需自己有服务器）</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="twikoo-5"><ul><li>支持自定义评论框背景图片</li><li>支持自定义“博主”标识文字</li><li>支持自定义通知邮件模板</li><li>支持自定义评论框提示信息（placeholder）</li><li>支持自定义表情列表（兼容 <a href="https://cdn.jsdelivr.net/npm/owo@1.0.2/demo/OwO.json">OwO 的数据格式</a>）</li><li>支持自定义【昵称】【邮箱】【网址】必填 / 选填</li><li>支持自定义代码高亮主题</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="twikoo-6"><ul><li>内嵌式管理面板，通过密码登录，可方便地查看评论、隐藏评论、删除评论、修改配置</li><li>支持隐藏管理入口，通过输入暗号显示</li><li>支持从 Valine、Artalk、Disqus 导入评论</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="twikoo-7"><ul><li>国外请求较慢（已被墙,需要域名）</li><li>部署需要实名认证</li><li>不支持 IE</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><blockquote><p>本站是用 Vercel + MongoDB 方案搭建 Twikoo 评论系统。</p></blockquote><h2 id="Vercel-部署">Vercel 部署</h2><ul><li><a href="https://www.bilibili.com/video/BV1Fh411e7ZH/">视频教程</a></li><li>文字教程参考：<ul><li><a href="https://twikoo.js.org/quick-start.html#%E9%92%88%E5%AF%B9-vercel-%E9%83%A8%E7%BD%B2%E7%9A%84%E6%9B%B4%E6%96%B0%E6%96%B9%E5%BC%8F">官方：Twikoo文档-针对Vercel的部署</a></li><li><a href="https://fe32.top/articles/hexo1611/#%E5%89%8D%E8%A8%80">基于 Hexo 键入评论功能 | 唐志远 (fe32.top)</a></li></ul></li></ul><h2 id="Vercel被墙解决方案">Vercel被墙解决方案</h2><ul><li><p><a href="https://fe32.top/articles/hexo1614/#%E5%88%9B%E5%BB%BA%E4%BA%8C%E7%BA%A7%E5%9F%9F%E5%90%8D">关于Vercel被墙导致获取Twikoo评论失败的解决方案 | 唐志远 (fe32.top)</a></p></li><li><p><a href="https://dusays.com/669/?keyword=vercel">推一下 Vercel 加速节点 - 杜老师说 (dusays.com)</a></p></li></ul><h1 id="Giscus（不想折腾版）">Giscus（不想折腾版）</h1><h2 id="前言">前言</h2><ul><li>如何选择评论系统毫无疑问是困扰不少hexo使用者的问题，然而关于这个问题，很多博客可能写在了非常早的时间，每个人的使用场景也不太一样。</li><li>为了评论注册一个帐号颇为繁琐，更何况国内的基本需要备案！</li><li>本人也是因为新版本Butterfly+Gitalk的评论区一直显示不出来，也没有最新的解决办法，于是选择了Giscus 作为本站的评论系统，使用下来发现效果也不错！</li><li>upd：最新版本就是哪个都用不了，hexo和butterfly降级后就能显示了！</li></ul><h2 id="什么是Giscus？">什么是Giscus？</h2><ul><li>Giscus 是一个简单易用的评论系统，它使用 GitHub Discussions 的作为存储和管理评论的后端。</li><li>网站的访客可以使用 GitHub 账号登录并发表评论，当有新评论时 GitHub 还会用邮件通知网站的主人。</li></ul><h2 id="特点">特点</h2><ul><li>开源、无广告、永久免费</li><li>支持多语言</li><li>支持表情反馈</li><li>支持懒加载</li></ul><h2 id="准备工作">准备工作</h2><ol><li>你的博客所用的 GitHub 的仓库必须是 <code>Public</code>，并且开通了 <a href="https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/enabling-or-disabling-github-discussions-for-a-repository"><code>Dicussion</code> 功能</a>(⬅如何开通)；</li><li>安装 <a href="https://github.com/apps/giscus">giscus.app</a>，安装的时候，分配你的博客所用的 GitHub 仓库即可。</li></ol><blockquote><p>当然，如果你的博客没有托管在 Github 上，你也可以单独创建一个 Github 仓库作为开通 giscus 评论。</p></blockquote><h2 id="使用教程">使用教程</h2><h3 id="Giscus-配置">Giscus 配置</h3><ul><li>在 <a href="https://giscus.app/zh-CN">giscus</a> 页面根据你的喜好进行配置，配置完成后会生成一个配置脚本。</li></ul><p><img src="https://s2.loli.net/2024/04/22/OGA5tQPvZlzVDj3.png" alt="image-20240422160133170"></p><p><img src="https://s2.loli.net/2024/04/22/zbS8eywvCTodEu9.png" alt="image-20240422160454748"></p><ul><li>配置完成后会出现以下脚本</li></ul><p><img src="https://s2.loli.net/2024/04/22/eGh9PaoOZ1RTU3V.png" alt="image-20240422160558382"></p><h3 id="Hexo-配置">Hexo 配置</h3><ul><li>在你的 Hexo 博客目录中执行以下命令，安装 hexo-next-giscus 插件。</li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-<span class="built_in">next</span>-giscus <span class="comment">--save</span></span><br></pre></td></tr></table></figure><ul><li>butterfly 配置，信息在上面的图里</li></ul><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># Giscus</span></span><br><span class="line"><span class="meta"># https:<span class="comment">//giscus.app/</span></span></span><br><span class="line"><span class="symbol">giscus:</span></span><br><span class="line"><span class="symbol">  repo:</span> 手动马赛克</span><br><span class="line"><span class="symbol">  repo_id:</span> 手动马赛克</span><br><span class="line"><span class="symbol">  category_id:</span> 手动马赛克</span><br><span class="line"><span class="symbol">  theme:</span></span><br><span class="line"><span class="symbol">    light:</span> light</span><br><span class="line"><span class="symbol">    dark:</span> dark</span><br><span class="line"><span class="symbol">  option:</span></span><br></pre></td></tr></table></figure><h3 id="Hexo部署">Hexo部署</h3><ul><li>hexo三连</li></ul><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo cl <span class="meta">&amp; hexo g &amp; hexo s</span></span><br></pre></td></tr></table></figure><ul><li>浏览器打开 <a href="http://localhost:4000/">http://localhost:4000</a>，在文章末尾可以看到 giscus 评论区了</li></ul>]]></content>
    
    
    <summary type="html">为你的博客添加评论系统叭！（new）</summary>
    
    
    
    <category term="博客" scheme="https://blog.xing-ye.top/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="博客" scheme="https://blog.xing-ye.top/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>PixPin</title>
    <link href="https://blog.xing-ye.top/posts/PixPin/"/>
    <id>https://blog.xing-ye.top/posts/PixPin/</id>
    <published>2024-04-17T16:00:00.000Z</published>
    <updated>2024-04-21T08:04:41.674Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>一刻没有为Snipaste而哀悼，立刻赶到战场的是PixPin！(pushi)</p></blockquote><h1 id="小记">小记</h1><p>从小到大我的截图软件史：</p><p>QQ截屏——微信截屏——window快捷键截屏——Snipaste（F1）——PixPin（Ctrl+1）</p><hr><p>大二以来，我一直觉得最好用的截图工具就是<a href="https://zh.snipaste.com/">Snipaste</a>，直到最近做笔记需要截屏OCR功能时，我才发现如果Snipaste能聚合OCR功能那是多么的完美，然鹅并没有开发（呜呜呜），于是我就发现了它——<a href="https://pixpinapp.com/">PixPin</a></p><h1 id="什么是PixPin？">什么是PixPin？</h1><p><strong>PixPin</strong> 是一款新兴的截图软件，它集成了截图、贴图、长截图、文字识别（OCR）和标注等功能。与免费无限制的在线 OCR 工具 <a href="https://link.zhihu.com/?target=https%3A//pearocr.com/">PearOCR</a> 是同款开发者。</p><h1 id="下载渠道">下载渠道</h1><ul><li><p>官网：<a href="https://pixpinapp.com">https://pixpinapp.com</a></p></li><li><p>社区：<a href="https://txc.qq.com/products/614512">https://txc.qq.com/products/614512</a></p></li><li><p>MAC版测试ing，相信很快就会推出！</p></li></ul><h1 id="特点">特点</h1><ol><li><strong>长截图</strong>：可以轻松截取滚动页面的长截图。包括横向的长截图或者竖向长截图！</li><li><strong>OCR功能</strong>：贴图后可以直接识别并复制图片中的文字。文本识别采用的是离线识别，无网络的支持也能实现。</li><li><strong>动态截图</strong>：支持截取GIF动图，并提供标注功能。同时PixPin在录制动图的时候，录制区域并不是固定的，所以你可以拖动它的“移动按钮” 来录制新的区域，在只想展示一些局部内容的时候非常有用。</li><li><strong>自定义设置</strong>：用户可以根据自己的习惯配置快捷键和其他选项。</li><li>**丰富的注释工具；**提供了多种注释工具，包括文本框、箭头、画笔、形状和线条等。</li><li><strong>贴图</strong>：也就是固定到屏幕，所截取的图像能贴在其他窗口之上，以供随时参考查阅。</li><li><strong>标注</strong>：丰富的标注工具，可以对截取的图片进行标注，准确地表达意图，同时解决了Snipaste 诟病的功能，序号标注（专业版才有）。</li></ol><h1 id="对比分析">对比分析</h1><ul><li><p><strong>功能丰富度</strong>：PixPin提供了Snipaste没有的长截图和OCR功能，这对于需要截取长页面内容或识别图片中文字的用户来说非常有用。而Snipaste则在标注工具和取色器方面更为丰富（PixPin现已支持取色器功能）。</p></li><li><p><strong>OCR功能</strong>：PixPin提供了<strong>离线</strong>复制图片中的文字（这个功能真的吹爆好吧！而且现在好像还支持翻译功能了）</p></li><li><p><strong>易用性</strong>：Snipaste以其快速响应和简单操作而受到用户青睐，而PixPin则因为集成了多种功能而成为一款全能型截图工具。</p></li><li><p><strong>内存占用</strong>：PixPin常驻要占31兆内存，Sinpaste只要3兆左右（更小巧）</p></li></ul><hr><blockquote><p>upd: 大家要是有什么新想法或是使用体验可以去社区反馈！！！望PixPin越来越好，越多人支持！</p></blockquote>]]></content>
    
    
    <summary type="html">一刻没有为Snipaste而哀悼，立刻赶到战场的是PixPin！</summary>
    
    
    
    <category term="实用工具" scheme="https://blog.xing-ye.top/categories/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="截图工具" scheme="https://blog.xing-ye.top/tags/%E6%88%AA%E5%9B%BE%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>代码随想录刷题笔记</title>
    <link href="https://blog.xing-ye.top/posts/9813b472/"/>
    <id>https://blog.xing-ye.top/posts/9813b472/</id>
    <published>2024-04-15T16:00:00.000Z</published>
    <updated>2024-05-28T13:31:47.323Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在此感谢Carl哥的算法平台——【<a href="https://www.programmercarl.com/">代码随想录</a>】</p></blockquote><blockquote><p>来自大三的我：才意识到<strong>算法的重要性</strong> ！</p><p>大一、大二时期没有对算法重视起来，导致算法基础比较差，前段时间为了蓝桥杯比赛才稍微系统的学习了一下，象征性的刷了些题，只能说现在能看出来用什么，但不熟练，不会拓宽思维！</p><p>现在重新跟着Carl哥学一下，为了备战实习和秋招，每天分出3-4小时学习算法！</p></blockquote><blockquote><p>upd:小Tips:对于第一次使用或不经常使用lc的小伙伴，可能习惯了acm的方式做算法题，如果遇到报错情况不知道怎么解决，结合AI工具是个提高效率的好办法！</p></blockquote><h1 id="数组">数组</h1><h2 id="二分查找">二分查找</h2><p><a href="https://leetcode.cn/problems/binary-search/description/">704. 二分查找 - 力扣（LeetCode）</a></p><ul><li>万能二分板子</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">search</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> l = <span class="number">-1</span>,r = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">while</span>(l+<span class="number">1</span>&lt;r)&#123;</span><br><span class="line">            <span class="type">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid]&lt;target)l = mid;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid]&gt;target)r = mid;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/search-insert-position/description/">35. 搜索插入位置 - 力扣（LeetCode）</a></p><ul><li>万能二分板子</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">searchInsert</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> l = <span class="number">-1</span>,r = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">while</span>(l+<span class="number">1</span>&lt;r)&#123;</span><br><span class="line">            <span class="type">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid]&lt;target)l = mid;</span><br><span class="line">            <span class="keyword">else</span> r = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/">34. 在排序数组中查找元素的第一个和最后一个位置 - 力扣（LeetCode）</a></p><ul><li>注意如果target大于数组中所有数的情况下，r会角标越界的情况。</li><li>之前不经常用vector容器没注意到这个问题 ，lc给我报的错</li></ul><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Line <span class="number">1034</span>: <span class="keyword">Char</span> <span class="number">9</span>: <span class="keyword">runtime</span> error: reference binding to <span class="keyword">null</span> pointer of type <span class="string">&#x27;int&#x27;</span> (stl_vector.h)</span><br><span class="line">SUMMARY: UndefinedBehaviorSanitizer: undefined-behavior <span class="regexp">/usr/</span>bin<span class="regexp">/../</span>lib<span class="regexp">/gcc/</span>x86_64-linux-gnu<span class="regexp">/9/</span>..<span class="regexp">/../</span>..<span class="regexp">/../i</span>nclude<span class="regexp">/c++/</span><span class="number">9</span><span class="regexp">/bits/</span>stl_vector.h:<span class="number">1043</span>:<span class="number">9</span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">search_left</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums,<span class="type">int</span> target)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> l = <span class="number">-1</span>,r = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">while</span>(l+<span class="number">1</span>&lt;r)&#123;</span><br><span class="line">            <span class="type">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid]&lt;target)l = mid;</span><br><span class="line">            <span class="keyword">else</span> r = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//这里需要注意如果target大于数组中所有数的情况下，r会角标越界的情况。</span></span><br><span class="line">        <span class="keyword">if</span>(r&lt;nums.<span class="built_in">size</span>() &amp;&amp; nums[r] == target)<span class="keyword">return</span> r;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">search_right</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums,<span class="type">int</span> target)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> l = <span class="number">-1</span>,r = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">while</span>(l+<span class="number">1</span>&lt;r)&#123;</span><br><span class="line">            <span class="type">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid]&lt;=target)l = mid;</span><br><span class="line">            <span class="keyword">else</span> r = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(l&gt;=<span class="number">0</span> &amp;&amp; nums[l] == target)<span class="keyword">return</span> l;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">searchRange</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ans1,ans2;</span><br><span class="line">        ans1 = <span class="built_in">search_left</span>(nums,target);</span><br><span class="line">        ans2 = <span class="built_in">search_right</span>(nums,target);</span><br><span class="line">        <span class="keyword">return</span> &#123;ans1,ans2&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/sqrtx/description/">69. x 的平方根 - 力扣（LeetCode）</a></p><ul><li>注意 使用该板子要特判边界</li><li><code>mid&lt;=x/mid</code> 防止溢出</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">mySqrt</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x == <span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(x == <span class="number">1</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">long</span> l = <span class="number">0</span>,r = x;</span><br><span class="line">        <span class="keyword">while</span>(l+<span class="number">1</span>&lt;r)&#123;</span><br><span class="line">            <span class="type">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(mid&lt;=x/mid)l = mid;</span><br><span class="line">            <span class="keyword">else</span> r = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/valid-perfect-square/description/">367. 有效的完全平方数 - 力扣（LeetCode）</a></p><ul><li>同样的特判</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">check</span><span class="params">(<span class="type">int</span> num)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(num == <span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(num == <span class="number">1</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>,r = num;</span><br><span class="line">        <span class="keyword">while</span>(l+<span class="number">1</span>&lt;r)&#123;</span><br><span class="line">            <span class="type">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(mid&lt;=num/mid)l = mid;</span><br><span class="line">            <span class="keyword">else</span> r = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isPerfectSquare</span><span class="params">(<span class="type">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ans = <span class="built_in">check</span>(num);</span><br><span class="line">        <span class="keyword">if</span>(ans * ans == num)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="移除元素">移除元素</h2><p><a href="https://leetcode.cn/problems/remove-element/">27. 移除元素 - 力扣（LeetCode）</a></p><ul><li>暴力</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">removeElement</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> size = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] == val) &#123; </span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; size; j++) &#123;</span><br><span class="line">                    nums[j - <span class="number">1</span>] = nums[j];</span><br><span class="line">                &#125;</span><br><span class="line">                i--; </span><br><span class="line">                size--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>双指针</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">removeElement</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> size = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;size;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(val != nums[i])&#123;</span><br><span class="line">                nums[j++] = nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> j;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/remove-duplicates-from-sorted-array/description/">26. 删除有序数组中的重复项 - 力扣（LeetCode）</a></p><ul><li>双指针</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">removeDuplicates</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(len == <span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">1</span>,j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;len)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] != nums[j])&#123;</span><br><span class="line">                nums[++j] = nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> j+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/move-zeroes/description/">283. 移动零 - 力扣（LeetCode）</a></p><ul><li>双指针</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">moveZeroes</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>,j = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> len = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="comment">//特判</span></span><br><span class="line">        <span class="keyword">if</span>(len == <span class="number">1</span>)<span class="keyword">return</span> ;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; len)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] != <span class="number">0</span>)<span class="built_in">swap</span>(nums[i],nums[j++]);</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/backspace-string-compare/description/">844. 比较含退格的字符串 - 力扣（LeetCode）</a></p><ul><li>初步想法 快慢指针</li><li><code>j&gt;0</code>这个条件要加上，否则会越界 对于下面这个用例</li></ul><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;a#<span class="subst">#c</span>&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;<span class="subst">#a</span><span class="subst">#c</span>&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function">string <span class="title">check</span><span class="params">(string s)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> len = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span> ,j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;len)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i] != <span class="string">&#x27;#&#x27;</span>)s[j++] = s[i];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(j&gt;<span class="number">0</span>) j--;</span><br><span class="line">            </span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s.<span class="built_in">substr</span>(<span class="number">0</span>,j);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">backspaceCompare</span><span class="params">(string s, string t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">check</span>(s) == <span class="built_in">check</span>(t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="有序数组的平方">有序数组的平方</h2><p><a href="https://leetcode.cn/problems/squares-of-a-sorted-array/description/">977. 有序数组的平方 - 力扣（LeetCode）</a></p><ul><li>暴力 快排</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">lass Solution &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">sortedSquares</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; A)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; A.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            A[i] *= A[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(A.<span class="built_in">begin</span>(), A.<span class="built_in">end</span>()); <span class="comment">// 快速排序</span></span><br><span class="line">        <span class="keyword">return</span> A;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>双指针</li></ul><p><img src="https://s2.loli.net/2024/04/16/MxQnwKI9RCt3H2X.gif" alt="img"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">sortedSquares</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; A)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> k = A.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">result</span><span class="params">(A.size())</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, j = A.<span class="built_in">size</span>() - <span class="number">1</span>; i &lt;= j;) &#123; <span class="comment">// 注意这里要i &lt;= j，因为最后要处理两个元素</span></span><br><span class="line">            <span class="keyword">if</span> (A[i] * A[i] &lt; A[j] * A[j])  &#123;</span><br><span class="line">                result[k--] = A[j] * A[j];</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                result[k--] = A[i] * A[i];</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="长度最小的子数组">长度最小的子数组</h2><p><a href="https://leetcode.cn/problems/minimum-size-subarray-sum/description/">209. 长度最小的子数组 - 力扣（LeetCode）</a></p><ul><li>滑动窗口</li></ul><p><img src="https://s2.loli.net/2024/04/16/GluLdvg7th8XQj4.png" alt="leetcode_209"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minSubArrayLen</span><span class="params">(<span class="type">int</span> target, vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span> ;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span> ; </span><br><span class="line">        <span class="type">int</span> max_len;</span><br><span class="line">        <span class="type">int</span> len = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j&lt;len;j++)&#123;</span><br><span class="line">            sum+=nums[j];</span><br><span class="line">             <span class="comment">// 注意这里使用while，每次更新 i（起始位置），并不断比较子序列是否符合条件</span></span><br><span class="line">            <span class="keyword">while</span>(sum&gt;=target)&#123;</span><br><span class="line">                max_len = j-i+<span class="number">1</span>;</span><br><span class="line">                res = <span class="built_in">min</span>(res,max_len);</span><br><span class="line">                sum = sum-nums[i++];<span class="comment">// 这里体现出滑动窗口的精髓之处，不断变更i（子序列的起始位置）</span></span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果result没有被赋值的话，就返回0，说明没有符合条件的子序列</span></span><br><span class="line">        <span class="keyword">return</span> res == <span class="number">1e5</span>+<span class="number">10</span>?<span class="number">0</span>:res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/fruit-into-baskets/description/">904. 水果成篮 - 力扣（LeetCode）</a></p><ul><li>哈希表 + 滑窗</li><li>思路</li></ul><blockquote><p>目的是找到两个数，使得这两个数字出现的次数最多且是连续的，只需要从左到右遍历左边，将其加入哈希表中，如果此时哈希表的数字种类超过2，依次删除哈希表里面的数字种类，如果种类为零 则擦除该数，依次遍历即可最后返回最大长度</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">totalFruit</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; fruits)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span> ,j = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> len = fruits.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">-1</span>;</span><br><span class="line">        map&lt;<span class="type">int</span>,<span class="type">int</span>&gt;mp;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span> ;i &lt; len;i++)&#123;</span><br><span class="line">            mp[fruits[i]]++;</span><br><span class="line">            <span class="keyword">while</span>(mp.<span class="built_in">size</span>()&gt;<span class="number">2</span>)&#123;</span><br><span class="line">                <span class="keyword">auto</span> it = mp.<span class="built_in">find</span>(fruits[j]);</span><br><span class="line">                it-&gt;second--;</span><br><span class="line">                <span class="keyword">if</span>(it-&gt;second == <span class="number">0</span>)</span><br><span class="line">                    mp.<span class="built_in">erase</span>(it);</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            ans = <span class="built_in">max</span>(ans,i-j+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/minimum-window-substring/description/">76. 最小覆盖子串 - 力扣（LeetCode）</a></p><ul><li>模拟 找边界</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">generateMatrix</span>(<span class="type">int</span> n) &#123;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">matrix</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n, <span class="number">0</span>));</span><br><span class="line">    <span class="type">int</span> num = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> top = <span class="number">0</span>, bottom = n - <span class="number">1</span>, left = <span class="number">0</span>, right = n - <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (num &lt;= n * n) &#123;</span><br><span class="line">        <span class="comment">// Traverse Right</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> col = left; col &lt;= right; col++) &#123;</span><br><span class="line">            matrix[top][col] = num++;</span><br><span class="line">        &#125;</span><br><span class="line">        top++;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Traverse Down</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> row = top; row &lt;= bottom; row++) &#123;</span><br><span class="line">            matrix[row][right] = num++;</span><br><span class="line">        &#125;</span><br><span class="line">        right--;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Traverse Left</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> col = right; col &gt;= left; col--) &#123;</span><br><span class="line">            matrix[bottom][col] = num++;</span><br><span class="line">        &#125;</span><br><span class="line">        bottom--;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Traverse Up</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> row = bottom; row &gt;= top; row--) &#123;</span><br><span class="line">            matrix[row][left] = num++;</span><br><span class="line">        &#125;</span><br><span class="line">        left++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> matrix;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/spiral-matrix/description/">54. 螺旋矩阵 - 力扣（LeetCode）</a></p><ul><li>模拟  注意边界转移</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">spiralOrder</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; matrix)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        vector&lt;<span class="type">int</span>&gt;arr;</span><br><span class="line">        <span class="comment">//特判</span></span><br><span class="line">        <span class="keyword">if</span>(matrix.<span class="built_in">empty</span>())<span class="keyword">return</span> arr;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> top = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> bottom = matrix.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span> ;</span><br><span class="line">        <span class="type">int</span> right = matrix[<span class="number">0</span>].<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = left;j &lt;= right;j++)arr.<span class="built_in">push_back</span>(matrix[top][j]);</span><br><span class="line">            <span class="keyword">if</span>(++top&gt;bottom)<span class="keyword">break</span>;<span class="comment">//重新设定上边界，若上边界大于下边界，则遍历遍历完成，下同</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = top;i &lt;= bottom;i++)arr.<span class="built_in">push_back</span>(matrix[i][right]);</span><br><span class="line">            <span class="keyword">if</span>(--right&lt;left)<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = right;j&gt;=left;j--)arr.<span class="built_in">push_back</span>(matrix[bottom][j]);</span><br><span class="line">            <span class="keyword">if</span>(--bottom&lt;top)<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = bottom;i&gt;=top;i--)arr.<span class="built_in">push_back</span>(matrix[i][left]);</span><br><span class="line">            <span class="keyword">if</span>(++left&gt;right)<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/shun-shi-zhen-da-yin-ju-zhen-lcof/description/">LCR 146. 螺旋遍历二维数组 - 力扣（LeetCode）</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">spiralArray</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; array)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt;arr;</span><br><span class="line">        <span class="keyword">if</span>(array.<span class="built_in">empty</span>())<span class="keyword">return</span> arr;</span><br><span class="line">        <span class="type">int</span> top = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> bottom = array.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> right = array[<span class="number">0</span>].<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = left;j&lt;=right;j++)arr.<span class="built_in">push_back</span>(array[top][j]);</span><br><span class="line">            <span class="keyword">if</span>(++top&gt;bottom)<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = top;i&lt;=bottom;i++)arr.<span class="built_in">push_back</span>(array[i][right]);</span><br><span class="line">            <span class="keyword">if</span>(--right&lt;left)<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = right;j&gt;=left;j--)arr.<span class="built_in">push_back</span>(array[bottom][j]);</span><br><span class="line">            <span class="keyword">if</span>(--bottom&lt;top)<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = bottom;i&gt;=top;i--)arr.<span class="built_in">push_back</span>(array[i][left]);</span><br><span class="line">            <span class="keyword">if</span>(++left&gt;right)<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="总结">总结</h2><ul><li>源自：代码随想录知识星球  <a href="https://wx.zsxq.com/dweb2/index/footprint/844412858822412">海螺人</a></li></ul><p><img src="https://s2.loli.net/2024/04/18/jgpyiqetYac3lsu.png" alt="img"></p><h1 id="链表">链表</h1><h2 id="链表理论基础">链表理论基础</h2><ul><li>什么是链表</li></ul><blockquote><p>链表是一种通过指针串联在一起的线性结构，每一个节点由两部分组成，一个是数据域一个是指针域（存放指向下一个节点的指针），最后一个节点的指针域指向null（空指针的意思）。</p></blockquote><p><img src="https://s2.loli.net/2024/05/08/LeVzmfjoYuS6PTy.png" alt="链表1"></p><ul><li><p>链表的类型</p><ul><li>单链表、双链表、循环链表</li></ul></li><li><p>链表存储方式</p><ul><li>离散存放于内存</li></ul></li><li><p>链表的定义</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单链表</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ListNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;  <span class="comment">// 节点上存储的元素</span></span><br><span class="line">    ListNode *next;  <span class="comment">// 指向下一个节点的指针</span></span><br><span class="line">    <span class="built_in">ListNode</span>(<span class="type">int</span> x) : <span class="built_in">val</span>(x), <span class="built_in">next</span>(<span class="literal">NULL</span>) &#123;&#125;  <span class="comment">// 节点的构造函数</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h2 id="移除链表元素">移除链表元素</h2><p><a href="https://leetcode.cn/problems/remove-linked-list-elements/">203. 移除链表元素 - 力扣（LeetCode）</a></p><ul><li>思路：虚拟头结点</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">removeElements</span><span class="params">(ListNode* head, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        ListNode *dummyHead = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        dummyHead-&gt;next = head;</span><br><span class="line">        ListNode *cur = dummyHead;</span><br><span class="line">        <span class="keyword">while</span>(cur-&gt;next != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cur-&gt;next-&gt;val == val)&#123;</span><br><span class="line">                ListNode *tmp = cur-&gt;next;</span><br><span class="line">                cur-&gt;next = cur-&gt;next-&gt;next;</span><br><span class="line">                <span class="keyword">delete</span> tmp;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                cur =cur-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        head = dummyHead-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> dummyHead;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="设计链表">设计链表</h2><p><a href="https://leetcode.cn/problems/design-linked-list/description/">707. 设计链表 - 力扣（LeetCode）</a></p><ul><li>这道题目设计链表的五个接口：<ul><li>获取链表第index个节点的数值</li><li>在链表的最前面插入一个节点</li><li>在链表的最后面插入一个节点</li><li>在链表第index个节点前面插入一个节点</li><li>删除链表的第index个节点</li></ul></li><li>AC代码（LinkedNode硬是写成ListNode）</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyLinkedList</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">ListNode</span>&#123;</span><br><span class="line">        <span class="type">int</span> val;</span><br><span class="line">        ListNode *next;</span><br><span class="line">        <span class="built_in">ListNode</span>(<span class="type">int</span> x):<span class="built_in">val</span>(x),<span class="built_in">next</span>(<span class="literal">nullptr</span>)&#123;&#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">MyLinkedList</span>() &#123;</span><br><span class="line">        dummyHead = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        List_Size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index &gt; List_Size<span class="number">-1</span> || List_Size &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        ListNode *cur = dummyHead-&gt;next;</span><br><span class="line">        <span class="keyword">while</span>(index --)&#123;</span><br><span class="line">            cur = cur-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cur-&gt;val;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addAtHead</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        ListNode *newNode = <span class="keyword">new</span> <span class="built_in">ListNode</span>(val);</span><br><span class="line">        newNode-&gt;next = dummyHead-&gt;next;</span><br><span class="line">        dummyHead-&gt;next = newNode;</span><br><span class="line">        List_Size++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addAtTail</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        ListNode *newNode = <span class="keyword">new</span> <span class="built_in">ListNode</span>(val);</span><br><span class="line">        ListNode *cur = dummyHead;</span><br><span class="line">        <span class="keyword">while</span>(cur-&gt;next != <span class="literal">NULL</span>)&#123;</span><br><span class="line">            cur = cur-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        cur-&gt;next = newNode;</span><br><span class="line">        List_Size++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addAtIndex</span><span class="params">(<span class="type">int</span> index, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index &gt; List_Size)<span class="comment">//新增元素需要借助头结点</span></span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        <span class="keyword">if</span>(index &lt; <span class="number">0</span>) index = <span class="number">0</span>;<span class="comment">//可删除这行</span></span><br><span class="line">        ListNode *newNode = <span class="keyword">new</span> <span class="built_in">ListNode</span>(val);</span><br><span class="line">        ListNode *cur = dummyHead;</span><br><span class="line">        <span class="keyword">while</span>(index --)&#123;</span><br><span class="line">            cur = cur-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        newNode-&gt;next = cur-&gt;next;</span><br><span class="line">        cur-&gt;next = newNode;</span><br><span class="line">        List_Size++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">deleteAtIndex</span><span class="params">(<span class="type">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index &gt; List_Size<span class="number">-1</span> || List_Size&lt;<span class="number">0</span>)<span class="comment">//删元素不能包括头结点-&gt;index &gt; List_Size-1</span></span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line"></span><br><span class="line">        ListNode *cur = dummyHead;</span><br><span class="line">        <span class="keyword">while</span>(index --)&#123;</span><br><span class="line">            cur = cur-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode *tmp = cur-&gt;next;</span><br><span class="line">        cur-&gt;next = cur-&gt;next-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> tmp;</span><br><span class="line">        tmp = <span class="literal">NULL</span>;</span><br><span class="line">        List_Size--;</span><br><span class="line">    &#125;   </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> List_Size;</span><br><span class="line">    ListNode* dummyHead;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MyLinkedList object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * MyLinkedList* obj = new MyLinkedList();</span></span><br><span class="line"><span class="comment"> * int param_1 = obj-&gt;get(index);</span></span><br><span class="line"><span class="comment"> * obj-&gt;addAtHead(val);</span></span><br><span class="line"><span class="comment"> * obj-&gt;addAtTail(val);</span></span><br><span class="line"><span class="comment"> * obj-&gt;addAtIndex(index,val);</span></span><br><span class="line"><span class="comment"> * obj-&gt;deleteAtIndex(index);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><ul><li>记录爆红</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Line 26: Char 36: runtime error:</span> <span class="string">member</span> <span class="string">access</span> <span class="string">within</span> <span class="string">misaligned</span> <span class="string">address</span> <span class="number">0xbebebebebebebebe</span> <span class="string">for</span> <span class="string">type</span> <span class="string">&#x27;ListNode&#x27;</span><span class="string">,</span> <span class="string">which</span> <span class="string">requires</span> <span class="number">8</span> <span class="string">byte</span> <span class="string">alignment</span> <span class="string">(solution.cpp)</span></span><br><span class="line"><span class="attr">0xbebebebebebebebe: note:</span> <span class="string">pointer</span> <span class="string">points</span> <span class="string">here</span></span><br><span class="line"><span class="string">&lt;memory</span> <span class="string">cannot</span> <span class="string">be</span> <span class="string">printed&gt;</span></span><br><span class="line"><span class="attr">SUMMARY: UndefinedBehaviorSanitizer:</span> <span class="string">undefined-behavior</span> <span class="string">prog_joined.cpp:31:36</span></span><br></pre></td></tr></table></figure><blockquote><p>错误原因：存在未定义行为，具体是成员访问在未对齐的地址上</p></blockquote><blockquote><p>排查：</p><p>MyLinkedList() {</p><p>​    ListNode *dummyHead = new ListNode(0); // 不应该加ListNode</p><p>​    List_Size = 0;</p><p>}</p></blockquote><ul><li>卡哥代码</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyLinkedList</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 定义链表节点结构体</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">LinkedNode</span> &#123;</span><br><span class="line">        <span class="type">int</span> val;</span><br><span class="line">        LinkedNode* next;</span><br><span class="line">        <span class="built_in">LinkedNode</span>(<span class="type">int</span> val):<span class="built_in">val</span>(val), <span class="built_in">next</span>(<span class="literal">nullptr</span>)&#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化链表</span></span><br><span class="line">    <span class="built_in">MyLinkedList</span>() &#123;</span><br><span class="line">        _dummyHead = <span class="keyword">new</span> <span class="built_in">LinkedNode</span>(<span class="number">0</span>); <span class="comment">// 这里定义的头结点 是一个虚拟头结点，而不是真正的链表头结点</span></span><br><span class="line">        _size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取到第index个节点数值，如果index是非法数值直接返回-1， 注意index是从0开始的，第0个节点就是头结点</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt; (_size - <span class="number">1</span>) || index &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        LinkedNode* cur = _dummyHead-&gt;next;</span><br><span class="line">        <span class="keyword">while</span>(index--)&#123; <span class="comment">// 如果--index 就会陷入死循环</span></span><br><span class="line">            cur = cur-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cur-&gt;val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在链表最前面插入一个节点，插入完成后，新插入的节点为链表的新的头结点</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addAtHead</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        LinkedNode* newNode = <span class="keyword">new</span> <span class="built_in">LinkedNode</span>(val);</span><br><span class="line">        newNode-&gt;next = _dummyHead-&gt;next;</span><br><span class="line">        _dummyHead-&gt;next = newNode;</span><br><span class="line">        _size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在链表最后面添加一个节点</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addAtTail</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        LinkedNode* newNode = <span class="keyword">new</span> <span class="built_in">LinkedNode</span>(val);</span><br><span class="line">        LinkedNode* cur = _dummyHead;</span><br><span class="line">        <span class="keyword">while</span>(cur-&gt;next != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">            cur = cur-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        cur-&gt;next = newNode;</span><br><span class="line">        _size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在第index个节点之前插入一个新节点，例如index为0，那么新插入的节点为链表的新头节点。</span></span><br><span class="line">    <span class="comment">// 如果index 等于链表的长度，则说明是新插入的节点为链表的尾结点</span></span><br><span class="line">    <span class="comment">// 如果index大于链表的长度，则返回空</span></span><br><span class="line">    <span class="comment">// 如果index小于0，则在头部插入节点</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addAtIndex</span><span class="params">(<span class="type">int</span> index, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(index &gt; _size) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span>(index &lt; <span class="number">0</span>) index = <span class="number">0</span>;        </span><br><span class="line">        LinkedNode* newNode = <span class="keyword">new</span> <span class="built_in">LinkedNode</span>(val);</span><br><span class="line">        LinkedNode* cur = _dummyHead;</span><br><span class="line">        <span class="keyword">while</span>(index--) &#123;</span><br><span class="line">            cur = cur-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        newNode-&gt;next = cur-&gt;next;</span><br><span class="line">        cur-&gt;next = newNode;</span><br><span class="line">        _size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除第index个节点，如果index 大于等于链表的长度，直接return，注意index是从0开始的</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">deleteAtIndex</span><span class="params">(<span class="type">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= _size || index &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        LinkedNode* cur = _dummyHead;</span><br><span class="line">        <span class="keyword">while</span>(index--) &#123;</span><br><span class="line">            cur = cur -&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        LinkedNode* tmp = cur-&gt;next;</span><br><span class="line">        cur-&gt;next = cur-&gt;next-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> tmp;</span><br><span class="line">        <span class="comment">//delete命令指示释放了tmp指针原本所指的那部分内存，</span></span><br><span class="line">        <span class="comment">//被delete后的指针tmp的值（地址）并非就是NULL，而是随机值。也就是被delete后，</span></span><br><span class="line">        <span class="comment">//如果不再加上一句tmp=nullptr,tmp会成为乱指的野指针</span></span><br><span class="line">        <span class="comment">//如果之后的程序不小心使用了tmp，会指向难以预想的内存空间</span></span><br><span class="line">        tmp=<span class="literal">nullptr</span>;</span><br><span class="line">        _size--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印链表</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">printLinkedList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        LinkedNode* cur = _dummyHead;</span><br><span class="line">        <span class="keyword">while</span> (cur-&gt;next != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            cout &lt;&lt; cur-&gt;next-&gt;val &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">            cur = cur-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> _size;</span><br><span class="line">    LinkedNode* _dummyHead;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="反转链表">反转链表</h2><p><a href="https://leetcode.cn/problems/reverse-linked-list/description/">206.反转链表 - 力扣（LeetCode）</a></p><blockquote><p>思路：改变链表的next指针的指向，直接将链表反转 ，而不用重新定义一个新的链表</p></blockquote><p><img src="https://code-thinking.cdn.bcebos.com/gifs/206.%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8.gif" alt="img"></p><ul><li>双指针法</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        ListNode* tmp ;</span><br><span class="line">        ListNode* cur = head;</span><br><span class="line">        ListNode* pre = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">while</span>(cur)&#123;</span><br><span class="line">            tmp = cur-&gt;next;  <span class="comment">// 保存一下 cur的下一个节点，因为接下来要改变cur-&gt;next</span></span><br><span class="line">            cur-&gt;next = pre; <span class="comment">// 翻转操作</span></span><br><span class="line">            <span class="comment">// 更新pre 和 cur指针 //先更新pre！！</span></span><br><span class="line">            pre = cur;</span><br><span class="line">            cur = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> pre;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="两两交换链表中的节点">两两交换链表中的节点</h2><p><a href="https://leetcode.cn/problems/swap-nodes-in-pairs/description/">24. 两两交换链表中的节点 - 力扣（LeetCode）</a></p><blockquote><p>思路：画图模拟  用两个tmp记录临时节点</p></blockquote><p><img src="https://code-thinking.cdn.bcebos.com/pics/24.%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B91.png" alt=""></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">swapPairs</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        ListNode* dummyHead = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        dummyHead-&gt;next=head;</span><br><span class="line">        ListNode* cur = dummyHead;</span><br><span class="line">        <span class="keyword">while</span>(cur-&gt;next != <span class="literal">nullptr</span> &amp;&amp; cur-&gt;next-&gt;next != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">            ListNode* tmp1 = cur-&gt;next;</span><br><span class="line">            ListNode* tmp2 = cur-&gt;next-&gt;next-&gt;next;</span><br><span class="line"></span><br><span class="line">            cur-&gt;next = cur-&gt;next-&gt;next; <span class="comment">//step1</span></span><br><span class="line">            cur-&gt;next-&gt;next = tmp1;      <span class="comment">//step2</span></span><br><span class="line">            cur-&gt;next-&gt;next-&gt;next = tmp2;<span class="comment">//step3</span></span><br><span class="line"></span><br><span class="line">            cur = cur-&gt;next-&gt;next;<span class="comment">// cur移动两位，准备下一轮交换</span></span><br><span class="line">        &#125;</span><br><span class="line">        ListNode* res = dummyHead-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> dummyHead;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="删除链表的倒数第-N-个结点">删除链表的倒数第 N 个结点</h2><p><a href="https://leetcode.cn/problems/remove-nth-node-from-end-of-list/description/">19. 删除链表的倒数第 N 个结点 - 力扣（LeetCode）</a></p><blockquote><p>思路： 双指针 画图模拟</p></blockquote><ul><li>定义fast指针和slow指针，初始值为虚拟头结点，如图：</li></ul><p><img src="https://code-thinking.cdn.bcebos.com/pics/19.%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACN%E4%B8%AA%E8%8A%82%E7%82%B9.png" alt="img"></p><ul><li>fast首先走n + 1步 ，为什么是n+1呢，因为只有这样同时移动的时候slow才能指向删除节点的上一个节点（方便做删除操作），如图： <img src="https://code-thinking.cdn.bcebos.com/pics/19.%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACN%E4%B8%AA%E8%8A%82%E7%82%B91.png" alt="img"></li><li>fast和slow同时移动，直到fast指向末尾，如题： <img src="https://code-thinking.cdn.bcebos.com/pics/19.%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACN%E4%B8%AA%E8%8A%82%E7%82%B92.png" alt="img"></li><li>删除slow指向的下一个节点，如图： <img src="https://code-thinking.cdn.bcebos.com/pics/19.%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACN%E4%B8%AA%E8%8A%82%E7%82%B93.png" alt="img"></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">removeNthFromEnd</span><span class="params">(ListNode* head, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        ListNode* dummyHead = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        dummyHead-&gt;next = head;</span><br><span class="line">        ListNode* i = dummyHead;</span><br><span class="line">        ListNode* j = dummyHead;</span><br><span class="line">        <span class="keyword">while</span>(n-- &amp;&amp; i-&gt;next != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">            i = i-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        i = i-&gt;next;<span class="comment">// i再提前走一步，因为需要让j指向删除节点的上一个节点</span></span><br><span class="line">        <span class="keyword">while</span>(i != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">            i = i-&gt;next;</span><br><span class="line">            j = j-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        j -&gt; next = j-&gt;next-&gt;next;</span><br><span class="line">        <span class="keyword">return</span> dummyHead-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>tip: return  dummyHead-&gt;next 而不能直接return head</p><p>直接return head  当链表为空时会报错！</p></blockquote><h2 id="链表相交">链表相交</h2><p><a href="https://leetcode.cn/problems/intersection-of-two-linked-lists-lcci/description/">面试题 02.07. 链表相交 - 力扣（LeetCode）</a></p><blockquote><p>思路：</p><p>考虑到重复的链表节点一定一样长，所以只需要从后往前保留一样长度即可</p><ol><li><p>curA指向链表A的头结点，curB指向链表B的头结点</p></li><li><p>求出链表长度，计算差值，然后让curA移动到，和curB 末尾对齐的位置</p></li></ol></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode *<span class="title">getIntersectionNode</span><span class="params">(ListNode *headA, ListNode *headB)</span> </span>&#123;</span><br><span class="line">        ListNode* cur1 = headA;</span><br><span class="line">        ListNode* cur2 = headB;</span><br><span class="line">        <span class="comment">//计算长度</span></span><br><span class="line">        <span class="type">int</span> len1 = <span class="number">0</span> ,len2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(cur1 != <span class="literal">NULL</span>)&#123;</span><br><span class="line">            len1++;</span><br><span class="line">            cur1 = cur1-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(cur2 != <span class="literal">NULL</span>)&#123;</span><br><span class="line">            len2++;</span><br><span class="line">            cur2 = cur2-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//重置当前结点</span></span><br><span class="line">        cur1 = headA;</span><br><span class="line">        cur2 = headB;</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">if</span>(len2&gt;len1)&#123;</span><br><span class="line">            <span class="built_in">swap</span>(cur1,cur2);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//计算长度差</span></span><br><span class="line">        <span class="type">int</span> len  = <span class="built_in">abs</span>(len1-len2);</span><br><span class="line">        <span class="comment">// 让cur1和cur2在同一起点上（末尾位置对齐）</span></span><br><span class="line">        <span class="keyword">while</span>(len--)&#123;</span><br><span class="line">            cur1 = cur1-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(cur1 != <span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cur1 == cur2)<span class="comment">//交点不是数值相等，而是指针相等</span></span><br><span class="line">                <span class="keyword">return</span> cur1;</span><br><span class="line">            cur1 = cur1-&gt;next;</span><br><span class="line">            cur2 = cur2-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><p>交点不是数值相等，而是指针相等!</p><p>最开始这么写 第一个点过不去！</p><pre><code>  while(cur1 != NULL)&#123;      if(cur1-&gt;val == cur2-&gt;val)          return cur1;      cur1 = cur1-&gt;next;      cur2 = cur2-&gt;next;  &#125;</code></pre></li></ul><h2 id="环形链表II">环形链表II</h2><p><a href="https://leetcode.cn/problems/linked-list-cycle-ii/description/">142. 环形链表 II - 力扣（LeetCode）</a></p><blockquote><p>思路 <a href="https://www.programmercarl.com/0142.%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8II.html">代码随想录</a></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode *<span class="title">detectCycle</span><span class="params">(ListNode *head)</span> </span>&#123;</span><br><span class="line">        ListNode* fast = head;</span><br><span class="line">        ListNode* slow = head;</span><br><span class="line">        <span class="keyword">while</span>(fast != <span class="literal">NULL</span> &amp;&amp; fast-&gt;next != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">            fast = fast-&gt;next-&gt;next;</span><br><span class="line">            <span class="comment">// 快慢指针相遇，此时从head 和 相遇点，同时查找直至相遇</span></span><br><span class="line">            <span class="keyword">if</span> (slow == fast) &#123;</span><br><span class="line">                ListNode* index1 = fast;</span><br><span class="line">                ListNode* index2 = head;</span><br><span class="line">                <span class="keyword">while</span> (index1 != index2) &#123;</span><br><span class="line">                    index1 = index1-&gt;next;</span><br><span class="line">                    index2 = index2-&gt;next;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> index2; <span class="comment">// 返回环的入口</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>SET集合</li></ul><blockquote><p>遍历链表，第一次遇到就把结点放进集合（注意放的是地址不是值），后面如果再次遍历到说明有环，返回遍历到的第一个重复结点的位置就可以了，如果循环能够结束说明有空指针域（即一定无环），因此最后返回NULL就可以了。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode *<span class="title">detectCycle</span><span class="params">(ListNode *head)</span> </span>&#123;</span><br><span class="line">        ListNode* cur = head;</span><br><span class="line">        set&lt;ListNode*&gt; s;</span><br><span class="line">        <span class="keyword">while</span>(cur)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s.<span class="built_in">find</span>(cur) != s.<span class="built_in">end</span>())</span><br><span class="line">                <span class="keyword">return</span> cur;</span><br><span class="line">            s.<span class="built_in">insert</span>(cur);</span><br><span class="line">            cur = cur-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="哈希表">哈希表</h1><h2 id="哈希表理论基础">哈希表理论基础</h2><blockquote><p><a href="https://www.programmercarl.com/%E5%93%88%E5%B8%8C%E8%A1%A8%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80.html#%E5%93%88%E5%B8%8C%E8%A1%A8">代码随想录-哈希表理论基础</a></p></blockquote><blockquote><p><strong>当我们遇到了要快速判断一个元素是否出现集合里的时候，就要考虑哈希法</strong>。</p></blockquote><h2 id="有效的字母异位词">有效的字母异位词</h2><p><a href="https://leetcode.cn/problems/valid-anagram/description/">242. 有效的字母异位词 - 力扣（LeetCode）</a></p><blockquote><p>思路：数组存储每个字母出现的次数，最后扣减</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isAnagram</span><span class="params">(string s, string t)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> flag[<span class="number">30</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i&lt;s.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            flag[s[i]-<span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ; i&lt;t.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            flag[t[i]-<span class="string">&#x27;a&#x27;</span>]--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i&lt;<span class="number">26</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(flag[i] != <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="字母异位词分组">字母异位词分组</h2><p><a href="https://leetcode.cn/problems/group-anagrams/description/">49. 字母异位词分组 - 力扣（LeetCode）</a></p><blockquote><p>思路：</p><p>特征分类-&gt;哈希表</p><p>特征分类：aab，aba，baa从小到大排序可以得到同一个字符串aab；而对于abb，bab来说排序后为abb，不等于aab；所以当且仅当两个字符串排序后一样，这样两个字符串才能分到同一组</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;string&gt;&gt; <span class="built_in">groupAnagrams</span>(vector&lt;string&gt;&amp; strs) &#123;</span><br><span class="line">        unordered_map&lt;string,vector&lt;string&gt;&gt; mp;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> s:strs)&#123;</span><br><span class="line">            string sort_s = s;</span><br><span class="line">            <span class="built_in">sort</span>(sort_s.<span class="built_in">begin</span>(),sort_s.<span class="built_in">end</span>());</span><br><span class="line">            mp[sort_s].<span class="built_in">push_back</span>(s);</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;vector&lt;string&gt;&gt; ans;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> t : mp)&#123;</span><br><span class="line">            ans.<span class="built_in">push_back</span>(t.second);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="找到字符串中所有字母异位词">找到字符串中所有字母异位词</h2><p><a href="https://leetcode.cn/problems/find-all-anagrams-in-a-string/description/">438. 找到字符串中所有字母异位词 - 力扣（LeetCode）</a></p><blockquote><p>思路：<a href="https://leetcode.cn/problems/find-all-anagrams-in-a-string/solutions/9749/hua-dong-chuang-kou-tong-yong-si-xiang-jie-jue-zi-/">438. 找到字符串中所有字母异位词 - 力扣（LeetCode）</a></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">findAnagrams</span><span class="params">(string s, string p)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">char</span>,<span class="type">int</span>&gt;need ,widow;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:p)need[c]++;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> l,r = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> valid = <span class="number">0</span>;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">        <span class="keyword">while</span>(r&lt;s.<span class="built_in">size</span>())&#123;</span><br><span class="line">            <span class="type">char</span> c =  s[r];</span><br><span class="line">            r++;</span><br><span class="line">            <span class="keyword">if</span>(need.<span class="built_in">count</span>(c))&#123;</span><br><span class="line">                widow[c]++;</span><br><span class="line">                <span class="keyword">if</span>(widow[c] == need[c])</span><br><span class="line">                    valid++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(r - l &gt;= p.<span class="built_in">size</span>())&#123;</span><br><span class="line">                <span class="keyword">if</span>(valid == need.<span class="built_in">size</span>())</span><br><span class="line">                    ans.<span class="built_in">push_back</span>(l);</span><br><span class="line">                <span class="type">char</span> d = s[l];</span><br><span class="line">                l++;</span><br><span class="line">                <span class="keyword">if</span>(need.<span class="built_in">count</span>(d))&#123;</span><br><span class="line">                    <span class="keyword">if</span>(widow[d] == need[d])</span><br><span class="line">                        valid--;</span><br><span class="line">                    widow[d]--;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="两个数组的交集">两个数组的交集</h2><p><a href="https://leetcode.cn/problems/intersection-of-two-arrays/description/">349. 两个数组的交集 - 力扣（LeetCode）</a></p><blockquote><p>思路：</p><p>输出去重  SET</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">intersection</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, vector&lt;<span class="type">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">        unordered_set&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">        <span class="comment">//先用set去重</span></span><br><span class="line">        <span class="function">unordered_set&lt;<span class="type">int</span>&gt; <span class="title">flag</span><span class="params">(nums1.begin(),nums1.end())</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> num:nums2)&#123;</span><br><span class="line">            <span class="keyword">if</span>(flag.<span class="built_in">find</span>(num) != flag.<span class="built_in">end</span>())</span><br><span class="line">                ans.<span class="built_in">insert</span>(num);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(ans.<span class="built_in">begin</span>(),ans.<span class="built_in">end</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="快乐数">快乐数</h2><p><a href="https://leetcode.cn/problems/happy-number/description/">202. 快乐数 - 力扣（LeetCode）</a></p><blockquote><p>首先要计算出sum，用set记录sum，对于重复出现的sum 为进入无限循环返回false</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getsum</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(n)&#123;</span><br><span class="line">            sum+=(n%<span class="number">10</span>)*(n%<span class="number">10</span>);</span><br><span class="line">            n/=<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isHappy</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        unordered_set&lt;<span class="type">int</span>&gt; st;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="type">int</span> sum = <span class="built_in">getsum</span>(n);</span><br><span class="line">            <span class="keyword">if</span>(sum == <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(st.<span class="built_in">find</span>(sum)!= st.<span class="built_in">end</span>())&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">//之前出现过  会一直循环下去 跳出false</span></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                st.<span class="built_in">insert</span>(sum);</span><br><span class="line">                n = sum;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="两数之和">两数之和</h2><p><a href="https://leetcode.cn/problems/two-sum/description/">1. 两数之和 - 力扣（LeetCode）</a></p><blockquote><p>题干说：请你在该数组中找出 <strong>和为目标值</strong> <em><code>target</code></em> 的那 <strong>两个</strong> 整数，并返回下标</p><p>也就是说只会有一组答案出现，想到用hash</p><p>因为既要返回值，又要返回值的下标，所以采用map</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">twoSum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; mp;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ; i&lt;nums.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">auto</span> it = mp.<span class="built_in">find</span>(target - nums[i]);<span class="comment">//找到符合条件的值</span></span><br><span class="line">            <span class="keyword">if</span>(it!= mp.<span class="built_in">end</span>())<span class="comment">//遍历是否在map中</span></span><br><span class="line">                <span class="keyword">return</span> &#123;it-&gt;second,i&#125;;</span><br><span class="line">              mp.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">int</span>&gt;(nums[i], i)); <span class="comment">//将元素和下标存入map</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="四数相加II">四数相加II</h2><p><a href="https://leetcode.cn/problems/4sum-ii/description/">454. 四数相加 II - 力扣（LeetCode）</a></p><blockquote><p><strong>题目是四个独立的数组，只要找到A[i] + B[j] + C[k] + D[l] = 0就可以，不用考虑有重复的四个元素相加等于0的情况</strong></p></blockquote><blockquote><ol><li>首先定义 一个unordered_map，key放a和b两数之和，value 放a和b两数之和出现的次数。</li><li>遍历大A和大B数组，统计两个数组元素之和，和出现的次数，放到map中。</li><li>定义int变量count，用来统计 a+b+c+d = 0 出现的次数。</li><li>在遍历大C和大D数组，找到如果 0-(c+d) 在map中出现过的话，就用count把map中key对应的value也就是出现次数统计出来。</li><li>最后返回统计值 count 就可以了</li></ol></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">fourSumCount</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, vector&lt;<span class="type">int</span>&gt;&amp; nums2, vector&lt;<span class="type">int</span>&gt;&amp; nums3, vector&lt;<span class="type">int</span>&gt;&amp; nums4)</span> </span>&#123;</span><br><span class="line">        map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; mp;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> a:nums1)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> b:nums2)&#123;</span><br><span class="line">                mp[a+b]++;<span class="comment">//存放a+b值出现的次数</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> c: nums3)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> d:nums4)&#123;</span><br><span class="line">                <span class="keyword">if</span>(mp.<span class="built_in">find</span>(<span class="number">0</span>-(c+d)) != mp.<span class="built_in">end</span>())</span><br><span class="line">                    <span class="comment">//ans++; 想当然用ans++,</span></span><br><span class="line">                    ans += mp[<span class="number">0</span>-(c+d)]; <span class="comment">//统计的是a+b出现的次数！</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="赎金信">赎金信</h2><p><a href="https://leetcode.cn/problems/ransom-note/">383. 赎金信 - 力扣（LeetCode）</a></p><blockquote><p>从 str2 找 str1 所以要先记录str2</p><p>特判 str1&gt;str2 返回false</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">canConstruct</span><span class="params">(string ransomNote, string magazine)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//遍历 记录数量</span></span><br><span class="line">        <span class="type">int</span> flag[<span class="number">26</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="comment">//特判 str1&gt;str2 返回false</span></span><br><span class="line">        <span class="keyword">if</span>(ransomNote.<span class="built_in">size</span>()&gt;magazine.<span class="built_in">size</span>())<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">//遍历</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span> ; i&lt;magazine.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            flag[magazine[i]-<span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;ransomNote.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            flag[ransomNote[i]-<span class="string">&#x27;a&#x27;</span>]--;</span><br><span class="line">            <span class="keyword">if</span>(flag[ransomNote[i]-<span class="string">&#x27;a&#x27;</span>] &lt; <span class="number">0</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="总结-2">总结</h2><p><strong>一般来说哈希表都是用来快速判断一个元素是否出现集合里</strong>。</p><p>三种哈希结构：</p><ul><li>数组</li><li>set（集合）</li><li>map（映射）</li></ul><blockquote><p>考虑好什么情况下用数组 ，什么情况下用set/map，选择合适的！</p></blockquote><h1 id="字符串">字符串</h1><h2 id="反转字符串">反转字符串</h2><p><a href="https://leetcode.cn/problems/reverse-string/description/">344. 反转字符串 - 力扣（LeetCode）</a></p><blockquote><p>双指针</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reverseString</span><span class="params">(vector&lt;<span class="type">char</span>&gt;&amp; s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>,j = s.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;j)&#123;</span><br><span class="line">            <span class="built_in">swap</span>(s[i++],s[j--]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="反转字符串II">反转字符串II</h2><p><a href="https://leetcode.cn/problems/reverse-string-ii/description/">541. 反转字符串 II - 力扣（LeetCode）</a></p><blockquote><p><strong>当需要固定规律一段一段去处理字符串的时候，要想想在在for循环的表达式上做做文章</strong>   对于这道题而言，将 i 的位置每次移动 2k 即可</p></blockquote><blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 每隔 2k 个字符的前 k 个字符进行反转</span></span><br><span class="line"><span class="comment">// 2. 剩余字符小于 2k 但大于或等于 k 个，则反转前 k 个字符</span></span><br><span class="line"><span class="comment">// 3. 剩余字符少于 k 个，则将剩余字符全部反转。</span></span><br></pre></td></tr></table></figure></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">reverseStr</span><span class="params">(string s, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ; i&lt; s.<span class="built_in">size</span>();i+=<span class="number">2</span>*k)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i+k &lt;= s.<span class="built_in">size</span>())&#123;</span><br><span class="line">                <span class="built_in">reverse</span>(s.<span class="built_in">begin</span>()+i,s.<span class="built_in">begin</span>()+i+k);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">reverse</span>(s.<span class="built_in">begin</span>()+i,s.<span class="built_in">end</span>());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="替换数字">替换数字</h2><p><a href="https://kamacoder.com/problempage.php?pid=1064">54. 替换数字 (kamacoder.com)</a></p><blockquote><p>最开始的思路：就是从前往后遍历，遇到数字就替换，但在一想，后面的所有数字都要重新安排 ，时间复杂度为O(n^2)  会TLE</p><p>卡哥给了我新思路（先扩充字符串大小，利用双指针从后往前替换），真的巧妙这方法</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">   </span><br><span class="line">    string s;</span><br><span class="line">    cin&gt;&gt;s;</span><br><span class="line">    <span class="type">int</span> index = s.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;<span class="comment">//统计数字个数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="comment">/* code */</span></span><br><span class="line">        <span class="keyword">if</span>(s[i]&gt;=<span class="string">&#x27;0&#x27;</span> &amp;&amp; s[i]&lt;=<span class="string">&#x27;9&#x27;</span>)cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">    s.<span class="built_in">resize</span>(s.<span class="built_in">size</span>()+ cnt*<span class="number">5</span>);</span><br><span class="line">    <span class="type">int</span> NewIndex = s.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">    <span class="comment">//替换</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = index; i &gt;=<span class="number">0</span> ;i-- )&#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i]&gt;=<span class="string">&#x27;0&#x27;</span> &amp;&amp; s[i] &lt;= <span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">            s[NewIndex--] = <span class="string">&#x27;r&#x27;</span>;</span><br><span class="line">            s[NewIndex--] = <span class="string">&#x27;e&#x27;</span>;</span><br><span class="line">            s[NewIndex--] = <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">            s[NewIndex--] = <span class="string">&#x27;m&#x27;</span>;</span><br><span class="line">            s[NewIndex--] = <span class="string">&#x27;u&#x27;</span>;</span><br><span class="line">            s[NewIndex--] = <span class="string">&#x27;n&#x27;</span>; </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            s[NewIndex--] = s[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;s&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="翻转字符串里的单词">翻转字符串里的单词</h2><p><a href="https://leetcode.cn/problems/reverse-words-in-a-string/description/">151. 反转字符串中的单词 - 力扣（LeetCode）</a></p><blockquote><ul><li>移除多余空格 (双指针 快慢指针)</li><li>将整个字符串反转</li><li>将每个单词反转</li></ul></blockquote><ul><li>这道题要多练习下<ul><li>出错点：  removespace(string s)  传的是地址而不是值</li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">removespace</span><span class="params">(string&amp; s)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> slow = <span class="number">0</span>; </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i] != <span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(slow != <span class="number">0</span>) s[slow++] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">                <span class="keyword">while</span>(i&lt;s.<span class="built_in">size</span>() &amp;&amp; s[i] != <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">                    s[slow++] = s[i++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        s.<span class="built_in">resize</span>(slow);    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reverse</span><span class="params">(string&amp; s, <span class="type">int</span> start, <span class="type">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = start, j = end; i &lt; j; i++, j--) &#123;</span><br><span class="line">            <span class="built_in">swap</span>(s[i], s[j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">string <span class="title">reverseWords</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">removespace</span>(s);</span><br><span class="line">        <span class="built_in">reverse</span>(s,<span class="number">0</span>,s.<span class="built_in">size</span>()<span class="number">-1</span>);</span><br><span class="line">        <span class="type">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span> ; i &lt;=s.<span class="built_in">size</span>();++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i == s.<span class="built_in">size</span>() || s[i] == <span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">                <span class="built_in">reverse</span>(s,index,i<span class="number">-1</span>);</span><br><span class="line">                index = i+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">               </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>各部分函数注释版</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 版本二 </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">removeExtraSpaces</span><span class="params">(string&amp; s)</span> </span>&#123;<span class="comment">//去除所有空格并在相邻单词之间添加空格, 快慢指针。</span></span><br><span class="line">    <span class="type">int</span> slow = <span class="number">0</span>;   <span class="comment">//整体思想参考https://programmercarl.com/0027.移除元素.html</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); ++i) &#123; <span class="comment">//</span></span><br><span class="line">        <span class="keyword">if</span> (s[i] != <span class="string">&#x27; &#x27;</span>) &#123; <span class="comment">//遇到非空格就处理，即删除所有空格。</span></span><br><span class="line">            <span class="keyword">if</span> (slow != <span class="number">0</span>) s[slow++] = <span class="string">&#x27; &#x27;</span>; <span class="comment">//手动控制空格，给单词之间添加空格。slow != 0说明不是第一个单词，需要在单词前添加空格。</span></span><br><span class="line">            <span class="keyword">while</span> (i &lt; s.<span class="built_in">size</span>() &amp;&amp; s[i] != <span class="string">&#x27; &#x27;</span>) &#123; <span class="comment">//补上该单词，遇到空格说明单词结束。</span></span><br><span class="line">                s[slow++] = s[i++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    s.<span class="built_in">resize</span>(slow); <span class="comment">//slow的大小即为去除多余空格后的大小。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 反转字符串s中左闭右闭的区间[start, end]</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">reverse</span><span class="params">(string&amp; s, <span class="type">int</span> start, <span class="type">int</span> end)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = start, j = end; i &lt; j; i++, j--) &#123;</span><br><span class="line">        <span class="built_in">swap</span>(s[i], s[j]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reverse</span><span class="params">(string&amp; s, <span class="type">int</span> start, <span class="type">int</span> end)</span></span>&#123; <span class="comment">//翻转，区间写法：左闭右闭 []</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = start, j = end; i &lt; j; i++, j--) &#123;</span><br><span class="line">            <span class="built_in">swap</span>(s[i], s[j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">removeExtraSpaces</span><span class="params">(string&amp; s)</span> </span>&#123;<span class="comment">//去除所有空格并在相邻单词之间添加空格, 快慢指针。</span></span><br><span class="line">        <span class="type">int</span> slow = <span class="number">0</span>;   <span class="comment">//整体思想参考https://programmercarl.com/0027.移除元素.html</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); ++i) &#123; <span class="comment">//</span></span><br><span class="line">            <span class="keyword">if</span> (s[i] != <span class="string">&#x27; &#x27;</span>) &#123; <span class="comment">//遇到非空格就处理，即删除所有空格。</span></span><br><span class="line">                <span class="keyword">if</span> (slow != <span class="number">0</span>) s[slow++] = <span class="string">&#x27; &#x27;</span>; <span class="comment">//手动控制空格，给单词之间添加空格。slow != 0说明不是第一个单词，需要在单词前添加空格。</span></span><br><span class="line">                <span class="keyword">while</span> (i &lt; s.<span class="built_in">size</span>() &amp;&amp; s[i] != <span class="string">&#x27; &#x27;</span>) &#123; <span class="comment">//补上该单词，遇到空格说明单词结束。</span></span><br><span class="line">                    s[slow++] = s[i++];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        s.<span class="built_in">resize</span>(slow); <span class="comment">//slow的大小即为去除多余空格后的大小。</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">string <span class="title">reverseWords</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">removeExtraSpaces</span>(s); <span class="comment">//去除多余空格，保证单词之间之只有一个空格，且字符串首尾没空格。</span></span><br><span class="line">        <span class="built_in">reverse</span>(s, <span class="number">0</span>, s.<span class="built_in">size</span>() - <span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> start = <span class="number">0</span>; <span class="comment">//removeExtraSpaces后保证第一个单词的开始下标一定是0。</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= s.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == s.<span class="built_in">size</span>() || s[i] == <span class="string">&#x27; &#x27;</span>) &#123; <span class="comment">//到达空格或者串尾，说明一个单词结束。进行翻转。</span></span><br><span class="line">                <span class="built_in">reverse</span>(s, start, i - <span class="number">1</span>); <span class="comment">//翻转，注意是左闭右闭 []的翻转。</span></span><br><span class="line">                start = i + <span class="number">1</span>; <span class="comment">//更新下一个单词的开始下标start</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="右旋字符串">右旋字符串</h2><p><a href="https://kamacoder.com/problempage.php?pid=1065">55. 右旋字符串 (kamacoder.com)</a></p><blockquote><p>翻转再翻转，划分好区间</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="type">int</span> n;</span><br><span class="line">    string s;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;s;</span><br><span class="line">   <span class="built_in">reverse</span>(s.<span class="built_in">begin</span>(),s.<span class="built_in">end</span>());</span><br><span class="line">   <span class="built_in">reverse</span>(s.<span class="built_in">begin</span>(),s.<span class="built_in">begin</span>()+n);</span><br><span class="line">   <span class="built_in">reverse</span>(s.<span class="built_in">begin</span>()+n,s.<span class="built_in">end</span>());</span><br><span class="line">    cout&lt;&lt;s&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>拓展  剑指 Offer 58 - II. 左旋转字符串</li></ul><p><a href="https://leetcode.cn/problems/zuo-xuan-zhuan-zi-fu-chuan-lcof/description/">LCR 182. 动态口令 - 力扣（LeetCode）</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">dynamicPassword</span><span class="params">(string password, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">reverse</span>(password.<span class="built_in">begin</span>(),password.<span class="built_in">begin</span>()+target);</span><br><span class="line">        <span class="built_in">reverse</span>(password.<span class="built_in">begin</span>()+target,password.<span class="built_in">end</span>());</span><br><span class="line">        <span class="built_in">reverse</span>(password.<span class="built_in">begin</span>(),password.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="实现-strStr">实现 strStr()</h2><p><a href="https://leetcode.cn/problems/find-the-index-of-the-first-occurrence-in-a-string/description/">28. 找出字符串中第一个匹配项的下标 - 力扣（LeetCode）</a></p><ul><li>暴力实现</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">strStr</span><span class="params">(string haystack, string needle)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> a = haystack.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> b = needle.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i&lt;=a-b;i++)&#123;</span><br><span class="line">            <span class="type">int</span> j = i, k = <span class="number">0</span>;<span class="comment">//k用来记录匹配字串长度</span></span><br><span class="line">            <span class="keyword">while</span>(k&lt;b &amp;&amp;haystack[j] == needle[k])&#123;</span><br><span class="line">                j++;</span><br><span class="line">                k++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(k == b)<span class="keyword">return</span> i;<span class="comment">//长度相等返回首项index</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>KMP</li></ul><blockquote><p><a href="https://programmercarl.com/0028.%E5%AE%9E%E7%8E%B0strStr.html#%E7%AE%97%E6%B3%95%E5%85%AC%E5%BC%80%E8%AF%BE">代码随想录 (programmercarl.com)</a></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">getNext</span><span class="params">(<span class="type">int</span>* next, <span class="type">const</span> string&amp; s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> j = <span class="number">-1</span>;</span><br><span class="line">        next[<span class="number">0</span>] = j;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; s.<span class="built_in">size</span>(); i++) &#123; <span class="comment">// 注意i从1开始</span></span><br><span class="line">            <span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; s[i] != s[j + <span class="number">1</span>]) &#123; <span class="comment">// 前后缀不相同了</span></span><br><span class="line">                j = next[j]; <span class="comment">// 向前回退</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (s[i] == s[j + <span class="number">1</span>]) &#123; <span class="comment">// 找到相同的前后缀</span></span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            next[i] = j; <span class="comment">// 将j（前缀的长度）赋给next[i]</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">strStr</span><span class="params">(string haystack, string needle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (needle.<span class="built_in">size</span>() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">next</span><span class="params">(needle.size())</span></span>;</span><br><span class="line"><span class="built_in">getNext</span>(&amp;next[<span class="number">0</span>], needle);</span><br><span class="line">        <span class="type">int</span> j = <span class="number">-1</span>; <span class="comment">// // 因为next数组里记录的起始位置为-1</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; haystack.<span class="built_in">size</span>(); i++) &#123; <span class="comment">// 注意i就从0开始</span></span><br><span class="line">            <span class="keyword">while</span>(j &gt;= <span class="number">0</span> &amp;&amp; haystack[i] != needle[j + <span class="number">1</span>]) &#123; <span class="comment">// 不匹配</span></span><br><span class="line">                j = next[j]; <span class="comment">// j 寻找之前匹配的位置</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (haystack[i] == needle[j + <span class="number">1</span>]) &#123; <span class="comment">// 匹配，j和i同时向后移动</span></span><br><span class="line">                j++; <span class="comment">// i的增加在for循环里</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (j == (needle.<span class="built_in">size</span>() - <span class="number">1</span>) ) &#123; <span class="comment">// 文本串s里出现了模式串t</span></span><br><span class="line">                <span class="keyword">return</span> (i - needle.<span class="built_in">size</span>() + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="重复的子字符串">重复的子字符串</h2><p><a href="https://leetcode.cn/problems/repeated-substring-pattern/description/">459. 重复的子字符串 - 力扣（LeetCode）</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">repeatedSubstringPattern</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        string t = s + s;</span><br><span class="line">        t.<span class="built_in">erase</span>(t.<span class="built_in">begin</span>()); t.<span class="built_in">erase</span>(t.<span class="built_in">end</span>() - <span class="number">1</span>); <span class="comment">// 掐头去尾</span></span><br><span class="line">        <span class="keyword">if</span> (t.<span class="built_in">find</span>(s) != std::string::npos) <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// r</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="双指针">双指针</h1><blockquote><p>卡哥双指针章节的部分题目都出现在了其他以往章节里，那些题目这里就不写了</p></blockquote><h2 id="三数之和">三数之和</h2><p><a href="https://leetcode.cn/problems/3sum/description/">15. 三数之和 - 力扣（LeetCode）</a></p><ul><li>双指针解法（更适合，易于理解）</li></ul><blockquote><p>大致思路：</p><ol><li><strong>先对数组进行排序</strong>！！！！！</li><li>循环遍历，将<code>i -&gt; 0</code>,<code>left -&gt; i+1</code>,<code>right -&gt; nums.size()-1</code></li><li>如何移动指针<ol><li>如果nums[i] + nums[left] + nums[right] &gt; 0 就说明 此时三数之和大了，因为数组是排序后了，所以right下标就应该向左移动（事先排过序了），这样才能让三数之和小一些。</li><li>如果 nums[i] + nums[left] + nums[right] &lt; 0 说明 此时 三数之和小了，left 就向右移动，才能让三数之和大一些，直到left与right相遇为止。</li></ol></li></ol></blockquote><blockquote><p>重点在于   <strong>如何去重</strong></p><p>对于<code>nums[i]</code>来说：</p><p>是去判断<code>nums[i] == nums[i+1]</code>,还是判断<code>nums[i] == nums[i-1]</code></p><p><code>nums[i] == nums[i+1]</code>,会和nums[left]产生冲突，会去掉结果集中的内容，如{-1，-1，2}，所以我们选择<code>nums[i] == nums[i-1]</code></p><p>那left和right指针也是相同道理</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">threeSum</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(),nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i&lt; nums.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(nums[i]&gt;<span class="number">0</span>)<span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> left = i+<span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> right = nums.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(i&gt;<span class="number">0</span> &amp;&amp; nums[i] == nums[i<span class="number">-1</span>])<span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(nums[i]+nums[left]+nums[right]&gt;<span class="number">0</span>)right--;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(nums[i]+nums[left]+nums[right]&lt;<span class="number">0</span>)left++;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                res.<span class="built_in">push_back</span>(vector&lt;<span class="type">int</span>&gt;&#123;nums[i],nums[left],nums[right]&#125;);</span><br><span class="line">                <span class="comment">// 去重逻辑应该放在找到一个三元组之后，对b 和 c去重</span></span><br><span class="line">                <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[right] == nums[right - <span class="number">1</span>]) right--;</span><br><span class="line">                <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[left] == nums[left + <span class="number">1</span>]) left++;</span><br><span class="line">                right--;</span><br><span class="line">                left++;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="四数之和">四数之和</h2><p><a href="https://leetcode.cn/problems/4sum/description/">18. 四数之和 - 力扣（LeetCode）</a></p><blockquote><p>思路</p><p>和三数之和一样，三层循环，固定<code>nums[k]+nums[i]</code>,移动指针寻找符合条件的<code>nums[left]</code>、<code>nums[right]</code></p><p>但要注意target是随机值，所以剪枝的时候要重新特判 ;</p><p><code>nums[k] + nums[i] + nums[left] + nums[right] &gt; target</code> 会溢出,开 LONG</p><p>还有千万别忘了<strong>先排序!!!</strong></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">fourSum</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(),nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>; k &lt; nums.<span class="built_in">size</span>();k++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[k] &gt;target &amp;&amp; nums[k] &gt;=<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">if</span>(k&gt;<span class="number">0</span> &amp;&amp; nums[k] == nums[k<span class="number">-1</span>])<span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = k+<span class="number">1</span> ; i&lt;nums.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[k]+nums[i] &gt; target &amp;&amp; nums[k]+nums[i] &gt;=<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">if</span>(i &gt; k+<span class="number">1</span> &amp;&amp; nums[i] == nums[i<span class="number">-1</span>])<span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">                <span class="type">int</span> left = i+<span class="number">1</span>;</span><br><span class="line">                <span class="type">int</span> right = nums.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">                <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">                    <span class="keyword">if</span>((<span class="type">long</span>)nums[k]+nums[i]+nums[left]+nums[right]&gt;target)right--;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>((<span class="type">long</span>)nums[k]+nums[i]+nums[left]+nums[right]&lt;target)left++;</span><br><span class="line">                    <span class="keyword">else</span>&#123;</span><br><span class="line">                        res.<span class="built_in">push_back</span>(vector&lt;<span class="type">int</span>&gt; &#123;nums[k],nums[i],nums[left],nums[right]&#125;);</span><br><span class="line">                        <span class="keyword">while</span>(left&lt;right &amp;&amp; nums[left] == nums[left+<span class="number">1</span>])left++;</span><br><span class="line">                        <span class="keyword">while</span>(left&lt;right &amp;&amp; nums[right] == nums[right<span class="number">-1</span>])right--;</span><br><span class="line">                        left++;</span><br><span class="line">                        right--;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">           </span><br><span class="line">        &#125;</span><br><span class="line">         <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="栈与队列">栈与队列</h1><h2 id="用栈实现队列">用栈实现队列</h2><p><a href="https://leetcode.cn/problems/implement-queue-using-stacks/description/">232. 用栈实现队列 - 力扣（LeetCode）</a></p><blockquote><p>输入栈  输出栈  ，pop的时候要注意一下</p></blockquote><p><img src="https://code-thinking.cdn.bcebos.com/gifs/232.%E7%94%A8%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97%E7%89%88%E6%9C%AC2.gif" alt="232.用栈实现队列版本2"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyQueue</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; stIn;</span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; stOut;</span><br><span class="line">    <span class="comment">/** Initialize your data structure here. */</span></span><br><span class="line">    <span class="built_in">MyQueue</span>() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/** Push element x to the back of queue. */</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        stIn.<span class="built_in">push</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Removes the element from in front of queue and returns that element. */</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 只有当stOut为空的时候，再从stIn里导入数据（导入stIn全部数据）</span></span><br><span class="line">        <span class="keyword">if</span> (stOut.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="comment">// 从stIn导入数据直到stIn为空</span></span><br><span class="line">            <span class="keyword">while</span>(!stIn.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">                stOut.<span class="built_in">push</span>(stIn.<span class="built_in">top</span>());</span><br><span class="line">                stIn.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> result = stOut.<span class="built_in">top</span>();</span><br><span class="line">        stOut.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Get the front element. */</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> res = <span class="keyword">this</span>-&gt;<span class="built_in">pop</span>(); <span class="comment">// 直接使用已有的pop函数</span></span><br><span class="line">        stOut.<span class="built_in">push</span>(res); <span class="comment">// 因为pop函数弹出了元素res，所以再添加回去</span></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Returns whether the queue is empty. */</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stIn.<span class="built_in">empty</span>() &amp;&amp; stOut.<span class="built_in">empty</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="用队列实现栈">用队列实现栈</h2><p><a href="https://leetcode.cn/problems/implement-stack-using-queues/description/">225.用队列实现栈  - 力扣（LeetCode）</a></p><p><img src="https://code-thinking.cdn.bcebos.com/gifs/225.%E7%94%A8%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E6%A0%88.gif" alt="225.用队列实现栈"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyStack</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; que1;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; que2; <span class="comment">// 辅助队列，用来备份</span></span><br><span class="line">    <span class="comment">/** Initialize your data structure here. */</span></span><br><span class="line">    <span class="built_in">MyStack</span>() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Push element x onto stack. */</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        que1.<span class="built_in">push</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Removes the element on top of the stack and returns that element. */</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> size = que1.<span class="built_in">size</span>();</span><br><span class="line">        size--;</span><br><span class="line">        <span class="keyword">while</span> (size--) &#123; <span class="comment">// 将que1 导入que2，但要留下最后一个元素</span></span><br><span class="line">            que2.<span class="built_in">push</span>(que1.<span class="built_in">front</span>());</span><br><span class="line">            que1.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> result = que1.<span class="built_in">front</span>(); <span class="comment">// 留下的最后一个元素就是要返回的值</span></span><br><span class="line">        que1.<span class="built_in">pop</span>();</span><br><span class="line">        que1 = que2;            <span class="comment">// 再将que2赋值给que1</span></span><br><span class="line">        <span class="keyword">while</span> (!que2.<span class="built_in">empty</span>()) &#123; <span class="comment">// 清空que2</span></span><br><span class="line">            que2.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Get the top element. */</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> que1.<span class="built_in">back</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Returns whether the stack is empty. */</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> que1.<span class="built_in">empty</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="有效的括号">有效的括号</h2><p><a href="https://leetcode.cn/problems/valid-parentheses/description/">20. 有效的括号 - 力扣（LeetCode）</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isValid</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(s.<span class="built_in">size</span>() % <span class="number">2</span>  == <span class="number">1</span>)<span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//奇数 pass</span></span><br><span class="line"></span><br><span class="line">        stack&lt;<span class="type">int</span>&gt; st;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;s.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i] == <span class="string">&#x27;(&#x27;</span>)st.<span class="built_in">push</span>(<span class="string">&#x27;)&#x27;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s[i] == <span class="string">&#x27;[&#x27;</span>)st.<span class="built_in">push</span>(<span class="string">&#x27;]&#x27;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s[i] == <span class="string">&#x27;&#123;&#x27;</span>)st.<span class="built_in">push</span>(<span class="string">&#x27;&#125;&#x27;</span>);</span><br><span class="line">            <span class="comment">//st.empty()  没有与之匹配的   st.top() != s[i]  存入栈中的和当前不匹配</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(st.<span class="built_in">empty</span>() || st.<span class="built_in">top</span>() != s[i])<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">else</span> st.<span class="built_in">pop</span>();<span class="comment">//相匹配</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> st.<span class="built_in">empty</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="删除字符串中的所有相邻重复项">删除字符串中的所有相邻重复项</h2><p><a href="https://leetcode.cn/problems/remove-all-adjacent-duplicates-in-string/">1047. 删除字符串中的所有相邻重复项 - 力扣（LeetCode）</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">removeDuplicates</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        stack&lt;<span class="type">char</span>&gt; st;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i&lt;s.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(st.<span class="built_in">empty</span>() || st.<span class="built_in">top</span>() != s[i])</span><br><span class="line">            st.<span class="built_in">push</span>(s[i]);</span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">            st.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        string res = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">while</span>(!st.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            res+=st.<span class="built_in">top</span>();</span><br><span class="line">            st.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">reverse</span>(res.<span class="built_in">begin</span>(),res.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="逆波兰表达式求值">逆波兰表达式求值</h2><p><a href="https://leetcode.cn/problems/evaluate-reverse-polish-notation/description/">150. 逆波兰表达式求值 - 力扣（LeetCode）</a></p><blockquote><p>用两个数记录栈顶元素，再去做操作</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">evalRPN</span><span class="params">(vector&lt;string&gt;&amp; tokens)</span> </span>&#123;</span><br><span class="line">        stack&lt;<span class="type">long</span> <span class="type">long</span> &gt; st;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i&lt; tokens.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(tokens[i] == <span class="string">&quot;+&quot;</span> || tokens[i] == <span class="string">&quot;-&quot;</span> || tokens[i] == <span class="string">&quot;*&quot;</span> || tokens[i] == <span class="string">&quot;/&quot;</span>)&#123;</span><br><span class="line">                <span class="type">int</span> num1 = st.<span class="built_in">top</span>();</span><br><span class="line">                st.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="type">int</span> num2 = st.<span class="built_in">top</span>();</span><br><span class="line">                st.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">if</span> (tokens[i] == <span class="string">&quot;+&quot;</span>) st.<span class="built_in">push</span>(num2 + num1);</span><br><span class="line">                <span class="keyword">if</span> (tokens[i] == <span class="string">&quot;-&quot;</span>) st.<span class="built_in">push</span>(num2 - num1);</span><br><span class="line">                <span class="keyword">if</span> (tokens[i] == <span class="string">&quot;*&quot;</span>) st.<span class="built_in">push</span>(num2 * num1);</span><br><span class="line">                <span class="keyword">if</span> (tokens[i] == <span class="string">&quot;/&quot;</span>) st.<span class="built_in">push</span>(num2 / num1);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                st.<span class="built_in">push</span>(<span class="built_in">stoll</span>(tokens[i]));<span class="comment">//将字符转换为long long 类型api</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> st.<span class="built_in">top</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="滑动窗口最大值">滑动窗口最大值</h2><p><a href="https://leetcode.cn/problems/sliding-window-maximum/solutions/2499715/shi-pin-yi-ge-shi-pin-miao-dong-dan-diao-ezj6/">239. 滑动窗口最大值 - 力扣（LeetCode）</a></p><ul><li>单调队列</li></ul><blockquote><p><a href="https://leetcode.cn/problems/sliding-window-maximum/solutions/2499715/shi-pin-yi-ge-shi-pin-miao-dong-dan-diao-ezj6/">题解参考</a></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">maxSlidingWindow</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">        deque&lt;<span class="type">int</span>&gt; q; <span class="comment">//存的是元素下标；</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ;i&lt; nums.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="comment">//入</span></span><br><span class="line">            <span class="keyword">while</span>(!q.<span class="built_in">empty</span>() &amp;&amp; nums[q.<span class="built_in">back</span>()] &lt;= nums[i])&#123;</span><br><span class="line">                q.<span class="built_in">pop_back</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            q.<span class="built_in">push_back</span>(i);</span><br><span class="line">            <span class="keyword">if</span>(i-q.<span class="built_in">front</span>() &gt;=k)&#123;</span><br><span class="line">                q.<span class="built_in">pop_front</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i&gt;=k<span class="number">-1</span>)&#123;</span><br><span class="line">                ans.<span class="built_in">push_back</span>(nums[q.<span class="built_in">front</span>()]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="前K个高频元素">前K个高频元素</h2><p><a href="https://leetcode.cn/problems/top-k-frequent-elements/description/">347. 前 K 个高频元素 - 力扣（LeetCode）</a></p><blockquote><ol><li><p>要统计元素出现频率(map)</p></li><li><p>对频率排序(堆——优先队列)</p></li><li><p>找出前K个高频元素（小根堆）</p><p>如果采用大根堆，在每次移动更新大根堆的时候，每次弹出都把最大的元素弹出去，无法保留前K个高频元素</p><p><strong>所以我们要用小根堆，因为要统计最大前k个元素，只有小根堆每次将最小的元素弹出，最后小根堆里积累的才是前k个最大元素</strong></p></li></ol></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">topKFrequent</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">mycomparison</span> &#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">const</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&amp; lhs, <span class="type">const</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&amp; rhs)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> lhs.second &gt; rhs.second;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; mp;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i= <span class="number">0</span> ; i&lt; nums.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            mp[nums[i]]++;</span><br><span class="line">        &#125;</span><br><span class="line">        priority_queue&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;,vector&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt;,mycomparison&gt; pq;</span><br><span class="line">        <span class="keyword">for</span>(unordered_map&lt;<span class="type">int</span>,<span class="type">int</span>&gt;::iterator it = mp.<span class="built_in">begin</span>();it != mp.<span class="built_in">end</span>();it++)&#123;</span><br><span class="line">            pq.<span class="built_in">push</span>(*it);</span><br><span class="line">            <span class="keyword">if</span>(pq.<span class="built_in">size</span>()&gt;k)</span><br><span class="line">                pq.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; result;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = k - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            result[i] = pq.<span class="built_in">top</span>().first;</span><br><span class="line">            pq.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="二叉树">二叉树</h1><h2 id="二叉树理论基础">二叉树理论基础</h2><h3 id="二叉树种类">二叉树种类</h3><p>解题过程中常见的两种形式：<code>满二叉树</code>和<code>完全二叉树</code></p><h4 id="满二叉树">满二叉树</h4><p>满二叉树：如果一棵二叉树只有度为0的结点和度为2的结点，并且度为0的结点在同一层上，则这棵二叉树为满二叉树。</p><p><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20200806185805576.png" alt="img"></p><h4 id="完全二叉树">完全二叉树</h4><p>在完全二叉树中，<code>除了最底层节点可能没填满外，其余每层节点数都达到最大值</code>，并且最下面一层的节点都集中在该层最左边的若干位置。若最底层为第 h 层（h从1开始），则该层包含 1~ 2^(h-1) 个节点。</p><p><strong>大家要自己看完全二叉树的定义，很多同学对完全二叉树其实不是真正的懂了。</strong></p><p>我来举一个典型的例子如题：</p><p><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20200920221638903.png" alt="img"></p><p><strong>优先级队列其实是一个堆，堆就是一棵完全二叉树，同时保证父子节点的顺序关系</strong></p><h4 id="二叉搜索树">二叉搜索树</h4><p>二叉搜索树是有数值的，<strong>二叉搜索树是一个有序树</strong>。</p><ul><li>若它的左子树不空，则左子树上所有结点的值均<code>小于</code>它的根结点的值；</li><li>若它的右子树不空，则右子树上所有结点的值均<code>大于</code>它的根结点的值；</li><li>它的左、右子树也分别为二叉排序树</li></ul><p>下面这两棵树都是搜索树</p><p><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20200806190304693.png" alt="img"></p><h4 id="平衡二叉搜索树">平衡二叉搜索树</h4><p>平衡二叉搜索树：又被称为AVL（Adelson-Velsky and Landis）树，且具有以下性质：它是一棵<code>空树</code>或它的<code>左右两个子树的高度差的绝对值不超过1</code>，并且左右两个子树都是一棵平衡二叉树。</p><p>如图：</p><p><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20200806190511967.png" alt="img"></p><p>最后一棵 不是平衡二叉树，因为它的左右两个子树的高度差的绝对值超过了1。</p><p><strong>C++中map、set、multimap，multiset的底层实现都是平衡二叉搜索树</strong>，所以map、set的增删操作时间时间复杂度是log(n)，unordered_map、unordered_set，unordered_map、unordered_set底层实现是哈希表。</p><h3 id="二叉树的存储方式">二叉树的存储方式</h3><p><strong>二叉树可以链式存储，也可以顺序存储。</strong></p><p>那么链式存储方式就用指针， 顺序存储的方式就是用数组。</p><p>顾名思义就是顺序存储的元素在内存是连续分布的，而链式存储则是通过指针把分布在各个地址的节点串联一起。</p><p>链式存储如图：</p><p><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/2020092019554618.png" alt="img"></p><p>用数组来存储二叉树，顺序存储的方式如图：</p><p><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20200920200429452.png" alt="img"></p><p>用数组来存储二叉树如何遍历的呢？</p><p><strong>如果父节点的数组下标是 i，那么它的左孩子就是 i * 2 + 1，右孩子就是 i * 2 + 2。</strong></p><ul><li>用数组依然可以表示二叉树。</li></ul><h3 id="二叉树的遍历方式">二叉树的遍历方式</h3><ul><li><p>二叉树主要由两种遍历方式：</p><ol><li>深度优先遍历：先往深走，遇到叶子节点再往回走。</li><li>广度优先遍历：一层一层的去遍历。</li></ol></li><li><p>深度优先遍历</p><ul><li>前序遍历（递归法，迭代法）中左右</li><li>中序遍历（递归法，迭代法）中左右</li><li>后序遍历（递归法，迭代法）中左右</li></ul></li><li><p>广度优先遍历</p><ul><li>层次遍历（迭代法）</li></ul></li></ul><blockquote><p><strong>这里前中后，其实指的就是中间节点的遍历顺序</strong>，只要大家记住 前中后序指的就是中间节点的位置就可以了。</p></blockquote><h3 id="二叉树定义">二叉树定义</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">TreeNode</span>&#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    TreeNode *left;</span><br><span class="line">    TreeNode *right;</span><br><span class="line">    <span class="built_in">TreeNode</span>(<span class="type">int</span> x):<span class="built_in">val</span>(x),<span class="built_in">left</span>(<span class="literal">NULL</span>),<span class="built_in">right</span>(<span class="literal">NULL</span>)&#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>多记，多写，谨防手撕！</li></ul><h2 id="二叉树的递归遍历">二叉树的递归遍历</h2><blockquote><p>递归三要素：</p><ol><li><strong>确定递归函数的参数和返回值：</strong> 确定哪些参数是递归的过程中需要处理的，那么就在递归函数里加上这个参数， 并且还要明确每次递归的返回值是什么进而确定递归函数的返回类型。</li><li><strong>确定终止条件：</strong> 写完了递归算法, 运行的时候，经常会遇到栈溢出的错误，就是没写终止条件或者终止条件写的不对，操作系统也是用一个栈的结构来保存每一层递归的信息，如果递归没有终止，操作系统的内存栈必然就会溢出。</li><li><strong>确定单层递归的逻辑：</strong> 确定每一层递归需要处理的信息。在这里也就会重复调用自己来实现递归的过程。</li></ol></blockquote><p><a href="https://leetcode.cn/problems/binary-tree-preorder-traversal/description/">144. 二叉树的前序遍历 - 力扣（LeetCode）</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(TreeNode* cur,vector&lt;<span class="type">int</span>&gt;&amp; ans)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(cur == <span class="literal">nullptr</span>)<span class="keyword">return</span>;</span><br><span class="line">        ans.<span class="built_in">push_back</span>(cur-&gt;val);</span><br><span class="line">        <span class="built_in">func</span>(cur-&gt;left,ans);</span><br><span class="line">        <span class="built_in">func</span>(cur-&gt;right,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt;res;</span><br><span class="line">        <span class="built_in">func</span>(root,res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/binary-tree-postorder-traversal/description/">145. 二叉树的后序遍历 - 力扣（LeetCode）</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(TreeNode* cur,vector&lt;<span class="type">int</span>&gt;&amp; ans)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(cur == <span class="literal">nullptr</span>)<span class="keyword">return</span>;</span><br><span class="line">        ans.<span class="built_in">push_back</span>(cur-&gt;val);</span><br><span class="line">        <span class="built_in">func</span>(cur-&gt;left,ans);</span><br><span class="line">        <span class="built_in">func</span>(cur-&gt;right,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt;res;</span><br><span class="line">        <span class="built_in">func</span>(root,res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/binary-tree-inorder-traversal/">94. 二叉树的中序遍历 - 力扣（LeetCode）</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(TreeNode* cur,vector&lt;<span class="type">int</span>&gt;&amp; ans)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(cur == <span class="literal">nullptr</span>)<span class="keyword">return</span> ;</span><br><span class="line">        <span class="built_in">func</span>(cur-&gt;left,ans);</span><br><span class="line">        ans.<span class="built_in">push_back</span>(cur-&gt;val);</span><br><span class="line">        <span class="built_in">func</span>(cur-&gt;right,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">inorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        <span class="built_in">func</span>(root,res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="二叉树的迭代遍历">二叉树的迭代遍历</h2><blockquote><p>先将根节点放入栈中，然后将右孩子加入栈，再加入左孩子</p><p>这样出栈时的顺序为 中，左，右</p></blockquote><p><img src="https://code-thinking.cdn.bcebos.com/gifs/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86%EF%BC%88%E8%BF%AD%E4%BB%A3%E6%B3%95%EF%BC%89.gif" alt="二叉树前序遍历（迭代法）"></p><p><a href="https://leetcode.cn/problems/binary-tree-preorder-traversal/description/">144. 二叉树的前序遍历 - 力扣（LeetCode）</a>s</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        stack&lt;TreeNode*&gt; st;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">nullptr</span>)<span class="keyword">return</span> res;</span><br><span class="line">        st.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span>(!st.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            TreeNode* tmp = st.<span class="built_in">top</span>();</span><br><span class="line">            st.<span class="built_in">pop</span>();</span><br><span class="line">            res.<span class="built_in">push_back</span>(tmp-&gt;val);</span><br><span class="line">            <span class="keyword">if</span>(tmp-&gt;right)st.<span class="built_in">push</span>(tmp-&gt;right);<span class="comment">//右 空节点不入栈</span></span><br><span class="line">            <span class="keyword">if</span>(tmp-&gt;left)st.<span class="built_in">push</span>(tmp-&gt;left);<span class="comment">//左 空节点不入栈</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/binary-tree-inorder-traversal/description/">94. 二叉树的中序遍历 - 力扣（LeetCode）</a></p><blockquote><p>在这种情形下，处理顺序和访问顺序时不一致的，所以要改造一下</p><p>指针——访问节点，栈——处理节点</p><p>首先依次访问左边节点直至为NULL，取出栈顶指针，弹栈，加入答案，再访问右边节点</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">inorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        stack&lt;TreeNode*&gt; st;</span><br><span class="line">        TreeNode* cur = root;</span><br><span class="line">        <span class="keyword">while</span>( !st.<span class="built_in">empty</span>() || cur != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cur)&#123;</span><br><span class="line">                st.<span class="built_in">push</span>(cur);</span><br><span class="line">                cur = cur-&gt;left;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                cur = st.<span class="built_in">top</span>();</span><br><span class="line">                st.<span class="built_in">pop</span>();</span><br><span class="line">                res.<span class="built_in">push_back</span>(cur-&gt;val);</span><br><span class="line">                cur = cur-&gt;right;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/binary-tree-postorder-traversal/description/">145. 二叉树的后序遍历 - 力扣（LeetCode）</a></p><blockquote><p>后序： 左，右，中，前序：中，左，右</p><p>在刚刚迭代方法实现前序遍历的基础上 先变一下顺序再翻转即可</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">postorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        stack&lt;TreeNode*&gt; st;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">nullptr</span>)<span class="keyword">return</span> res;</span><br><span class="line">        st.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span>(!st.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            TreeNode* cur = st.<span class="built_in">top</span>();</span><br><span class="line">            st.<span class="built_in">pop</span>();</span><br><span class="line">            res.<span class="built_in">push_back</span>(cur-&gt;val);</span><br><span class="line">            <span class="keyword">if</span>(cur-&gt;left)st.<span class="built_in">push</span>(cur-&gt;left);<span class="comment">//变一下顺序</span></span><br><span class="line">            <span class="keyword">if</span>(cur-&gt;right)st.<span class="built_in">push</span>(cur-&gt;right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">reverse</span>(res.<span class="built_in">begin</span>(),res.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/n-ary-tree-preorder-traversal/description/">589. N 叉树的前序遍历 - 力扣（LeetCode）</a></p><blockquote><p>注意for循环里面的内容，倒序遍历才能保证出栈的时候是正确的顺序</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">preorder</span><span class="params">(Node* root)</span> </span>&#123;</span><br><span class="line">        stack&lt;Node*&gt; st;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">if</span>(root)st.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span>(!st.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            Node* cur = st.<span class="built_in">top</span>();</span><br><span class="line">            st.<span class="built_in">pop</span>();</span><br><span class="line">            res.<span class="built_in">push_back</span>(cur-&gt;val);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = cur-&gt;children.<span class="built_in">size</span>()<span class="number">-1</span>; i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">                <span class="keyword">if</span>(cur-&gt;children[i])st.<span class="built_in">push</span>(cur-&gt;children[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/n-ary-tree-postorder-traversal/description/">590. N 叉树的后序遍历 - 力扣（LeetCode）</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">postorder</span><span class="params">(Node* root)</span> </span>&#123;</span><br><span class="line">        stack&lt;Node*&gt; st;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">if</span>(root)st.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span>(!st.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            Node* cur = st.<span class="built_in">top</span>();</span><br><span class="line">            st.<span class="built_in">pop</span>();</span><br><span class="line">            res.<span class="built_in">push_back</span>(cur-&gt;val);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ; i&lt; cur-&gt;children.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(cur-&gt;children[i])st.<span class="built_in">push</span>(cur-&gt;children[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">reverse</span>(res.<span class="built_in">begin</span>(),res.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="二叉树的层序遍历">二叉树的层序遍历</h2><p><a href="https://leetcode.cn/problems/binary-tree-level-order-traversal/description/">102. 二叉树的层序遍历 - 力扣（LeetCode）</a></p><blockquote><p><strong>队列先进先出，符合一层一层遍历的逻辑</strong></p><p><strong>而用栈先进后出适合模拟深度优先遍历也就是递归的逻辑</strong></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">levelOrder</span>(TreeNode* root) &#123;</span><br><span class="line">        queue&lt;TreeNode*&gt; que;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line">        <span class="keyword">if</span>(root)que.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span>(!que.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="type">int</span> size = que.<span class="built_in">size</span>();</span><br><span class="line">            vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">            <span class="comment">//不能使用que.size(),  pop()完会变化</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; size;i++)&#123;</span><br><span class="line">                TreeNode* tmp = que.<span class="built_in">front</span>();</span><br><span class="line">                que.<span class="built_in">pop</span>();</span><br><span class="line">                ans.<span class="built_in">push_back</span>(tmp-&gt;val);</span><br><span class="line">                <span class="keyword">if</span>(tmp-&gt;left)que.<span class="built_in">push</span>(tmp-&gt;left);</span><br><span class="line">                <span class="keyword">if</span>(tmp-&gt;right)que.<span class="built_in">push</span>(tmp-&gt;right);</span><br><span class="line">            &#125;</span><br><span class="line">            res.<span class="built_in">push_back</span>(ans);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/binary-tree-level-order-traversal-ii/description/">107. 二叉树的层序遍历 II - 力扣（LeetCode）</a></p><blockquote><p>reverse一下</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">levelOrderBottom</span>(TreeNode* root) &#123;</span><br><span class="line">        queue&lt;TreeNode*&gt; que;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line">        <span class="keyword">if</span>(root)que.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span>(!que.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="type">int</span> size = que.<span class="built_in">size</span>();</span><br><span class="line">            vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ; i&lt; size;i++)&#123;</span><br><span class="line">                TreeNode* tmp = que.<span class="built_in">front</span>();</span><br><span class="line">                que.<span class="built_in">pop</span>();</span><br><span class="line">                ans.<span class="built_in">push_back</span>(tmp-&gt;val);</span><br><span class="line">                <span class="keyword">if</span>(tmp-&gt;left)que.<span class="built_in">push</span>(tmp-&gt;left);</span><br><span class="line">                <span class="keyword">if</span>(tmp-&gt;right)que.<span class="built_in">push</span>(tmp-&gt;right);</span><br><span class="line">            &#125;</span><br><span class="line">            res.<span class="built_in">push_back</span>(ans);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">reverse</span>(res.<span class="built_in">begin</span>(),res.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/binary-tree-right-side-view/description/">199. 二叉树的右视图 - 力扣（LeetCode）</a></p><blockquote><p>层序遍历的时候，判断是否遍历到单层的最后面的元素，如果是，就放进result数组中，随后返回result</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">rightSideView</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        queue&lt;TreeNode*&gt; que;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">if</span>(root)que.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span>(! que.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="type">int</span> size = que.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ; i&lt; size;i++)&#123;</span><br><span class="line">                TreeNode* tmp = que.<span class="built_in">front</span>();</span><br><span class="line">                que.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">if</span>(i == size<span class="number">-1</span>)res.<span class="built_in">push_back</span>(tmp-&gt;val);</span><br><span class="line">                <span class="keyword">if</span>(tmp-&gt;left)que.<span class="built_in">push</span>(tmp-&gt;left);</span><br><span class="line">                <span class="keyword">if</span>(tmp-&gt;right)que.<span class="built_in">push</span>(tmp-&gt;right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/average-of-levels-in-binary-tree/">637. 二叉树的层平均值 - 力扣（LeetCode）</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">double</span>&gt; <span class="title">averageOfLevels</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        queue&lt;TreeNode*&gt; que;</span><br><span class="line">        vector&lt;<span class="type">double</span>&gt; res;</span><br><span class="line">        <span class="keyword">if</span>(root)que.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span>(!que.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="type">int</span> size = que.<span class="built_in">size</span>();</span><br><span class="line">            <span class="type">double</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i&lt; size;i++)&#123;</span><br><span class="line">                TreeNode* tmp = que.<span class="built_in">front</span>();</span><br><span class="line">                que.<span class="built_in">pop</span>();</span><br><span class="line">                sum += tmp-&gt;val;</span><br><span class="line">                <span class="keyword">if</span>(tmp-&gt;left)que.<span class="built_in">push</span>(tmp-&gt;left);</span><br><span class="line">                <span class="keyword">if</span>(tmp-&gt;right)que.<span class="built_in">push</span>(tmp-&gt;right);</span><br><span class="line">            &#125;</span><br><span class="line">            res.<span class="built_in">push_back</span>(sum/size);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/n-ary-tree-level-order-traversal/">429. N 叉树的层序遍历 - 力扣（LeetCode）</a></p><blockquote><p>遍历孩子节点即可</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">levelOrder</span>(Node* root) &#123;</span><br><span class="line">        queue&lt;Node*&gt; que;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line">        <span class="keyword">if</span>(root)que.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span>(!que.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="type">int</span> size = que.<span class="built_in">size</span>();</span><br><span class="line">            vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ;i &lt; size;i++)&#123;</span><br><span class="line">                Node* tmp = que.<span class="built_in">front</span>();</span><br><span class="line">                que.<span class="built_in">pop</span>();</span><br><span class="line">                ans.<span class="built_in">push_back</span>(tmp-&gt;val);</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ; i&lt; tmp-&gt;children.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(tmp-&gt;children[i])que.<span class="built_in">push</span>(tmp-&gt;children[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            res.<span class="built_in">push_back</span>(ans);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/find-largest-value-in-each-tree-row/description/">515. 在每个树行中找最大值 - 力扣（LeetCode）</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">largestValues</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        queue&lt;TreeNode*&gt; que;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">if</span>(root)que.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span>(!que.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="type">int</span> size = que.<span class="built_in">size</span>();</span><br><span class="line">            <span class="type">int</span> max = INT_MIN;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span> ; i&lt;size;i++)&#123;</span><br><span class="line">                TreeNode* tmp = que.<span class="built_in">front</span>();</span><br><span class="line">                que.<span class="built_in">pop</span>();</span><br><span class="line">                max = tmp-&gt;val&gt; max? tmp-&gt;val:max;</span><br><span class="line">                <span class="keyword">if</span>(tmp-&gt;left)que.<span class="built_in">push</span>(tmp-&gt;left);</span><br><span class="line">                <span class="keyword">if</span>(tmp-&gt;right)que.<span class="built_in">push</span>(tmp-&gt;right);</span><br><span class="line">            &#125;</span><br><span class="line">            res.<span class="built_in">push_back</span>(max);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/populating-next-right-pointers-in-each-node/description/">116. 填充每个节点的下一个右侧节点指针 - 力扣（LeetCode）</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">Node* <span class="title">connect</span><span class="params">(Node* root)</span> </span>&#123;</span><br><span class="line">        queue&lt;Node*&gt; que;</span><br><span class="line">        <span class="keyword">if</span>(root)que.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span>(!que.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="type">int</span> size = que.<span class="built_in">size</span>();</span><br><span class="line">            Node* nodepre; <span class="comment">//用于记录每层第一个节点</span></span><br><span class="line">            Node* cur;  <span class="comment">//记录当前节点</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i&lt; size;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i == <span class="number">0</span>)&#123;  <span class="comment">//当为每层第一个节点时</span></span><br><span class="line">                nodepre = que.<span class="built_in">front</span>();</span><br><span class="line">                que.<span class="built_in">pop</span>();</span><br><span class="line">                cur = nodepre; <span class="comment">//当前节点也是第一个节点</span></span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    cur = que.<span class="built_in">front</span>();</span><br><span class="line">                    que.<span class="built_in">pop</span>();</span><br><span class="line">                    nodepre-&gt;next = cur;  <span class="comment">//第一个节点指向当前节点</span></span><br><span class="line">                    nodepre = nodepre-&gt;next; <span class="comment">//移动节点</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(cur-&gt;left)que.<span class="built_in">push</span>(cur-&gt;left);</span><br><span class="line">                <span class="keyword">if</span>(cur-&gt;right)que.<span class="built_in">push</span>(cur-&gt;right);</span><br><span class="line">            &#125;</span><br><span class="line">            nodepre-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/populating-next-right-pointers-in-each-node-ii/description/">117. 填充每个节点的下一个右侧节点指针 II - 力扣（LeetCode）</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">Node* <span class="title">connect</span><span class="params">(Node* root)</span> </span>&#123;</span><br><span class="line">        queue&lt;Node*&gt; que;</span><br><span class="line">        <span class="keyword">if</span>(root)que.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span>(!que.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            Node* nodepre;</span><br><span class="line">            Node* cur;</span><br><span class="line">            <span class="type">int</span> size = que.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span> ; i&lt; size;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i == <span class="number">0</span>)&#123;</span><br><span class="line">                nodepre = que.<span class="built_in">front</span>();</span><br><span class="line">                que.<span class="built_in">pop</span>();</span><br><span class="line">                cur = nodepre;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    cur = que.<span class="built_in">front</span>();</span><br><span class="line">                    que.<span class="built_in">pop</span>();</span><br><span class="line">                    nodepre-&gt;next = cur;</span><br><span class="line">                    nodepre = nodepre-&gt;next;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(cur-&gt;left)que.<span class="built_in">push</span>(cur-&gt;left);</span><br><span class="line">                <span class="keyword">if</span>(cur-&gt;right)que.<span class="built_in">push</span>(cur-&gt;right);</span><br><span class="line">            &#125;</span><br><span class="line">            nodepre-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/maximum-depth-of-binary-tree/description/">104. 二叉树的最大深度 - 力扣（LeetCode）</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxDepth</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        queue&lt;TreeNode*&gt; que;</span><br><span class="line">        <span class="keyword">if</span>(root)que.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(!que.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="type">int</span> size = que.<span class="built_in">size</span>();</span><br><span class="line">            cnt++;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i&lt; size;i++)&#123;</span><br><span class="line">                TreeNode* cur = que.<span class="built_in">front</span>();</span><br><span class="line">                que.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">if</span>(cur-&gt;left)que.<span class="built_in">push</span>(cur-&gt;left);</span><br><span class="line">                <span class="keyword">if</span>(cur-&gt;right)que.<span class="built_in">push</span>(cur-&gt;right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/minimum-depth-of-binary-tree/">111. 二叉树的最小深度 - 力扣（LeetCode）</a></p><blockquote><p><strong>只有当左右孩子都为空的时候，才说明遍历的最低点了。如果其中一个孩子为空则不是最低点</strong></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minDepth</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        queue&lt;TreeNode*&gt; que;</span><br><span class="line">        <span class="keyword">if</span>(root)que.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(!que.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="type">int</span> size = que.<span class="built_in">size</span>();</span><br><span class="line">            cnt++;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i&lt; size;i++)&#123;</span><br><span class="line">                TreeNode* cur = que.<span class="built_in">front</span>();</span><br><span class="line">                que.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">if</span>(cur-&gt;left)que.<span class="built_in">push</span>(cur-&gt;left);</span><br><span class="line">                <span class="keyword">if</span>(cur-&gt;right)que.<span class="built_in">push</span>(cur-&gt;right);</span><br><span class="line">                <span class="keyword">if</span>(!cur-&gt;left &amp;&amp; !cur-&gt;right)<span class="keyword">return</span> cnt;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="翻转二叉树">翻转二叉树</h2><p><a href="https://leetcode.cn/problems/invert-binary-tree/description/">226. 翻转二叉树 - 力扣（LeetCode）</a></p><blockquote><p>把每个结点的左右孩子换个位置就行</p></blockquote><ul><li>前序递归</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">invertTree</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root)<span class="keyword">return</span> root;</span><br><span class="line">        <span class="built_in">swap</span>(root-&gt;left,root-&gt;right);</span><br><span class="line">        <span class="built_in">invertTree</span>(root-&gt;left);</span><br><span class="line">        <span class="built_in">invertTree</span>(root-&gt;right);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>前序迭代</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">invertTree</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        stack&lt;TreeNode*&gt; st;</span><br><span class="line">        <span class="keyword">if</span>(root)st.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span>(!st.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            TreeNode* tmp = st.<span class="built_in">top</span>();</span><br><span class="line">            st.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="built_in">swap</span>(tmp-&gt;left,tmp-&gt;right);</span><br><span class="line">            <span class="keyword">if</span>(tmp-&gt;left)st.<span class="built_in">push</span>(tmp-&gt;left);</span><br><span class="line">            <span class="keyword">if</span>(tmp-&gt;right)st.<span class="built_in">push</span>(tmp-&gt;right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="对称二叉树">对称二叉树</h2><p><a href="https://leetcode.cn/problems/symmetric-tree/description/">101. 对称二叉树 - 力扣（LeetCode）</a></p><blockquote><p>判断二叉树是否对称：比较的不是左右节点，<strong>而是左右子树</strong></p><p><strong>不但要遍历两棵树而且要比较内侧和外侧节点</strong></p><ul><li>对于递归方法:</li></ul><p>确定终止条件:</p><ol><li>节点为空的情况：（<strong>注意我们比较的其实不是左孩子和右孩子，所以如下我称之为左节点右节点</strong>）<ul><li>左节点为空，右节点不为空，不对称，return false</li><li>左不为空，右为空，不对称 return false</li><li>左右都为空，对称，返回true</li></ul></li><li>左右节点不为空：<ul><li>左右都不为空，比较节点数值，不相同就return false</li></ul></li></ol></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">func</span><span class="params">(TreeNode* left,TreeNode* right)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!left &amp;&amp; !right)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(!left &amp;&amp; right)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(left &amp;&amp; !right)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(left-&gt;val != right-&gt;val)<span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//左右节点都不为空，比较值</span></span><br><span class="line">        <span class="comment">//递归遍历内侧和外侧</span></span><br><span class="line">        <span class="type">bool</span> out = <span class="built_in">func</span>(left-&gt;left,right-&gt;right);</span><br><span class="line">        <span class="type">bool</span> in = <span class="built_in">func</span>(left-&gt;right,right-&gt;left);</span><br><span class="line">        <span class="keyword">return</span> out &amp;&amp; in;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isSymmetric</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">       <span class="type">bool</span> ans = <span class="built_in">func</span>(root-&gt;left,root-&gt;right);</span><br><span class="line">       <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>队列实现</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isSymmetric</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        queue&lt;TreeNode*&gt; que;</span><br><span class="line">        que.<span class="built_in">push</span>(root-&gt;left);</span><br><span class="line">        que.<span class="built_in">push</span>(root-&gt;right);</span><br><span class="line">        <span class="keyword">while</span>(!que.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            TreeNode* leftnode = que.<span class="built_in">front</span>();que.<span class="built_in">pop</span>();</span><br><span class="line">            TreeNode* rightnode = que.<span class="built_in">front</span>();que.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(!leftnode &amp;&amp; !rightnode)<span class="keyword">continue</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(!leftnode ||! rightnode ||(leftnode-&gt;val != rightnode-&gt;val))<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//处理外侧</span></span><br><span class="line">            que.<span class="built_in">push</span>(leftnode-&gt;left);</span><br><span class="line">            que.<span class="built_in">push</span>(rightnode-&gt;right);</span><br><span class="line">            <span class="comment">//内侧 </span></span><br><span class="line">            que.<span class="built_in">push</span>(leftnode-&gt;right);</span><br><span class="line">            que.<span class="built_in">push</span>(rightnode-&gt;left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="二叉树的最大深度">二叉树的最大深度</h2><p><a href="https://leetcode.cn/problems/maximum-depth-of-binary-tree/description/">104. 二叉树的最大深度 - 力扣（LeetCode）</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxDepth</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        queue&lt;TreeNode*&gt; que;</span><br><span class="line">        <span class="keyword">if</span>(root)que.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(!que.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="type">int</span> size = que.<span class="built_in">size</span>();</span><br><span class="line">            cnt++;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i&lt; size;i++)&#123;</span><br><span class="line">                TreeNode* cur = que.<span class="built_in">front</span>();</span><br><span class="line">                que.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">if</span>(cur-&gt;left)que.<span class="built_in">push</span>(cur-&gt;left);</span><br><span class="line">                <span class="keyword">if</span>(cur-&gt;right)que.<span class="built_in">push</span>(cur-&gt;right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/maximum-depth-of-n-ary-tree/description/">559. N 叉树的最大深度 - 力扣（LeetCode）</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxDepth</span><span class="params">(Node* root)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        queue&lt;Node*&gt; que;</span><br><span class="line">        <span class="keyword">if</span>(!root)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        que.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span>(!que.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            sum++;</span><br><span class="line">            <span class="type">int</span> size = que.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ; i &lt; size;i++)&#123;</span><br><span class="line">                Node* tmp = que.<span class="built_in">front</span>();</span><br><span class="line">                que.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ; i &lt; tmp-&gt;children.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(tmp-&gt;children[i])que.<span class="built_in">push</span>(tmp-&gt;children[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="二叉树的最小深度">二叉树的最小深度</h2><p><a href="https://leetcode.cn/problems/minimum-depth-of-binary-tree/">111. 二叉树的最小深度 - 力扣（LeetCode）</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minDepth</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        queue&lt;TreeNode*&gt; que;</span><br><span class="line">        <span class="keyword">if</span>(root)que.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(!que.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="type">int</span> size = que.<span class="built_in">size</span>();</span><br><span class="line">            cnt++;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i&lt; size;i++)&#123;</span><br><span class="line">                TreeNode* cur = que.<span class="built_in">front</span>();</span><br><span class="line">                que.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">if</span>(cur-&gt;left)que.<span class="built_in">push</span>(cur-&gt;left);</span><br><span class="line">                <span class="keyword">if</span>(cur-&gt;right)que.<span class="built_in">push</span>(cur-&gt;right);</span><br><span class="line">                <span class="keyword">if</span>(!cur-&gt;left &amp;&amp; !cur-&gt;right)<span class="keyword">return</span> cnt;<span class="comment">//判定</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="完全二叉树的节点个数">完全二叉树的节点个数</h2><p><a href="https://leetcode.cn/problems/count-complete-tree-nodes/">222. 完全二叉树的节点个数 - 力扣（LeetCode）</a></p><ul><li>递归法(普通二叉树)</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">func</span><span class="params">(TreeNode* cur)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!cur)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> lcnt = <span class="built_in">func</span>(cur-&gt;left);</span><br><span class="line">        <span class="type">int</span> rcnt = <span class="built_in">func</span>(cur-&gt;right);</span><br><span class="line">        <span class="keyword">return</span> lcnt+rcnt+<span class="number">1</span>;<span class="comment">//加上根节点</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countNodes</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">func</span>(root);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>递归法（满二叉树）</li></ul><blockquote><p>完全二叉树只有两种情况，情况一：就是满二叉树，情况二：最后一层叶子节点没有满。</p><p>对于情况一，可以直接用 <code>2^树深度 - 1</code>来计算，注意这里根节点深度为1。</p><p>对于情况二，分别递归左孩子，和右孩子，递归到某一深度一定会有左孩子或者右孩子为<strong>满二叉树</strong>，然后依然可以按照情况一来计算</p><p>见下图：</p><p><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20201124092543662.png" alt="222.完全二叉树的节点个数"></p><p><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20201124092634138.png" alt="222.完全二叉树的节点个数1"></p><p>Q:关键在于如何去判断一个左子树或者右子树是不是满二叉树呢？</p><p><strong>A:如果递归向左遍历的深度等于递归向右遍历的深度，那说明就是满二叉树。</strong></p><p><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20220829163709.png" alt="img"></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countNodes</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        TreeNode* left = root-&gt;left;</span><br><span class="line">        TreeNode* right = root-&gt;right;</span><br><span class="line">        <span class="type">int</span> leftDepth = <span class="number">0</span>, rightDepth = <span class="number">0</span>; <span class="comment">// 这里初始为0是有目的的，为了下面求指数方便</span></span><br><span class="line">        <span class="keyword">while</span> (left) &#123;  <span class="comment">// 求左子树深度</span></span><br><span class="line">            left = left-&gt;left;</span><br><span class="line">            leftDepth++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (right) &#123; <span class="comment">// 求右子树深度</span></span><br><span class="line">            right = right-&gt;right;</span><br><span class="line">            rightDepth++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (leftDepth == rightDepth) &#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="number">2</span> &lt;&lt; leftDepth) - <span class="number">1</span>; <span class="comment">// 注意(2&lt;&lt;1) 相当于2^2，所以leftDepth初始为0</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">countNodes</span>(root-&gt;left) + <span class="built_in">countNodes</span>(root-&gt;right) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>层序遍历</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countNodes</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        queue&lt;TreeNode*&gt; que;</span><br><span class="line">        <span class="keyword">if</span>(!root)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        que.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span>(!que.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="type">int</span> size = que.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; size;i++)&#123;</span><br><span class="line">                sum++;</span><br><span class="line">                TreeNode* tmp= que.<span class="built_in">front</span>();</span><br><span class="line">                que.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">if</span>(tmp-&gt;left)que.<span class="built_in">push</span>(tmp-&gt;left);</span><br><span class="line">                <span class="keyword">if</span>(tmp-&gt;right)que.<span class="built_in">push</span>(tmp-&gt;right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="平衡二叉树">平衡二叉树</h2><p><a href="https://leetcode.cn/problems/balanced-binary-tree/description/">110. 平衡二叉树 - 力扣（LeetCode）</a></p><blockquote><p>一棵高度平衡二叉树定义为：一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过1</p><ul><li>二叉树节点的深度：指从根节点到该节点的最长简单路径边的条数。</li><li>二叉树节点的高度：指从该节点到叶子节点的最长简单路径边的条数。</li></ul><p><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20210203155515650.png" alt="110.平衡二叉树2"></p><p>【求深度——前序，求高度——后序】</p></blockquote><ul><li>递归求解</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 返回以该节点为根节点的二叉树的高度，如果不是平衡二叉树了则返回-1</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getHeight</span><span class="params">(TreeNode* node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> leftHeight = <span class="built_in">getHeight</span>(node-&gt;left);</span><br><span class="line">        <span class="keyword">if</span> (leftHeight == <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="type">int</span> rightHeight = <span class="built_in">getHeight</span>(node-&gt;right);</span><br><span class="line">        <span class="keyword">if</span> (rightHeight == <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">abs</span>(leftHeight - rightHeight) &gt; <span class="number">1</span> ? <span class="number">-1</span> : <span class="number">1</span> + <span class="built_in">max</span>(leftHeight, rightHeight);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isBalanced</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">getHeight</span>(root) == <span class="number">-1</span> ? <span class="literal">false</span> : <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="二叉树的所有路径">二叉树的所有路径</h2><p><a href="https://leetcode.cn/problems/binary-tree-paths/">257. 二叉树的所有路径 - 力扣（LeetCode）</a></p><blockquote><p>递归+回溯   前序遍历（从根节点开始找）</p><p>三部曲：</p><ol><li>确定参数：传入根节点，记录每一条路径的path，和存放结果集的result，这里递归不需要返回值</li><li>出口：（找叶子节点）——当cur不为空时，其左右孩子都为空的时候，就找到了叶子节点</li><li>单层递归逻辑：先处理中间节点，递归（在递归前判断cur是否为空），回溯（<strong>回溯要和递归永远在一起</strong>）</li></ol></blockquote><ul><li>版本一（用vector存path 方便回溯）</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">traversal</span><span class="params">(TreeNode* cur, vector&lt;<span class="type">int</span>&gt;&amp; path, vector&lt;string&gt;&amp; result)</span> </span>&#123;</span><br><span class="line">        path.<span class="built_in">push_back</span>(cur-&gt;val); <span class="comment">// 中，中为什么写在这里，因为最后一个节点也要加入到path中 </span></span><br><span class="line">        <span class="comment">// 这才到了叶子节点</span></span><br><span class="line">        <span class="keyword">if</span> (cur-&gt;left == <span class="literal">NULL</span> &amp;&amp; cur-&gt;right == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            string sPath;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; path.<span class="built_in">size</span>() - <span class="number">1</span>; i++) &#123;</span><br><span class="line">                sPath += <span class="built_in">to_string</span>(path[i]);</span><br><span class="line">                sPath += <span class="string">&quot;-&gt;&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            sPath += <span class="built_in">to_string</span>(path[path.<span class="built_in">size</span>() - <span class="number">1</span>]);</span><br><span class="line">            result.<span class="built_in">push_back</span>(sPath);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cur-&gt;left) &#123; <span class="comment">// 左 </span></span><br><span class="line">            <span class="built_in">traversal</span>(cur-&gt;left, path, result);</span><br><span class="line">            path.<span class="built_in">pop_back</span>(); <span class="comment">// 回溯</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cur-&gt;right) &#123; <span class="comment">// 右</span></span><br><span class="line">            <span class="built_in">traversal</span>(cur-&gt;right, path, result);</span><br><span class="line">            path.<span class="built_in">pop_back</span>(); <span class="comment">// 回溯</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">binaryTreePaths</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        vector&lt;string&gt; result;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; path;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">NULL</span>) <span class="keyword">return</span> result;</span><br><span class="line">        <span class="built_in">traversal</span>(root, path, result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>版本二 ，（精简但回溯不太直观）</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(TreeNode* cur,string path, vector&lt;string&gt;&amp; res)</span></span>&#123;</span><br><span class="line">        path += <span class="built_in">to_string</span>(cur-&gt;val);  <span class="comment">//类型转换</span></span><br><span class="line">        <span class="keyword">if</span>(!cur-&gt;left &amp;&amp; !cur-&gt;right)&#123;  <span class="comment">//到达叶子节点</span></span><br><span class="line">            res.<span class="built_in">push_back</span>(path);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(cur-&gt;left)<span class="built_in">func</span>(cur-&gt;left,path+<span class="string">&quot;-&gt;&quot;</span>,res);</span><br><span class="line">        <span class="keyword">if</span>(cur-&gt;right)<span class="built_in">func</span>(cur-&gt;right,path+<span class="string">&quot;-&gt;&quot;</span>,res);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">binaryTreePaths</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        vector&lt;string&gt; res;</span><br><span class="line">        string  path;</span><br><span class="line">        <span class="keyword">if</span>(!root)<span class="keyword">return</span> res;</span><br><span class="line">        <span class="built_in">func</span>(root,path,res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="左叶子之和">左叶子之和</h2><p><a href="https://leetcode.cn/problems/sum-of-left-leaves/">404. 左叶子之和 - 力扣（LeetCode）</a></p><blockquote><p>左叶子：<strong>节点A的左孩子不为空，且左孩子的左右孩子都为空（说明是叶子节点），那么A节点的左孩子为左叶子节点</strong></p><p>因此<strong>判断当前节点是不是左叶子是无法判断的，必须要通过节点的父节点来判断其左孩子是不是左叶子</strong></p><ul><li>递归三部曲：</li></ul><ol><li>确定参数返回值：根节点和int</li><li>递归出口：遍历到空节点时，左叶子值一定为0</li><li>单层逻辑：当遇到左叶子节点的时候，记录数值，然后通过递归求取左子树左叶子之和，和 右子树左叶子之和，相加便是整个树的左叶子之和</li></ol></blockquote><ul><li>递归实现：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">sumOfLeftLeaves</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(!root-&gt;left &amp;&amp; !root-&gt;right)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//左</span></span><br><span class="line">        <span class="type">int</span> left_val = <span class="built_in">sumOfLeftLeaves</span>(root-&gt;left);</span><br><span class="line">        <span class="keyword">if</span>(root-&gt;left &amp;&amp; !root-&gt;left-&gt;left &amp;&amp; !root-&gt;left-&gt;right)&#123;</span><br><span class="line">            left_val = root-&gt;left-&gt;val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//右</span></span><br><span class="line">        <span class="type">int</span> right_val = <span class="built_in">sumOfLeftLeaves</span>(root-&gt;right);</span><br><span class="line">        <span class="keyword">return</span> left_val+ right_val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>迭代实现</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">sumOfLeftLeaves</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        stack&lt;TreeNode*&gt; st;</span><br><span class="line">        <span class="keyword">if</span>(!root)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        st.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(!st.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            TreeNode* cur = st.<span class="built_in">top</span>();</span><br><span class="line">            st.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">if</span>(cur-&gt;left &amp;&amp; !cur-&gt;left-&gt;left &amp;&amp; !cur-&gt;left-&gt;right) sum+=cur-&gt;left-&gt;val;</span><br><span class="line">            <span class="keyword">if</span>(cur-&gt;left)st.<span class="built_in">push</span>(cur-&gt;left);</span><br><span class="line">            <span class="keyword">if</span>(cur-&gt;right)st.<span class="built_in">push</span>(cur-&gt;right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="找树左下角的值">找树左下角的值</h2><p><a href="https://leetcode.cn/problems/find-bottom-left-tree-value/description/">513. 找树左下角的值 - 力扣（LeetCode）</a></p><ul><li>层序遍历</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findBottomLeftValue</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        queue&lt;TreeNode*&gt; que;</span><br><span class="line">        <span class="type">int</span> res;</span><br><span class="line">        <span class="keyword">if</span>(!root)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        que.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span>(!que.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="type">int</span> size = que.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ; i&lt; size;i++)&#123;</span><br><span class="line">                TreeNode* tmp = que.<span class="built_in">front</span>();</span><br><span class="line">                que.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">if</span>(i == <span class="number">0</span>)res = tmp-&gt;val; <span class="comment">//最后一层的第一个节点</span></span><br><span class="line">                <span class="keyword">if</span>(tmp-&gt;left)que.<span class="built_in">push</span>(tmp-&gt;left);</span><br><span class="line">                <span class="keyword">if</span>(tmp-&gt;right)que.<span class="built_in">push</span>(tmp-&gt;right); </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="路径总和">路径总和</h2><p><a href="https://leetcode.cn/problems/path-sum/description/">112. 路径总和 - 力扣（LeetCode）</a></p><blockquote><p>递归三部曲：</p><ol><li>根节点root，计数器count，返回值为bool<ul><li>让计数器count初始为目标和，然后每次减去遍历路径节点上的数值。</li></ul></li><li>当遇到叶子节点且count==0时，返回true，反之false</li><li>回溯！！</li></ol></blockquote><blockquote><p>递归函数什么时候需要返回值？什么时候不需要返回值？这里总结如下三点：</p><ul><li>如果需要搜索整棵二叉树且<strong>不用</strong>处理递归返回值，递归函数就不要返回值</li><li>如果需要搜索整棵二叉树且<strong>需要</strong>处理递归返回值，递归函数就需要返回值。</li><li>如果要<strong>搜索其中一条符合条件的路径</strong>，那么递归一定需要返回值，因为遇到符合条件的路径了就要及时返回。（本题的情况）</li></ul></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">func</span><span class="params">(TreeNode* cur,<span class="type">int</span> sum)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!cur-&gt;left &amp;&amp; !cur-&gt;right &amp;&amp; sum == <span class="number">0</span>)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(!cur-&gt;left &amp;&amp; cur-&gt;right)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(cur-&gt;left)&#123;</span><br><span class="line">            sum -= cur-&gt;left-&gt;val;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">func</span>(cur-&gt;left,sum))<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            sum+=cur-&gt;left-&gt;val;<span class="comment">//回溯</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(cur-&gt;right)&#123;</span><br><span class="line">            sum -= cur-&gt;right-&gt;val;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">func</span>(cur-&gt;right,sum))<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            sum+=cur-&gt;right-&gt;val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">hasPathSum</span><span class="params">(TreeNode* root, <span class="type">int</span> targetSum)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">func</span>(root,targetSum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/path-sum-ii/">113. 路径总和 II - 力扣（LeetCode）</a></p>]]></content>
    
    
    <summary type="html">代码随想录刷题笔记</summary>
    
    
    
    <category term="算法" scheme="https://blog.xing-ye.top/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="代码随想录" scheme="https://blog.xing-ye.top/tags/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>MQ（消息队列）</title>
    <link href="https://blog.xing-ye.top/posts/MQ/"/>
    <id>https://blog.xing-ye.top/posts/MQ/</id>
    <published>2024-04-14T07:09:59.000Z</published>
    <updated>2024-06-03T07:29:51.476Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><blockquote><p>在此感谢黑马程序员提供的<a href="https://www.bilibili.com/video/BV1LQ4y127n4?p=62&amp;vd_source=39cd09fae5d0f121c16eee7c134119f6">MQ课程</a>！</p><p>UPD:补充之前未完结内容</p></blockquote><h2 id="初识MQ">初识MQ</h2><p><a name="nFc5v"></a></p><h3 id="同步和异步通讯">同步和异步通讯</h3><ul><li>微服务间通讯有同步和异步两种方式<ul><li>同步通讯：就像打电话，需要实时响应，而且通话期间，不能响应其他的电话，当有其他妹子给你打电话的时候，就容易错失良机。时效性强</li><li>异步通讯：就像发邮件，QQ/微信聊天，不需要马上回复。可以同时给多个妹子发消息，支持多线操作，时间管理大师的必备技能。时效性弱</li></ul></li><li>两种方式各有优劣，打电话可以立即得到响应，但是却不能与多个人同时通话，发送邮件可以同时与多个人收发邮件，但是往往响应会有延迟<br><a name="wPryX"></a></li></ul><h4 id="同步通讯">同步通讯</h4><ul><li>我们之前学习的Feign调用就属于同步方式，虽然调用可以实时得到结果，但是存在一些问题。订单服务，仓储服务，短信服务是和我们的支付服务耦合在一起的。</li><li>例如产品经理一拍脑门，让加一个业务，然后你就需要去支付服务中改动代码，让你删除某个服务，也需要去支付服务中改动代码，耦合度太高了</li><li>同时，性能也是一个问题，例如支付服务需要50ms，另外三个服务各需要150ms，那么一个完整的支付服务就需要恐怖的0.5s，也就是一秒只能完成两个请求，这么低的并发，还玩个锤子。</li><li>支付服务在等待订单服务完成的时候，也在占用着CPU和内存，却啥也不干，浪费系统资源。</li><li>假如这时仓储服务还挂掉了，那么请求就会卡在这里，如果积压了很多的请求，支付服务就会将系统资源耗尽，从而整个支付服务都挂掉了</li><li>综上所述，同步调用存在以下问题<ol><li>耦合度高：每次加入新的请求，都需要修改原来的代码</li><li>性能下降：调用者需要等待服务提供者响应，如果调用链过长，则响应时间等于每次调用服务的时间之和</li><li>资源浪费：调用链中的每个服务在等待响应过程中，不能释放请求占用资源，高并发场景下会极度浪费系统资源</li><li>级联失败：如果服务提供者出现问题，那么调用方都会跟着出现问题，就像多米诺骨牌一样，迅速导致整个微服务故障<br><a name="eNrQS"></a></li></ol></li></ul><h4 id="异步通讯">异步通讯</h4><ul><li>异步调用可以避免上述问题<ul><li>我们以购买商品为例，用户支付后需要调用订单服务完成订单状态修改，调用物流服务，从仓库分配响应的库存并准备发货</li><li>在事件模式中，支付服务是事件发布者(publisher)，在支付完成后只需要发布一个支付成功的事件(event)，事件中带上订单id，</li><li>订单服务和物流服务是事件订阅者(Consumer)，订阅支付成功的事件，监听到事件后完成自己的业务即可</li></ul></li><li>为了解除事件发布者与订阅者之间的耦合，两者并不是直接通信，而是由一个中间人(Broker)来代理。发布者发布事件到Broker，不关心谁来订阅的事件。而订阅者从Broker订阅事件，不关心是谁发布的事件</li><li>那么此时产品经理让你添加一个新服务时，你只需要让新服务来订阅事件就好了，而取消一个服务，也只需要让其取消订阅事件，并不需要修改订单服务，这样就解除了服务之间的耦合</li><li>同时也能带来性能上的提升，之前我们完成一个支付服务，需要耗时500ms，而现在支付服务只需要向Broker发布一个支付成功的事件，剩下的就不用它管了，这样只需要60ms就能完成支付服务</li><li>服务没有强依赖，不用担心级联失败问题。在之前，如果仓储服务挂掉了，那么支付服务无法完成，占用资源。此时更多的请求过来，支付服务就会耗尽系统资源，从而整个支付服务都瘫痪了。但是现在，仓储服务就算挂掉了，也丝毫不会影响到我们的支付服务，同时支付服务也不需要等待存储服务完成，期间也不会占用无意义的系统资源。</li><li>流量削峰：不管发布事件的流量波动多大，都由Broker接收，订阅者可以按照自己的速度去处理事件。</li><li>我们发现整个异步通讯过程中，所有东西都是依赖于Broker来实现的，那么如果Broker挂了，整个微服务也完蛋了。</li><li>异步通讯的优点<ul><li>耦合度低</li><li>吞吐量提升</li><li>故障隔离</li><li>流量削峰</li></ul></li><li>异步通讯的缺点<ul><li>依赖于Broker的可靠性、安全性、吞吐能力</li><li>架构复杂时，业务没有明确的流程线，不好追踪管理（出了bug都不好找）</li></ul></li><li>好在现在开源平台上的 Broker 的软件是非常成熟的，比较常见的一种就是我们这里要学习的MQ技术。<br><a name="KZ78Q"></a></li></ul><h3 id="技术对比">技术对比</h3><ul><li>MQ(MessageQueue)中文是消息队列，字面意思就是存放消息的队列，也就是事件驱动中的Broker</li><li>比较常见的MQ实现<ul><li>ActiveMQ</li><li>RabbitMQ</li><li>RockerMQ</li><li>Kafka</li></ul></li><li>几种常见的MQ对比</li></ul><table><thead><tr><th></th><th><strong>RabbitMQ</strong></th><th><strong>ActiveMQ</strong></th><th><strong>RocketMQ</strong></th><th><strong>Kafka</strong></th></tr></thead><tbody><tr><td>公司/社区</td><td>Rabbit</td><td>Apache</td><td>阿里</td><td>Apache</td></tr><tr><td>开发语言</td><td>Erlang</td><td>Java</td><td>Java</td><td>Scala&amp;Java</td></tr><tr><td>协议支持</td><td>AMQP，XMPP，SMTP，STOMP</td><td>OpenWire,STOMP，REST,XMPP,AMQP</td><td>自定义协议</td><td>自定义协议</td></tr><tr><td>可用性</td><td>高</td><td>一般</td><td>高</td><td>高</td></tr><tr><td>单机吞吐量</td><td>一般</td><td>差</td><td>高</td><td>非常高</td></tr><tr><td>消息延迟</td><td>微秒级</td><td>毫秒级</td><td>毫秒级</td><td>毫秒以内</td></tr><tr><td>消息可靠性</td><td>高</td><td>一般</td><td>高</td><td>一般</td></tr></tbody></table><ul><li>追求可用性：Kafka、RockerMQ、RabbitMQ</li><li>追求可靠性：RabbitMQ、RocketMQ</li><li>追求吞吐能力：RocketMQ、Kafka</li><li>追求消息低延迟：RabbitMQ、Kafka<br><a name="MsJla"></a></li></ul><h2 id="快速入门">快速入门</h2><p><a name="CDqPy"></a></p><h3 id="安装RabbitMQ">安装RabbitMQ</h3><ul><li>这里是在CentOS 7虚拟机中使用Docker安装的</li><li>拉取镜像</li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker</span> pull rabbitmq:<span class="number">3</span>-management</span><br></pre></td></tr></table></figure><ul><li>使用docker images查看是否已经成功拉取，之后启动一个RabbitMQ容器</li></ul><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker run <span class="string">\</span></span><br><span class="line">  -e RABBITMQ_DEFAULT_USER=root <span class="string">\</span></span><br><span class="line">  -e RABBITMQ_DEFAULT_PASS=root <span class="string">\</span></span><br><span class="line">  --name mq <span class="string">\</span></span><br><span class="line">  --hostname mq1 <span class="string">\</span></span><br><span class="line">  -p <span class="number">15672</span>:<span class="number">15672</span> <span class="string">\</span></span><br><span class="line">  -p <span class="number">5672</span>:<span class="number">5672</span> <span class="string">\</span></span><br><span class="line">  -d <span class="string">\</span></span><br><span class="line">  rabbitmq:<span class="number">3</span>-management</span><br></pre></td></tr></table></figure><ul><li>其中：两个环境变量分别配置登录用户和密码，15672是rabbitMQ的管理平台的端口，5672是将来做消息通信的端口</li><li>容器启动成功之后，我们输入虚拟机ip:15672访问RabbitMQ的管理平台</li></ul><p><img src="https://s2.loli.net/2024/04/14/3B1TtVcLsGdbnPW.png" alt="image.png"><br />RabbitMQ中的一些角色：</p><ul><li>publisher：生产者</li><li>consumer：消费者</li><li>exchange：交换机，负责消息路由</li><li>queue：队列，存储消息</li><li>virtualHost：虚拟主机，隔离不同租户的exchange、queue、消息的隔离</li></ul><p><img src="https://s2.loli.net/2024/04/14/TaXWEtUIecJ17pK.png" alt="zXht8U.png"><br><a name="GagMO"></a></p><h3 id="RabbitMQ消息类型">RabbitMQ消息类型</h3><ul><li>RabbitMQ官方提供了5个不同的Demo实例，对应了不同的消息模型<ol><li>基本消息类型(BasicQueue)</li><li>工作消息队列(WorkQueue)</li></ol><ul><li>其中发布订阅(Publish、Subscribe)，又根据交换机类型不同，分为三种<ol><li>广播(Fanout Exchange)</li><li>路由(Direct Exchange)</li><li>主题(Topic Exchange)<br><a name="C0hkI"></a></li></ol></li></ul></li></ul><h3 id="导入Demo工程">导入Demo工程</h3><ul><li>包括三部分：<ul><li>mq-demo：父工程，管理项目依赖</li><li>publisher：消息的发送者</li><li>consumer：消息的消费者<br><a name="UfLnM"></a></li></ul></li></ul><h3 id="入门案例">入门案例</h3><p><a href="https://rabbitmq.com/tutorials/tutorial-one-java.html">RabbitMQ tutorial - “Hello World!” | RabbitMQ</a></p><blockquote><p>RabbitMQ 是一个消息代理：它接受和转发消息。您可以把它想象成一个邮局：当您将要投寄的邮件放入邮箱时，您可以确定邮递员最终会将邮件投递给您的收件人。在这个类比中，RabbitMQ 是一个邮箱、一个邮局和一个邮递员。<br />RabbitMQ 和邮局之间的主要区别在于它不处理纸张，而是接受、存储和转发二进制数据块——消息。</p></blockquote><ul><li>官方的HelloWorld是基于最基础的消息队列模型来实现的，只包括三个角色：<ul><li>publisher：消息发布者，将消息发送到队列queue</li><li>queue：消息队列，负责接受并缓存消息</li><li>consumer：订阅队列，处理队列中的消息</li></ul></li></ul><p><a href="https://s2.loli.net/2024/04/14/9nTJXLmIVD2HhZc.png"><img src="https://s2.loli.net/2024/04/15/MzRnrljwFBg8pAx.png" alt=""></a><br><a name="oiM83"></a></p><h4 id="publisher实现">publisher实现</h4><ol><li>建立连接</li><li>创建Channel</li><li>声明队列</li><li>发送消息</li><li>关闭连接和Channel</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PublisherTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSendMessage</span><span class="params">()</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">        <span class="comment">// 1.建立连接</span></span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        <span class="comment">// 1.1.设置连接参数，分别是：主机名、端口号、vhost、用户名、密码</span></span><br><span class="line">        factory.setHost(<span class="string">&quot;192.168.151.128&quot;</span>);</span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line">        factory.setVirtualHost(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        factory.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        factory.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        <span class="comment">// 1.2.建立连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.创建通道Channel</span></span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.声明队列</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> <span class="string">&quot;simple.queue&quot;</span>;</span><br><span class="line">        channel.queueDeclare(queueName, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.发送消息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;hello, rabbitmq!&quot;</span>;</span><br><span class="line">        channel.basicPublish(<span class="string">&quot;&quot;</span>, queueName, <span class="literal">null</span>, message.getBytes());</span><br><span class="line">        System.out.println(<span class="string">&quot;发送消息成功：【&quot;</span> + message + <span class="string">&quot;】&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5.关闭通道和连接</span></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="ES31y"></a></p><h4 id="consumer实现">consumer实现</h4><ol><li>建立连接</li><li>创建Channel</li><li>声明队列</li><li>订阅消息</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConsumerTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">        <span class="comment">// 1.建立连接</span></span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        <span class="comment">// 1.1.设置连接参数，分别是：主机名、端口号、vhost、用户名、密码</span></span><br><span class="line">        factory.setHost(<span class="string">&quot;192.168.150.101&quot;</span>);</span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line">        factory.setVirtualHost(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        factory.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        factory.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        <span class="comment">// 1.2.建立连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.创建通道Channel</span></span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.声明队列，声明一个队列是幂等的——只有当它不存在时才会被创建，我们在这里再次声明队列可以防止队列为null</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> <span class="string">&quot;simple.queue&quot;</span>;</span><br><span class="line">        channel.queueDeclare(queueName, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.订阅消息</span></span><br><span class="line">        channel.basicConsume(queueName, <span class="literal">true</span>, <span class="keyword">new</span> <span class="title class_">DefaultConsumer</span>(channel)&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope,</span></span><br><span class="line"><span class="params">                                       AMQP.BasicProperties properties, <span class="type">byte</span>[] body)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                <span class="comment">// 5.处理消息</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(body);</span><br><span class="line">                System.out.println(<span class="string">&quot;接收到消息：【&quot;</span> + message + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(<span class="string">&quot;等待接收消息。。。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>但是这种写法，看着就很麻烦，其中设置连接参数时，和我们之前学JDBC一样，手动在代码中设置连接四要素，但是后来我们数据库的连接参数都是写在yml文件中来简化代码的，这里同理，所以我们继续往下学SpringAMQP<br><a name="PRw5u"></a></li></ul><h3 id="总结">总结</h3><ul><li>基本消息队列的消息发送流程<ol><li>建立connection</li><li>创建channel</li><li>使用channel声明队列</li><li>使用channel向队列发送消息</li></ol></li><li>基本消息队列的消息接收流程<ol><li>建立connection</li><li>创建channel</li><li>使用channel声明队列</li><li>定义consumer的消费行为handleDelivery()，也就是接收到消息后要执行的业务逻辑</li><li>利用channel将消费者与队列绑定<br><a name="Hkiti"></a></li></ol></li></ul><h2 id="SpringAMQP">SpringAMQP</h2><ul><li>SpringAMQP官方地址：<a href="https://spring.io/projects/spring-amqp%EF%BC%8C">https://spring.io/projects/spring-amqp，</a> 它是基于RabbitMQ封装的一套模板，提供了模板来发送和接收消息。包含两部分，其中spring-amqp是基础抽象，spring-rabbit是底层的默认实现，并且利用SpringBoot对其实现了自动装配，使用起来十分方便</li><li>AMQP(Advanced Message Queuing Portocol)，是用于在应用程序之间传递业务消息的开放标准。该协议与语言和平台无关，更符合微服务中独立性的要求</li><li>SpringAMQP提供了三个功能<ol><li>自动声明队列、交换机及其绑定关系</li><li>基于注解的监听模式，异步接收消息</li><li>封装了RabbitTemplate工具，用于发送消息(之前在Redis中我们也接触过RedisTemplate)<br><a name="B2Kxf"></a></li></ol></li></ul><h3 id="Basic-Queue">Basic Queue</h3><ul><li>在父工程mq-demo中引入依赖</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--AMQP依赖，包含RabbitMQ--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-amqp&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p><a name="rzTUp"></a></p><h4 id="消息发送">消息发送</h4><ul><li>首先配置MQ地址，在publisher服务的application.yml中添加配置</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  rabbitmq:</span><br><span class="line">    host: <span class="number">192.168</span><span class="number">.129</span><span class="number">.128</span> ## 主机名</span><br><span class="line">    port: <span class="number">5672</span> #端口</span><br><span class="line">    username: root ## 用户名</span><br><span class="line">    password: root ## 密码</span><br><span class="line">    virtual-host: / ## 虚拟主机</span><br></pre></td></tr></table></figure><ul><li>然后在publisher服务中编写测试类SpringAmqpTest，并利用RabbitTemplate实现消息发送，如果没有创建simple.queue，可以在RabbitMQ管理平台</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringAmqpTest</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSimpleQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> <span class="string">&quot;simple.queue&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;Hello, SpringAMQP! &quot;</span>;</span><br><span class="line">        rabbitTemplate.convertAndSend(queueName, message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="aToN2"></a></p><h4 id="消息接收">消息接收</h4><ul><li>刚刚我们已经完成了消息的发送，那么现在我们来完成消息的监听</li><li>首先配置MQ地址，在consumer服务的application.yml中添加配置</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  rabbitmq:</span><br><span class="line">    host: <span class="number">192.168</span><span class="number">.129</span><span class="number">.128</span> # 主机名</span><br><span class="line">    port: <span class="number">5672</span> #端口</span><br><span class="line">    username: root # 用户名</span><br><span class="line">    password: root # 密码</span><br><span class="line">    virtual-host: / # 虚拟主机</span><br></pre></td></tr></table></figure><ul><li>消费者要做的事情是监听消息，Spring已经帮我们跟MQ建立了连接，所以消费者只需要关心要监听哪个队列，以及监听到队列了，要干什么事儿</li><li>在consumer服务新建一个类，编写消费逻辑，其中@Component注解是将该类声明为一个Bean，这样Spring才能找到它，然后使用@RabbitListener注解声明要监听的队列，msg参数就是接收到的消息，我们可以在方法体内编写对消息的处理逻辑，但这里只是简单的输出了一下</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringRabbitListener</span> &#123;</span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;simple.queue&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenSimpleQueueMessage</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Spring 消费者接收到消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>启动consumer服务，控制台可以看到接收到的消息，并且如果多次使用publisher服务发送消息，consumer服务也会接收多次消息，表现为控制台也输出多次语句</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Spring 消费者接收到消息：【Hello, SpringAMQP! </span><br></pre></td></tr></table></figure><p><a name="CHdgS"></a></p><h4 id="小结">小结</h4><ul><li>SpringAMQP如何接收消息？<ul><li>引入amqp的starter依赖</li><li>配置RabbitMQ地址</li><li>定义类，添加@Component注解</li><li>类中声明方法，添加@RabbitListener注解，方法参数就时消息<br><a name="zGpk1"></a></li></ul></li></ul><h4 id="问题-SpringBoot整合rabbitmq-“Failed-to-declare-queue-s">问题[SpringBoot整合rabbitmq “Failed to declare queue(s)]</h4><ul><li>原因：没有自动创建队列</li></ul><p><a href="https://blog.csdn.net/shang_0122/article/details/117404515">【完美解决】SpringBoot整合rabbitmq “Failed to declare queue(s)“_org.springframework.amqp.rabbit.listener.blockingq-CSDN博客</a></p><p>注意：消息一旦消费就会从队列删除，RabbitMQ没有消息回溯功能<br><a name="QTIRn"></a></p><h3 id="Wrok-Queue">Wrok Queue</h3><ul><li>Work Queue，也被称为(Task queues)，任务模型。简单来说就是让多个消费者绑定到一个队列，共同消费队列中的信息。</li><li>当消息处理比较耗时的时候，可能生产消息的速度会远远大于消息的消费速度，长此以往，消息就会堆积的越来越多，无法及时处理。</li><li>此时就可以使用Work模型，多个消费者共同处理消息，那么处理速度就能大大提高了</li></ul><p><img src="https://s2.loli.net/2024/04/14/2hgGHzCiXR9lNjn.png" alt="zjV3ee.md.png"><br><a name="ospZE"></a></p><h4 id="消息发送-2">消息发送</h4><ul><li>这次我们循环发送消息，模拟大量消息堆积的场景</li><li>在publisher服务中的SpringAmqpTest类中新增测试方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testWorkQueue</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> <span class="string">&quot;simple.queue&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;Hello, SpringAMQP! __ &quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">50</span>; i++) &#123;</span><br><span class="line">    <span class="comment">// 循环发送50条消息，带上消息编号</span></span><br><span class="line">    rabbitTemplate.convertAndSend(queueName, message + i);</span><br><span class="line">    <span class="comment">// 休眠20ms，模拟在1s内发送完</span></span><br><span class="line">    Thread.sleep(<span class="number">20</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="RXeO8"></a></p><h4 id="消息接收-2">消息接收</h4><ul><li>要模拟多个消费者绑定同一个队列，我们在consumer服务的SpringRabbitListener中添加两个方法</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">消费者2........接收到消息：【Hello, SpringAMQP! __ 1】2024-04-04T23:32:43.870720300</span><br><span class="line">消费者1 接收到消息：【Hello, SpringAMQP! __ 2】2024-04-04T23:32:43.898725800</span><br><span class="line">消费者1 接收到消息：【Hello, SpringAMQP! __ 4】2024-04-04T23:32:43.960735400</span><br><span class="line">消费者1 接收到消息：【Hello, SpringAMQP! __ 6】2024-04-04T23:32:44.022273200</span><br><span class="line">消费者2........接收到消息：【Hello, SpringAMQP! __ 3】2024-04-04T23:32:44.081791500</span><br><span class="line">消费者1 接收到消息：【Hello, SpringAMQP! __ 8】2024-04-04T23:32:44.083791800</span><br><span class="line">消费者1 接收到消息：【Hello, SpringAMQP! __ 10】2024-04-04T23:32:44.144745800</span><br><span class="line">消费者1 接收到消息：【Hello, SpringAMQP! __ 12】2024-04-04T23:32:44.205654600</span><br><span class="line">消费者1 接收到消息：【Hello, SpringAMQP! __ 14】2024-04-04T23:32:44.266990500</span><br><span class="line">消费者2........接收到消息：【Hello, SpringAMQP! __ 5】2024-04-04T23:32:44.297541900</span><br><span class="line">消费者1 接收到消息：【Hello, SpringAMQP! __ 16】2024-04-04T23:32:44.329094</span><br><span class="line">消费者1 接收到消息：【Hello, SpringAMQP! __ 18】2024-04-04T23:32:44.389788900</span><br><span class="line">消费者1 接收到消息：【Hello, SpringAMQP! __ 20】2024-04-04T23:32:44.451317400</span><br><span class="line">消费者2........接收到消息：【Hello, SpringAMQP! __ 7】2024-04-04T23:32:44.512744900</span><br><span class="line">消费者1 接收到消息：【Hello, SpringAMQP! __ 22】2024-04-04T23:32:44.513242300</span><br><span class="line">消费者1 接收到消息：【Hello, SpringAMQP! __ 24】2024-04-04T23:32:44.574556300</span><br><span class="line">消费者1 接收到消息：【Hello, SpringAMQP! __ 26】2024-04-04T23:32:44.635922900</span><br><span class="line">消费者1 接收到消息：【Hello, SpringAMQP! __ 28】2024-04-04T23:32:44.697999600</span><br><span class="line">消费者2........接收到消息：【Hello, SpringAMQP! __ 9】2024-04-04T23:32:44.712974500</span><br><span class="line">消费者1 接收到消息：【Hello, SpringAMQP! __ 30】2024-04-04T23:32:44.760138300</span><br><span class="line">消费者1 接收到消息：【Hello, SpringAMQP! __ 32】2024-04-04T23:32:44.821804</span><br><span class="line">消费者1 接收到消息：【Hello, SpringAMQP! __ 34】2024-04-04T23:32:44.882684600</span><br><span class="line">消费者2........接收到消息：【Hello, SpringAMQP! __ 11】2024-04-04T23:32:44.915548800</span><br><span class="line">消费者1 接收到消息：【Hello, SpringAMQP! __ 36】2024-04-04T23:32:44.945552900</span><br><span class="line">消费者1 接收到消息：【Hello, SpringAMQP! __ 38】2024-04-04T23:32:45.006059500</span><br><span class="line">消费者1 接收到消息：【Hello, SpringAMQP! __ 40】2024-04-04T23:32:45.068744900</span><br><span class="line">消费者2........接收到消息：【Hello, SpringAMQP! __ 13】2024-04-04T23:32:45.130050100</span><br><span class="line">消费者1 接收到消息：【Hello, SpringAMQP! __ 42】2024-04-04T23:32:45.131048800</span><br><span class="line">消费者1 接收到消息：【Hello, SpringAMQP! __ 44】2024-04-04T23:32:45.191879500</span><br><span class="line">消费者1 接收到消息：【Hello, SpringAMQP! __ 46】2024-04-04T23:32:45.253369100</span><br><span class="line">消费者1 接收到消息：【Hello, SpringAMQP! __ 48】2024-04-04T23:32:45.314036800</span><br><span class="line">消费者2........接收到消息：【Hello, SpringAMQP! __ 15】2024-04-04T23:32:45.345106</span><br><span class="line">消费者1 接收到消息：【Hello, SpringAMQP! __ 50】2024-04-04T23:32:45.377111600</span><br><span class="line">消费者2........接收到消息：【Hello, SpringAMQP! __ 17】2024-04-04T23:32:45.546052800</span><br><span class="line">消费者2........接收到消息：【Hello, SpringAMQP! __ 19】2024-04-04T23:32:45.747588100</span><br><span class="line">消费者2........接收到消息：【Hello, SpringAMQP! __ 21】2024-04-04T23:32:45.949622900</span><br><span class="line">消费者2........接收到消息：【Hello, SpringAMQP! __ 23】2024-04-04T23:32:46.150704900</span><br><span class="line">消费者2........接收到消息：【Hello, SpringAMQP! __ 25】2024-04-04T23:32:46.351616500</span><br><span class="line">消费者2........接收到消息：【Hello, SpringAMQP! __ 27】2024-04-04T23:32:46.566165800</span><br><span class="line">消费者2........接收到消息：【Hello, SpringAMQP! __ 29】2024-04-04T23:32:46.781618500</span><br><span class="line">消费者2........接收到消息：【Hello, SpringAMQP! __ 31】2024-04-04T23:32:46.982232400</span><br><span class="line">消费者2........接收到消息：【Hello, SpringAMQP! __ 33】2024-04-04T23:32:47.182955100</span><br><span class="line">消费者2........接收到消息：【Hello, SpringAMQP! __ 35】2024-04-04T23:32:47.383377100</span><br><span class="line">消费者2........接收到消息：【Hello, SpringAMQP! __ 37】2024-04-04T23:32:47.586712800</span><br><span class="line">消费者2........接收到消息：【Hello, SpringAMQP! __ 39】2024-04-04T23:32:47.798942800</span><br><span class="line">消费者2........接收到消息：【Hello, SpringAMQP! __ 41】2024-04-04T23:32:48.013549900</span><br><span class="line">消费者2........接收到消息：【Hello, SpringAMQP! __ 43】2024-04-04T23:32:48.228424300</span><br><span class="line">消费者2........接收到消息：【Hello, SpringAMQP! __ 45】2024-04-04T23:32:48.443563300</span><br><span class="line">消费者2........接收到消息：【Hello, SpringAMQP! __ 47】2024-04-04T23:32:48.658075200</span><br><span class="line">消费者2........接收到消息：【Hello, SpringAMQP! __ 49】2024-04-04T23:32:48.873802700</span><br></pre></td></tr></table></figure><ul><li>可以看到消费者1很快就完成了自己的25条消息，消费者2却在缓慢的处理自己的25条消息</li><li>也就是说当前的处理方式是平均分配给每个消费者，并没有按照我们设定的处理能力来处理消息，这样显然是有问题的，消费者2很大概率会出现消息积压的风险<br><a name="l2Xjs"></a></li></ul><h4 id="能者多劳">能者多劳</h4><ul><li>在spring中有一个简单的配置，可以解决这个问题。我们修改consumer服务中的application.yml文件，添加如下配置</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  rabbitmq:</span><br><span class="line">    listener:</span><br><span class="line">      simple:</span><br><span class="line">        prefetch: 1 <span class="comment">## 每次只能获取一条消息，处理完成才能获取下一个消息</span></span><br></pre></td></tr></table></figure><ul><li>重启服务 查看控制台</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">消费者2........接收到消息：【Hello, SpringAMQP! __ 1】2024-04-04T23:36:09.723569300</span><br><span class="line">消费者1 接收到消息：【Hello, SpringAMQP! __ 2】2024-04-04T23:36:09.747073200</span><br><span class="line">消费者1 接收到消息：【Hello, SpringAMQP! __ 3】2024-04-04T23:36:09.778078100</span><br><span class="line">消费者1 接收到消息：【Hello, SpringAMQP! __ 4】2024-04-04T23:36:09.809084</span><br><span class="line">消费者1 接收到消息：【Hello, SpringAMQP! __ 5】2024-04-04T23:36:09.840089</span><br><span class="line">消费者1 接收到消息：【Hello, SpringAMQP! __ 6】2024-04-04T23:36:09.871129200</span><br><span class="line">消费者1 接收到消息：【Hello, SpringAMQP! __ 7】2024-04-04T23:36:09.900933200</span><br><span class="line">消费者1 接收到消息：【Hello, SpringAMQP! __ 8】2024-04-04T23:36:09.932457200</span><br><span class="line">消费者2........接收到消息：【Hello, SpringAMQP! __ 9】2024-04-04T23:36:09.962434200</span><br><span class="line">消费者1 接收到消息：【Hello, SpringAMQP! __ 10】2024-04-04T23:36:09.993487800</span><br><span class="line">消费者1 接收到消息：【Hello, SpringAMQP! __ 11】2024-04-04T23:36:10.024582100</span><br><span class="line">消费者1 接收到消息：【Hello, SpringAMQP! __ 12】2024-04-04T23:36:10.055216700</span><br><span class="line">消费者1 接收到消息：【Hello, SpringAMQP! __ 13】2024-04-04T23:36:10.085725800</span><br><span class="line">消费者1 接收到消息：【Hello, SpringAMQP! __ 14】2024-04-04T23:36:10.116912700</span><br><span class="line">消费者1 接收到消息：【Hello, SpringAMQP! __ 15】2024-04-04T23:36:10.147798200</span><br><span class="line">消费者1 接收到消息：【Hello, SpringAMQP! __ 16】2024-04-04T23:36:10.178680100</span><br><span class="line">消费者2........接收到消息：【Hello, SpringAMQP! __ 17】2024-04-04T23:36:10.208722</span><br><span class="line">消费者1 接收到消息：【Hello, SpringAMQP! __ 18】2024-04-04T23:36:10.239418300</span><br><span class="line">消费者1 接收到消息：【Hello, SpringAMQP! __ 19】2024-04-04T23:36:10.270250200</span><br><span class="line">消费者1 接收到消息：【Hello, SpringAMQP! __ 20】2024-04-04T23:36:10.300922800</span><br><span class="line">消费者1 接收到消息：【Hello, SpringAMQP! __ 21】2024-04-04T23:36:10.332110</span><br><span class="line">消费者1 接收到消息：【Hello, SpringAMQP! __ 22】2024-04-04T23:36:10.363149500</span><br><span class="line">消费者1 接收到消息：【Hello, SpringAMQP! __ 23】2024-04-04T23:36:10.393654900</span><br><span class="line">消费者1 接收到消息：【Hello, SpringAMQP! __ 24】2024-04-04T23:36:10.424660500</span><br><span class="line">消费者2........接收到消息：【Hello, SpringAMQP! __ 25】2024-04-04T23:36:10.455666200</span><br><span class="line">消费者1 接收到消息：【Hello, SpringAMQP! __ 26】2024-04-04T23:36:10.485687</span><br><span class="line">消费者1 接收到消息：【Hello, SpringAMQP! __ 27】2024-04-04T23:36:10.516704800</span><br><span class="line">消费者1 接收到消息：【Hello, SpringAMQP! __ 28】2024-04-04T23:36:10.547736300</span><br><span class="line">消费者1 接收到消息：【Hello, SpringAMQP! __ 29】2024-04-04T23:36:10.579244400</span><br><span class="line">消费者1 接收到消息：【Hello, SpringAMQP! __ 30】2024-04-04T23:36:10.609749900</span><br><span class="line">消费者1 接收到消息：【Hello, SpringAMQP! __ 31】2024-04-04T23:36:10.640029</span><br><span class="line">消费者1 接收到消息：【Hello, SpringAMQP! __ 32】2024-04-04T23:36:10.669832600</span><br><span class="line">消费者2........接收到消息：【Hello, SpringAMQP! __ 33】2024-04-04T23:36:10.700268</span><br><span class="line">消费者1 接收到消息：【Hello, SpringAMQP! __ 34】2024-04-04T23:36:10.731386</span><br><span class="line">消费者1 接收到消息：【Hello, SpringAMQP! __ 35】2024-04-04T23:36:10.761577300</span><br><span class="line">消费者1 接收到消息：【Hello, SpringAMQP! __ 36】2024-04-04T23:36:10.792810100</span><br><span class="line">消费者1 接收到消息：【Hello, SpringAMQP! __ 37】2024-04-04T23:36:10.823816700</span><br><span class="line">消费者1 接收到消息：【Hello, SpringAMQP! __ 38】2024-04-04T23:36:10.854973900</span><br><span class="line">消费者1 接收到消息：【Hello, SpringAMQP! __ 39】2024-04-04T23:36:10.884882900</span><br><span class="line">消费者1 接收到消息：【Hello, SpringAMQP! __ 40】2024-04-04T23:36:10.915442700</span><br><span class="line">消费者2........接收到消息：【Hello, SpringAMQP! __ 41】2024-04-04T23:36:10.945892</span><br><span class="line">消费者1 接收到消息：【Hello, SpringAMQP! __ 42】2024-04-04T23:36:10.976596100</span><br><span class="line">消费者1 接收到消息：【Hello, SpringAMQP! __ 43】2024-04-04T23:36:11.006946100</span><br><span class="line">消费者1 接收到消息：【Hello, SpringAMQP! __ 44】2024-04-04T23:36:11.038451800</span><br><span class="line">消费者1 接收到消息：【Hello, SpringAMQP! __ 45】2024-04-04T23:36:11.068740500</span><br><span class="line">消费者1 接收到消息：【Hello, SpringAMQP! __ 46】2024-04-04T23:36:11.098638100</span><br><span class="line">消费者1 接收到消息：【Hello, SpringAMQP! __ 47】2024-04-04T23:36:11.129702300</span><br><span class="line">消费者1 接收到消息：【Hello, SpringAMQP! __ 48】2024-04-04T23:36:11.160245700</span><br><span class="line">消费者2........接收到消息：【Hello, SpringAMQP! __ 49】2024-04-04T23:36:11.190061500</span><br><span class="line">消费者1 接收到消息：【Hello, SpringAMQP! __ 50】2024-04-04T23:36:11.221430400</span><br></pre></td></tr></table></figure><p><a name="Pff6m"></a></p><h4 id="总结-2">总结</h4><ul><li>Wrok模型的使用：<ul><li>多个消费者绑定到一个队列，同一条消息只会被一个消费者处理</li><li>通过设置prefetch来控制消费者预取的消息数量<br><a name="AG3vC"></a></li></ul></li></ul><h3 id="发布订阅">发布订阅</h3><ul><li>发布订阅的模型如图</li><li>可以看到，在订阅模型中，多了一个exchange角色，而且过程略有变化<ul><li>Publisher：生产者，也就是要发送消息的程序，但是不再发送到队列中，而是发送给exchange(交换机)</li><li>Exchange：交换机。一方面，接收生产者发送的消息；另一方面，知道如何处理消息，例如递交给某个特别队列、递交给所有队列、或者是将消息对其。到底如何操作，取决于Exchange的类型。Exchange有以下三种类型<ol><li>Fanout：广播，将消息交给所有绑定到交换机的队列</li><li>Direct：定向，把消息交给符合指定routing key的队列</li><li>Topic：通配符，把消息交给符合routing pattern(路由模式)的队列</li></ol></li><li>Consumer：消费者，与以前一样，订阅队列，没有变化</li><li>Queue：消息队列也与之前一样，接收消息，缓存消息</li></ul></li></ul><p>Exchange(交换机)只负责转发消息，不具备存储消息的能力。因此如果没有任何队列与Exchange绑定，或者没有符合路由规则的队列，那么消息会丢失！<br><a name="mCYVG"></a></p><h3 id="Fanout">Fanout</h3><ul><li>Fanout直译是扇出，但是在MQ中叫<code>广播</code>更合适<br><img src="https://s1.ax1x.com/2022/12/23/zjaUEj.md.png" alt="zjaUEj.md.png"></li><li>在广播模式下，消息发送流程是这样的<ol><li>可以存在多个队列</li><li>每个队列都要绑定到Exchange(交换机)</li><li>生产者发送消息，只能发送到交换机，交换机来决定要发给哪个队列，而不是生产者来决定</li><li>交换机把消息发送给绑定过的所有队列</li><li>订阅队列的消费者都能拿到消息</li></ol></li></ul><h4 id="声明队列和交换机">声明队列和交换机</h4><ul><li>Spring提供了一个接口Exchange，来表示所有不同类型的交换机<br><img src="https://s1.ax1x.com/2022/12/23/zjd0dH.md.png" alt="zjd0dH.md.png"></li><li>在consumer中创建一个类，声明队列和交换机</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Binding;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.BindingBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.FanoutExchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FanoutConfig</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 声明交换机</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Fanout类型交换机</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> FanoutExchange <span class="title function_">fanoutExchange</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FanoutExchange</span>(<span class="string">&quot;exchange&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 第1个队列</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">queue1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;queue1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 绑定第1个队列和交换机</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">bindingQueue1</span><span class="params">(Queue queue1, FanoutExchange fanoutExchange)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queue1).to(fanoutExchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 第2个队列</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    Queue <span class="title function_">queue2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;queue2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 绑定第2个队列和交换机</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">bindingQueue2</span><span class="params">(Queue queue2, FanoutExchange fanoutExchange)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queue2).to(fanoutExchange);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="消息发送-3">消息发送</h4><ul><li>在<code>publisher</code>服务的<code>SpringAmqpTest</code>类中添加测试方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFanoutExchange</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">exchangeName</span> <span class="operator">=</span> <span class="string">&quot;exchange&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;Hello Everyone~&quot;</span>;</span><br><span class="line">    rabbitTemplate.convertAndSend(exchangeName, <span class="string">&quot;&quot;</span>, message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="消息接收-3">消息接收</h4><ul><li>在<code>consumer</code>服务的<code>SpringRabbitListener</code>中添加两个方法作为消费者</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queues = &quot;queue1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenFanoutQueue1</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者1收到广播消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RabbitListener(queues = &quot;queue2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenFanoutQueue2</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者2收到广播消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>重启<code>consumer</code>服务，运行<code>publisher</code>中新编写的测试方法，控制台输出如下</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">消费者1收到广播消息：【Hello Everyone~】</span><br><span class="line">消费者2收到广播消息：【Hello Everyone~】</span><br></pre></td></tr></table></figure><h4 id="总结-3">总结</h4><ul><li>交换机的作用是什么？<ol><li>接收<code>publisher</code>发送的消息</li><li>将消息按照规则路由到与之<code>绑定</code>的队列</li><li><code>不能缓存消息</code>，路由失败，消息丢失</li><li>FanoutExchange会将消息路由到每个绑定的队列</li></ol></li><li>声明队列、交换机、绑定关系的Bean是什么？<ul><li><code>Queue</code></li><li><code>FanoutExchange</code></li><li><code>Binding</code></li></ul></li></ul><h3 id="Direct">Direct</h3><ul><li><p>在<code>Fanout</code>模式中，一条消息，会被所有订阅的队列都消费，但是在某些场景下，我们希望不同的消息被不同的队列消费，这时就要用到Direct类型的Exchange</p></li><li><p>在<code>Direct</code> 模型下</p><ul><li>队列与虚拟机绑定，不能是任意绑定了，而是需要指定一个<code>RoutingKey</code>(路由key)</li><li>消息的发送方在向Exchange发送消息时，也必须指定消息的<code>RoutingKey</code>。</li><li>Exchange不再把消息交给每一个绑定的队列，而是根据消息的<code>RoutingKey</code>进行判断，只有队列的RoutingKey与消息的RoutingKey<code>完全一致</code>，才会收到消息</li></ul></li></ul><blockquote><p>案例需求如下：</p><ol><li>路由<code>RabbitListener</code>声明<code>Exchange</code>、<code>Queue</code>、<code>RoutingKey</code></li><li>在<code>consumer</code>服务中，编写两个消费者方法，分别监听<code>direct.queue1</code>和<code>direct.queue2</code></li><li>在<code>publisher</code>中编写测试方法，向<code>directExchange</code>发送消息</li></ol></blockquote><h4 id="基于注解声明队列和交换机">基于注解声明队列和交换机</h4><ul><li>基于Bean的方式声明队列与交换机比较麻烦，所以Spring还提供了<code>基于注解方式</code>来声明</li><li>在<code>consumer</code>的<code>SpringRabbitListener</code>中添加两个消费者，同时基于注解来声明队列和交换机</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">        value = @Queue(name = &quot;direct.queue1&quot;),</span></span><br><span class="line"><span class="meta">        exchange = @Exchange(name = &quot;directExchange&quot;, type = ExchangeTypes.DIRECT),</span></span><br><span class="line"><span class="meta">        key = &#123;&quot;Apex&quot;, &quot;DeepRock&quot;&#125;</span></span><br><span class="line"><span class="meta">))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenDirectQueue1</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者收到direct.queue1的消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">        value = @Queue(name = &quot;direct.queue2&quot;),</span></span><br><span class="line"><span class="meta">        exchange = @Exchange(name = &quot;directExchange&quot;, type = ExchangeTypes.DIRECT),</span></span><br><span class="line"><span class="meta">        key = &#123;&quot;Apex&quot;, &quot;Terraria&quot;&#125;</span></span><br><span class="line"><span class="meta">))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenDirectQueue2</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者收到direct.queue2的消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="消息发送-4">消息发送</h4><ul><li><p>在<code>publisher</code>服务的<code>SpringAmqpTest类</code>中添加测试方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Test1</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDirectExchange</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">exchangeName</span> <span class="operator">=</span> <span class="string">&quot;directExchange&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;Test11111&quot;</span>;</span><br><span class="line">    rabbitTemplate.convertAndSend(exchangeName, <span class="string">&quot;Test1&quot;</span>, message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Test2</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDirectExchange</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">exchangeName</span> <span class="operator">=</span> <span class="string">&quot;directExchange&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;Test33333&quot;</span>;</span><br><span class="line">    rabbitTemplate.convertAndSend(exchangeName, <span class="string">&quot;Test2&quot;</span>, message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Test3</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDirectExchange</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">exchangeName</span> <span class="operator">=</span> <span class="string">&quot;directExchange&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;Test33333&quot;</span>;</span><br><span class="line">    rabbitTemplate.convertAndSend(exchangeName, <span class="string">&quot;Test3&quot;</span>, message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行以上三个测试方法，控制台输出如下</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">消费者收到direct.queue2的消息：【Test33333】</span><br><span class="line">消费者收到direct.queue1的消息：【Test33333】</span><br><span class="line">消费者收到direct.queue1的消息：【Test11111】</span><br><span class="line">消费者收到direct.queue2的消息：【Test22222】</span><br></pre></td></tr></table></figure></li></ul><h4 id="总结-4">总结</h4><ul><li><p><code> Direct</code>交换机与<code>Fanout</code>交换机的差异？</p><ul><li><code>Fanout</code>交换机将信息路由给每一个与之绑定的队列</li><li><code>Direct</code>交换机根据RoutingKey判断路由给哪个队列</li><li>如果多个队列具有相同的<code>RoutingKey</code>，则与<code>Fanout</code>功能类似，路由给每一个路由匹配的队列</li></ul></li><li><p>基于<code>@RabbitListener</code>注解声明队列和交换机有哪些常见的注解？</p><ul><li><code>@QueueBinding</code></li><li><code>@Queue</code></li></ul></li></ul><h3 id="Topic">Topic</h3><h4 id="说明">说明</h4><ul><li><p>Topic类型的Exchange与Direct相比，都是可以根据RoutingKey把消息路由到不同的队列，只不过Topic类型的Exchange可以rag队列绑定Routing Key的时候使用通配符</p></li><li><p>Routing Key一般都是由一个或多个单词组成，多个单词间以<code>.</code>分割，例如<code>item.insert</code></p></li><li><p>通配符规则</p><ul><li><code>#</code>：匹配一个或多个词</li><li><code>*</code>：仅匹配一个词</li></ul><p><img src="https://s1.ax1x.com/2022/12/23/zj4W8K.md.png" alt="zj4W8K.md.png"></p></li><li><p>解释</p><ul><li>Queue1绑定的是<code>china.#</code>，因此凡是以<code>china.</code>开头的Routing Key都会被匹配到，包括<code>china.news</code>和<code>china.weather</code></li><li>Queue2绑定的是<code>#.news</code>，因此凡是以<code>.news</code>结尾的Routing Kye都会被匹配到，包括<code>china.news</code>和<code>japan.news</code></li></ul></li></ul><p>案例需求如下图<br><img src="https://s1.ax1x.com/2022/12/23/zj5Sbj.md.png" alt="zj5Sbj.md.png"></p><ol><li>利用<code>@RabbitListener</code>声<code>明Exchange</code>、<code>Queue</code>、<code>RoutingKey</code></li><li>在<code>consumer</code>服务中，编写两个消费者方法，分别监听<code>topic.queue1</code>和<code>topic.queue2</code></li><li>在<code>publisher</code>中编写测试方法，向<code>topic</code>发送消息</li></ol><h4 id="消息发送-5">消息发送</h4><ul><li>在<code>publisher</code>服务的<code>SpringAmqpTest</code>类中添加测试方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testTopicExchange</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">exchangeName</span> <span class="operator">=</span> <span class="string">&quot;topic&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;如何看待马化腾称「短视频会侵蚀游戏时间」，「腾讯游戏要聚焦精品」?&quot;</span>;</span><br><span class="line">    rabbitTemplate.convertAndSend(exchangeName, <span class="string">&quot;china.news&quot;</span>, message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="消息接收-4">消息接收</h4><ul><li>在<code>consumer</code>服务的<code>SpringRabbitListener</code>中添加方法，一个队列通配符为<code>china.#</code>，一个队列通配符为<code>#.news</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">        value = @Queue(name = &quot;topic.queue1&quot;),</span></span><br><span class="line"><span class="meta">        exchange = @Exchange(name = &quot;topic&quot;, type = ExchangeTypes.TOPIC),</span></span><br><span class="line"><span class="meta">        key = &quot;china.#&quot;</span></span><br><span class="line"><span class="meta">))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenTopicQueue1</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者接收到topic.queue1的消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">        value = @Queue(name = &quot;topic.queue2&quot;),</span></span><br><span class="line"><span class="meta">        exchange = @Exchange(name = &quot;topic&quot;, type = ExchangeTypes.TOPIC),</span></span><br><span class="line"><span class="meta">        key = &quot;#.news&quot;</span></span><br><span class="line"><span class="meta">))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenTopicQueue2</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者接收到topic.queue2的消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>重启<code>consumer</code>服务，运行<code>publisher</code>服务中编写的测试方法，控制台输出如下</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">消费者接收到topic.queue2的消息：【如何看待马化腾称「短视频会侵蚀游戏时间」，「腾讯游戏要聚焦精品」?】</span><br><span class="line">消费者接收到topic.queue1的消息：【如何看待马化腾称「短视频会侵蚀游戏时间」，「腾讯游戏要聚焦精品」?】</span><br></pre></td></tr></table></figure><ul><li>修改测试方法，并运行</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testTopicExchange</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">exchangeName</span> <span class="operator">=</span> <span class="string">&quot;topic&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;今 天 也 是 个 emo 的 好 天 气&quot;</span>;</span><br><span class="line">    rabbitTemplate.convertAndSend(exchangeName, <span class="string">&quot;china.weather&quot;</span>, message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>控制台输出如下</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">消费者接收到topic.queue1的消息：【今 天 也 是 个 emo 的 好 天 气】</span><br></pre></td></tr></table></figure><ul><li>修改测试方法，并运行</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testTopicExchange</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">exchangeName</span> <span class="operator">=</span> <span class="string">&quot;topic&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;自由美利坚，xx每一天&quot;</span>;</span><br><span class="line">    rabbitTemplate.convertAndSend(exchangeName, <span class="string">&quot;us.news&quot;</span>, message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>控制台输出如下</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">消费者接收到topic.queue2的消息：【自由美利坚，xx每一天】</span><br></pre></td></tr></table></figure><h4 id="总结-5">总结</h4><ul><li>Direct交换机与Topic交换机的差异？<ul><li><code>Topic</code>交换机接收的消息<code>Routing Key</code>必须是多个单词，以<code>.</code>分隔</li><li>Topic交换机与队列绑定时的binding key可以指定通配符<ul><li><code>#</code>：表示0个或多个单词</li><li><code>*</code>：仅表示1个单词</li></ul></li></ul></li></ul>]]></content>
    
    
    <summary type="html">MQ（消息队列）</summary>
    
    
    
    <category term="学习笔记" scheme="https://blog.xing-ye.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="MQ" scheme="https://blog.xing-ye.top/tags/MQ/"/>
    
  </entry>
  
  <entry>
    <title>Docker</title>
    <link href="https://blog.xing-ye.top/posts/Docker/"/>
    <id>https://blog.xing-ye.top/posts/Docker/</id>
    <published>2024-04-14T07:03:59.000Z</published>
    <updated>2024-06-01T08:09:29.300Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><blockquote><p>再此感谢黑马程序员提供的<a href="https://www.bilibili.com/video/BV1LQ4y127n4?p=43&amp;vd_source=39cd09fae5d0f121c16eee7c134119f6">Docker课程</a>！</p><p><a href="https://zhuanlan.zhihu.com/p/187505981">什么是Docker？看这一篇干货文章就够了！</a></p><p>UPD: 补充更新微服务集群、Docker镜像仓库部分内容</p></blockquote><h2 id="初识Docker">初识Docker</h2><p><a name="oOswm"></a></p><h3 id="什么是Docker">什么是Docker</h3><ul><li>微服务虽然具备各种各样的优势，但是服务的拆分通常给部署带来了很大的麻烦<ul><li>分布式系统中，依赖的组件非常多，不同组件之间部署时，往往会产生一些冲突</li><li>在数百，数千台服务中重复部署，环境不一定一致，会遇到各种问题<br><a name="SzOJC"></a></li></ul></li></ul><h4 id="应用部署的环境问题">应用部署的环境问题</h4><ul><li>大型项目组件比较多，运行环境也较为复杂，部署时会碰到一些问题<ul><li>依赖关系复杂，容易出现兼容性问题</li><li>开发、测试、生产环境有差异</li></ul></li></ul><p><img src="https://s2.loli.net/2024/04/14/S4h9ZzKUr3AF5pq.png" alt="image.png"></p><ul><li>例如一个项目中，部署时需要依赖于node.js、Redis、RabbitMQ、MySQL等，这些服务部署时所需要的函数库、依赖项各不相同，审核会有冲突，给部署带来了极大的困难<br><a name="lRHs4"></a></li></ul><h4 id="Docker解决依赖兼容问题">Docker解决依赖兼容问题</h4><ul><li>而Docker巧妙的解决了这些问题，那么Docker是如何实现的呢？</li><li>Docker为了解决依赖的兼容问题，采用了两个手段<ol><li>将应用的函数库(libs)、依赖(Deps)、配置与应用一起打包</li><li>将每个应用放到一个隔离容器去运行，避免相互干扰</li></ol></li></ul><p><img src="https://s2.loli.net/2024/04/14/qNYhDvSAZVMmcJn.png" alt="image.png"></p><ul><li>这样打包好的应用中，既包含了应用本身，也包含了应用所需要用到的函数库和依赖，无需在操作系统上安装这些，自然也就不存在不同应用之间的兼容问题了</li><li>虽然解决了不同应用的兼容问题，但是开发、测试等环节会存在差异，操作系统版本也会有差异，这些问题又该如何解决呢？<br><a name="pIk9y"></a></li></ul><h4 id="Docker解决操作系统环境差异">Docker解决操作系统环境差异</h4><ul><li>要解决不同操作系统环境差异问题，必须先了解操作系统结构，以一个Ubuntu操作系统为例，结构如下<ul><li>系统应用：操作系统本身提供的应用、函数库。这些函数库是对内核指令的封装，使用更加方便</li><li>系统内核：所有Linux发行版的内核都是Linux，例如CentOS、Ubuntu、Fedora等。内核可以与计算机硬件交互，对外提供内核指令，用于操作计算机硬件。</li><li>计算机硬件：例如CPU、内存、磁盘等</li></ul></li><li>应用于计算机交互的流程如下<ol><li>应用调用操作系统应用(函数库)，实现各种功能</li><li>系统函数库是对内核指令集的封装，会调用内核指令</li><li>内核指令操作计算机硬件</li></ol></li><li>Ubuntu和CentOS都是基于Linux内核，无非是系统应用不同，提供的函数库有差异</li><li>此时，如果将一个Ubuntu版本的MySQL应用安装到CentOS系统，MySQL在调用Ubuntu函数库时，会发现找不到或不匹配，就会报错</li><li>Docker如何解决不同系统环境的问题？<ul><li>Docker将用户程序所需要的系统(比如Ubuntu)函数库一起打包</li><li>Docker运行到不同操作系统时，直接基于打包的函数库，借助于操作系统的Linux内核来运行<br><a name="hRpW5"></a></li></ul></li></ul><h4 id="小结">小结</h4><ul><li>Docker如何解决大型项目依赖关系复杂，不同组件依赖的兼容性问题？<ul><li>Docker允许开发中将应用、依赖、函数库、配置一起打包，形成可移植镜像</li><li>Docker应用运行在容器中，使用沙箱机制，相互隔离</li></ul></li><li>Docker如何解决开发、测试、生产环境有差异的问题？<ul><li>Docker镜像中包含完整运行环境，包括系统函数库，仅依赖系统的Linux内核，因此可以在任意Linux操作系统上运行</li></ul></li><li>Docker是一个快速交付应用、运行应用的技术，具备以下优势<ol><li>可将程序及其依赖、运行环境一起打包为一个镜像，可以迁移到任意Linux操作系统</li><li>运行时利用沙箱机制形成隔离容器，各个应用互不干扰</li><li>启动、移除都可以通过一行命令完成，方便快捷<br><a name="LU8LB"></a></li></ol></li></ul><h3 id="Docker与虚拟机的区别">Docker与虚拟机的区别</h3><ul><li><p>Docker可以让一个应用在任何操作系统中都十分方便的运行，而我们以前接触的虚拟机，也能在一个操作系统中，运行另外一个操作系统，保护系统中的任何应用</p></li><li><p>二者有什么差异呢？</p><ul><li><p>虚拟机(virtual machine)是在操作系统中模拟硬件设备，然后运行另一个操作系统。例如在Windows系统中运行CentOS系统，就可以运行任意的CentOS应用了</p></li><li><p>Docker仅仅是封装函数库，并没有模拟完整的操作系统</p><p><img src="https://s2.loli.net/2024/04/14/XkhYwWmUERKsMuI.png" alt="image.png"></p></li><li><p>对比来看<br>| 特性 | Docker | 虚拟机 |<br>| — | — | — |<br>| 性能 | 接近原生 | 性能较差 |<br>| 硬盘占用 | 一般为MB | 一般为GB |<br>| 启动 | 秒级 | 分钟级 |</p></li></ul></li><li><p>小结：Docker和虚拟机的差异</p><ul><li>Docker是一个系统进程；虚拟机是在操作系统中操作系统</li><li>Docker体积小、启动速度快、性能好；虚拟机体积大、启动速度慢、性能一般<br><a name="OPIeP"></a></li></ul></li></ul><h3 id="Docker架构">Docker架构</h3><p><a name="i3BEN"></a></p><h4 id="镜像和容器">镜像和容器</h4><ul><li>Docker中有几个重要的概念<ul><li>镜像(Image)：Docker将应用程序及其所需要的依赖、函数库、环境、配置等文件打包在一起，称为镜像</li><li>容器(Container)：镜像中的应用程序形成后的进程就是容器，只是Docker会给容器进程做隔离，对外不可见</li></ul></li><li>一切应用最终都是代码组成，都是硬盘中的一个个字节形成的文件，只有运行时，才会加载到内存，形成进程</li><li>而镜像，就是吧一个应用在硬盘上的文件、机器运行环境、部分系统函数库文件一起打包成的文件包。这个文件包是只读的（防止你对镜像文件进行修改/污染，从而导致镜像不可用，容器从镜像中拷贝一份文件到自己的空间里来写数据）</li><li>而容器呢，就是把这些文件中编写的程序、函数加载到内存中允许形成进程，只不过要隔离起来。因此一个镜像可以启动多次，形成多个容器进程。</li><li><img src="https://s2.loli.net/2024/04/14/wrgtMhN2YsuDWv9.png" alt="image.png"><br><a name="EputQ"></a></li></ul><h4 id="DockerHub">DockerHub</h4><ul><li>开源应用程序非常多，打包这些应用往往都是重复性劳动，为了避免这些重复劳动，人们就会将自己打包的应用镜像，例如Redis、MySQL镜像放到网络上来共享使用，就像GitHub的代码共享一样<ul><li>DockerHub：DockerHub是一个官方的Docker镜像托管平台，这样的平台称为Docker Registry。</li><li>国内也有类似于DockerHub的公开服务，例如<a href="https://c.163yun.com/hub">网易云镜像服务</a>、<a href="https://cr.console.aliyun.com/">阿里云镜像库</a>等</li></ul></li><li>我们一方面可以将自己的镜像共享到DockerHub，另一方面也可以从DockerHub拉取镜像<br><a name="NTLsI"></a></li></ul><h4 id="Docker架构-2">Docker架构</h4><ul><li>我们要使用Docker来操作镜像、容器，那就必须安装Docker</li><li>Docker是一个CS架构的程序，由两部分组成<ul><li>服务端(server)：Docker守护进程，负责处理Docker指令，管理镜像、容器等</li><li>客户端(client)：通过命令或RestAPI向Docker服务端发送指令，可以在本地或远程向服务端发送指令</li></ul></li></ul><p><img src="https://s2.loli.net/2024/04/14/mFQYdTV5u78S4Kv.png" alt="image.png"><br><a name="VsNGw"></a></p><h4 id="小结-2">小结</h4><ul><li>镜像：<ul><li>将应用程序及其依赖、环境、配置打包在一起</li></ul></li><li>容器：<ul><li>镜像运行起来就是容器，一个镜像可以运行多个容器</li></ul></li><li>Docker结构：<ul><li>服务端：接受命令或远程请求，操作镜像或容器</li><li>客户端：发送命令或者请求到Docker服务端</li></ul></li><li>DockerHub：<ul><li>一个镜像托管的服务器，类似的还有阿里云镜像服务，统称为DockerRegistry<br><a name="ocFlg"></a></li></ul></li></ul><h2 id="安装Docker">安装Docker</h2><ul><li>Docker 分为 CE 和 EE 两大版本。CE 即社区版，免费，支持周期 7 个月；EE 即企业版，强调安全，付费使用，支持周期 24 个月。</li><li>Docker CE 分为 stable test 和 nightly 三个更新频道。</li><li>官方网站上有各种环境下的 <a href="https://docs.docker.com/install/">安装指南</a>，这里主要介绍 Docker CE 在 CentOS上的安装。</li><li>Docker CE 支持 64 位版本 CentOS 7，并且要求内核版本不低于 3.10</li></ul><p>CentOS 7满足最低内核要求，本文也是在CentOS 7安装Docker<br><a name="cUnbL"></a></p><h3 id="卸载-可选">卸载(可选)</h3><ul><li>如果之前安装过旧版本的Docker，可以使用下面命令卸载</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-selinux \</span><br><span class="line">                  docker-engine-selinux \</span><br><span class="line">                  docker-engine \</span><br><span class="line">                  docker-ce</span><br></pre></td></tr></table></figure><p><a name="EFHXC"></a></p><h3 id="安装Docker-2">安装Docker</h3><ul><li>首先先安装yum工具</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install -y yum-utils \</span><br><span class="line">           device-mapper-persistent-data \</span><br><span class="line">           lvm2 --skip-broken</span><br></pre></td></tr></table></figure><ul><li>然后更新本地镜像源</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 设置Docker镜像源</span></span><br><span class="line">yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">    </span><br><span class="line">sed -i <span class="string">&#x27;s/download.docker.com/mirrors.aliyun.com\/docker-ce/g&#x27;</span> /etc/yum.repos.d/docker-ce.repo</span><br><span class="line"></span><br><span class="line">yum makecache fast</span><br></pre></td></tr></table></figure><ul><li>然后安装社区版Docker</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y docker-ce</span><br></pre></td></tr></table></figure><p><a name="l596z"></a></p><h3 id="启动Docker">启动Docker</h3><ul><li>Docker应用需要用到各种端口，挨个修改防火墙设置很麻烦，所以这里建议直接关闭防火墙</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 关闭</span></span><br><span class="line">systemctl stop firewalld</span><br><span class="line"><span class="comment">## 禁止开机启动防火墙</span></span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br></pre></td></tr></table></figure><ul><li>通过命令启动Docker</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 启动docker服务</span></span><br><span class="line">systemctl start docker </span><br><span class="line"></span><br><span class="line"><span class="comment">## 停止docker服务</span></span><br><span class="line">systemctl stop docker</span><br><span class="line"></span><br><span class="line"><span class="comment">## 重启docker服务</span></span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><ul><li>然后输入命令，查看docker版本</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker -v</span><br></pre></td></tr></table></figure><ul><li>输出</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker -v</span></span><br><span class="line">Docker version 26.0.0, build 2ae903e</span><br></pre></td></tr></table></figure><p><a name="rfTUc"></a></p><h3 id="配置镜像加速">配置镜像加速</h3><ul><li>Docker官方镜像库网速较差，建议设置为国内镜像服务，参考阿里云的镜像加速文档：<a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors">https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors</a><br><a name="YUQa4"></a></li></ul><h2 id="Docker的基本操作">Docker的基本操作</h2><p><a name="H6NxO"></a></p><h3 id="镜像制作">镜像制作</h3><p><a name="ktI2z"></a></p><h4 id="镜像名称">镜像名称</h4><ul><li>首先来看下镜像的名称组成：<ul><li>镜像名称一般分为两部分：[repository]:[tag]</li></ul></li><li>例如mysql:5.7，这里的mysql就是repository，5.7就是tag，合在一起就是镜像名称，代表5.7版本的MySQL镜像<ul><li>在没有指定tag时，默认是latest，代表最新版本的镜像，例如mysql:latest<br><a name="WJWqE"></a></li></ul></li></ul><h4 id="镜像命令">镜像命令</h4><ul><li>常见的镜像命令如下图</li></ul><p><img src="https://s2.loli.net/2024/04/14/gpqjnZUmiylBh7e.jpg" alt=""><br><a name="G8cHh"></a></p><h4 id="案例一">案例一</h4><ul><li>在这个案例，我们来联系拉取、查看镜像</li></ul><p>需求：从DockerHub中拉取一个Nginx镜像并查看</p><ol><li>首先我们取镜像仓库（例如<a href="https://hub.docker.com/">DockerHub</a>）中搜索Nginx镜像<br /><a href="https://s2.loli.net/2024/04/14/dmx8eW9tKiJgkfB.jpg"><img src="https://s2.loli.net/2024/04/15/BDu3aLgxfCoZ5MI.png" alt="image.png"></a></li><li>根据查看到的镜像名称，拉取自己需要的镜像，通过命令：docker pull nginx拉取最新的nginx镜像</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker pull nginx</span></span><br><span class="line">Using default tag: latest</span><br><span class="line"></span><br><span class="line">latest: Pulling from library/nginx</span><br><span class="line">a2abf6c4d29d: Pull complete </span><br><span class="line">a9edb18cadd1: Pull complete </span><br><span class="line">589b7251471a: Pull complete </span><br><span class="line">186b1aaa4aa6: Pull complete </span><br><span class="line">b4df32aa5a72: Pull complete </span><br><span class="line">a0bcbecc962e: Pull complete </span><br><span class="line">Digest: sha256:0d17b565c37bcbd895e9d92315a05c1c3c9a29f762b011a10c54a66cd53c9b31</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> nginx:latest</span><br><span class="line">docker.io/library/nginx:latest</span><br><span class="line">[root@localhost ~]<span class="comment"># </span></span><br><span class="line">[root@localhost ~]<span class="comment"># </span></span><br></pre></td></tr></table></figure><p>从日志中我们也可以看出，如果不加tag，用的就是默认的latest，也就是拉取最新的docker镜像</p><ol><li>通过命令docker images查看拉取到的镜像</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY   TAG       IMAGE ID       CREATED       SIZE</span><br><span class="line">nginx        latest    605c77e624dd   2 years ago   141MB</span><br><span class="line">[root@localhost ~]<span class="comment"># </span></span><br></pre></td></tr></table></figure><p><a name="Bt3WH"></a></p><h4 id="案例二">案例二</h4><ul><li>在这个案例中，我们练习保存、导入镜像</li></ul><p>需求：利用docker save将nginx镜像导出磁盘，然后在通过docker load加载回来</p><ol><li>利用docker xx --help命令查看docker save和docker load的语法</li></ol><ul><li>输入docker save --help，结果如下</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker save --help</span></span><br><span class="line"></span><br><span class="line">Usage:  docker save [OPTIONS] IMAGE [IMAGE...]</span><br><span class="line"></span><br><span class="line">Save one or more images to a tar archive (streamed to STDOUT by default)</span><br><span class="line"></span><br><span class="line">Aliases:</span><br><span class="line">  docker image save, docker save</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -o, --output string   Write to a file, instead of STDOUT</span><br></pre></td></tr></table></figure><ul><li>输入docker load --help，结果如下</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment">## docker load --help</span></span><br><span class="line"></span><br><span class="line">Usage:  docker load [OPTIONS]</span><br><span class="line"></span><br><span class="line">Load an image from a tar archive or STDIN</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -i, --input string   Read from tar archive file, instead of STDIN</span><br><span class="line">  -q, --quiet          Suppress the load output</span><br></pre></td></tr></table></figure><ol><li>使用docker save导出镜像到磁盘，随后使用ls命令可以查看到nginx.tar文件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker save -o nginx.tar nginx:latest</span></span><br></pre></td></tr></table></figure><ol start="2"><li>使用docker save导出镜像到磁盘，随后使用ls命令可以查看到nginx.tar文件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># ls</span></span><br><span class="line">anaconda-ks.cfg  nginx.tar</span><br></pre></td></tr></table></figure><ol start="3"><li>使用docker load加载镜像，在此之前，我们使用命令删除本地nginx镜像</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi nginx:latest <span class="comment">## rmi是remove image的缩写</span></span><br></pre></td></tr></table></figure><p>随后运行命令，加载本地文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker load -i nginx.tar</span><br></pre></td></tr></table></figure><p><a name="D1MIG"></a></p><h4 id="练习">练习</h4><p>需求：去DockerHub中搜索并拉取一个Redis镜像</p><ol><li>去DockerHub中搜索Redis镜像</li><li>查看Redis镜像的名称和版本</li><li>利用docker pull命令拉取镜像</li><li>使用docker save命令，将redis:latest打包成一个redis.tar包</li><li>使用docker rmi删除本地的redis:latest</li><li>利用docker load重新加载redis.tar文件<br><a name="wEGjy"></a></li></ol><h3 id="容器操作">容器操作</h3><p><a name="c9pYR"></a></p><h4 id="容器相关命令">容器相关命令</h4><ul><li>容器操作命令如图</li></ul><p><img src="https://s2.loli.net/2024/04/14/oxzZbltVDWM7TKP.png" alt="image.png"></p><ul><li>容器保护三个状态<ul><li>运行：进程正常运行</li><li>暂停：进程暂停，CPU不再运行，不释放内存</li><li>停止：进程终止，回收进程占用的内存、CPU等资源</li></ul></li></ul><blockquote><ul><li>暂停和停止的操作系统的处理方式不同，暂停是操作系统将容器内的进程挂起，容器关联的内存暂存起来，然后CPU不再执行这个进程，但是使用unpause命令恢复，内存空间被恢复，程序继续运行。</li><li>停止是直接将进程杀死，容器所占的内存回收，保存的仅剩容器的文件系统，也就是那些静态的资源</li><li>docker rm 是将文件系统也彻底删除，也就是将容器彻底删除掉了</li></ul></blockquote><ul><li><code>docker run</code>：创建并运行一个容器，处于运行状态</li><li><code>docker pause</code>：让一个运行的容器暂停</li><li><code>docker unpause</code>：让一个容器从暂停状态恢复运行</li><li><code>docker stop</code>：停止一个运行的容器</li><li><code>docker star</code>t：让一个停止的容器再次运行</li><li><code>docker rm</code>：删除一个容器<br><a name="SfGuC"></a></li></ul><h4 id="案例一-2">案例一</h4><ul><li>创建并运行nginx容器的命令</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name containerName -p 80:80 -d nginx</span><br></pre></td></tr></table></figure><ul><li>命令解读<ul><li>docker run：创建并运行一个容器</li><li>–name：给容器起一个名字，例如叫做myNginx</li><li>-p：将宿主机端口与容器端口映射，冒号左侧是宿主机端口，右侧是容器端口</li><li>-d：后台运行容器</li><li>nginx：镜像名称，例如nginx</li></ul></li><li>这里的-p参数，是将容器端口映射到宿主机端口</li><li>默认情况下，容器是隔离环境，我们直接访问宿主机的80端口，肯定访问不到容器中的nginx</li></ul><p><img src="https://s2.loli.net/2024/04/14/lFuc97K6mOrwLeS.png" alt="image.png"></p><ul><li>现在，容器的80端口和宿主机的80端口关联了起来，当我们访问宿主机的80端口时，就会被映射到容器的80端口，这样就能访问nginx了</li><li>那我们再浏览器输入虚拟机ip:80就能看到nginx默认页面了</li></ul><p><img src="https://s2.loli.net/2024/04/14/5qaLoNXrRDl2b8w.png" alt="image.png"></p><ul><li>查看日志记录</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker logs myNginx</span></span><br></pre></td></tr></table></figure><p><a name="hUD9Z"></a></p><h4 id="案例二-2">案例二</h4><p>需求：进入Nginx容器，修改HTML文件内容，添加Welcome To My Blog！<br />提示：进入容器要用到docker exec命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment">## docker exec --help</span></span><br><span class="line"></span><br><span class="line">Usage:  docker <span class="built_in">exec</span> [OPTIONS] CONTAINER COMMAND [ARG...]</span><br><span class="line"></span><br><span class="line">Run a <span class="built_in">command</span> <span class="keyword">in</span> a running container</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -d, --detach               Detached mode: run <span class="built_in">command</span> <span class="keyword">in</span> the background</span><br><span class="line">      --detach-keys string   Override the key sequence <span class="keyword">for</span> detaching a container</span><br><span class="line">  -e, --<span class="built_in">env</span> list             Set environment variables</span><br><span class="line">      --env-file list        Read <span class="keyword">in</span> a file of environment variables</span><br><span class="line">  -i, --interactive          Keep STDIN open even <span class="keyword">if</span> not attached</span><br><span class="line">      --privileged           Give extended privileges to the <span class="built_in">command</span></span><br><span class="line">  -t, --<span class="built_in">tty</span>                  Allocate a pseudo-TTY</span><br><span class="line">  -u, --user string          Username or UID (format: &lt;name|uid&gt;[:&lt;group|gid&gt;])</span><br><span class="line">  -w, --workdir string       Working directory inside the container</span><br></pre></td></tr></table></figure><ol><li>进入容器。进入刚刚我们创建好的nginx容器</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it myNginx bash</span><br></pre></td></tr></table></figure><blockquote><ul><li>命令解读<ul><li>docker exec：进入容器内部，执行一个命令</li><li>-it：给当前进入的容器创建一个标准输入、输出终端，允许我们与容器交互</li><li>myNginx：要进入的容器名称</li><li>bash：进入容器后执行的命令，bash是一个linux终端交互命令</li></ul></li></ul></blockquote><ol start="2"><li>进入nginx的HTML所在目录</li></ol><ul><li>容器内部会模拟一个独立的Linux文件系统，看起来就如同一个linux服务器一样，nginx的环境、配置、运行文件全部都在这个文件系统中，包括我们要修改的html文件</li><li>查看DockerHub网站中的nginx页面，可以知道nginx的html目录位置在/usr/share/nginx/html</li><li>我们执行命令进入到该目录</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/share/nginx/html</span><br></pre></td></tr></table></figure><p>查看目录下的文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@10c40cc80352:/usr/share/nginx/html<span class="comment"># ls</span></span><br><span class="line">50x.html  index.html</span><br></pre></td></tr></table></figure><ol start="3"><li>修改index.html的内容</li></ol><ul><li>容器内没有vi命令，无法直接修改，我们使用下面的命令来修改</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i -e <span class="string">&#x27;s#Welcome to nginx#Welcome To My Blog#g&#x27;</span> index.html</span><br></pre></td></tr></table></figure><ol start="4"><li>在浏览器访问自己的虚拟机ip:80，即可看到结果（80端口可以不写）</li></ol><p><img src="https://s2.loli.net/2024/04/14/n8mGXSL36lfvRFN.png" alt="image.png"><br />5.退出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@10c40cc80352:/usr/share/nginx/html<span class="comment"># exit</span></span><br></pre></td></tr></table></figure><p><a name="cwcV7"></a></p><h4 id="小结-3">小结</h4><ul><li>docker run命令常见的参数有哪些？<ul><li>–name：指定容器名称</li><li>-p：指定端口映射</li><li>-d：让容器后台运行</li></ul></li><li>查看容器日志的命令<ul><li>docker logs</li><li>添加-f参数可以持续查看日志</li></ul></li><li>查看容器状态：<ul><li>docker ps</li><li>docker ps -a 查看所有容器，包括已停止的</li></ul></li></ul><p>现在是不是感觉修改文件好麻烦，因为没给提供vi命令，不能直接编辑，所以这就要用到我们下面说的数据卷了<br><a name="TrL5N"></a></p><h3 id="数据卷">数据卷</h3><ul><li>在之前的nginx案例中，修改nginx的html页面时，需要进入nginx内部。并且因为没有编译器，修改文件也很麻烦，这就是容器与数据（容器内文件）耦合带来的后果，如果我们另外运行一台新的nginx容器，那么这台新的nginx容器也不能直接使用我们修改好的html文件，具有很多缺点<ol><li>不便于修改：当我们要修改nginx的html内容时，需要进入容器内部修改，很不方便</li><li>数据不可复用：由于容器内的修改对外是不可见的，所有的修改对新创建的容器也是不可复用的</li><li>升级维护困难：数据在容器内，如果要升级容器必然删除旧容器，那么旧容器中的所有数据也跟着被删除了（包括改好的html页面）</li></ol></li><li>要解决这个问题，必须将数据和容器解耦，这就要用到数据卷了<br><a name="v8af2"></a></li></ul><h4 id="什么是数据卷">什么是数据卷</h4><ul><li><p>数据卷（volume）是一个虚拟目录，指向宿主机文件系统中的某个目录</p><p><img src="https://s2.loli.net/2024/04/14/4pKVfT1suawS2NU.png" alt="image.png"></p></li><li><p>一旦完成数据卷挂载，对容器的一切操作都会作用在对应的宿主机目录了。这样我们操作宿主机的/var/lib/docker/volumes/html目录，就等同于操作容器内的/usr/share/nginx/html目录了<br><a name="O8uxL"></a></p></li></ul><h4 id="数据集操作命令">数据集操作命令</h4><ul><li>数据卷操作的基本语法如下</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume [COMMAND]</span><br></pre></td></tr></table></figure><ul><li>docker volume命令是数据卷操作，根据命令后跟随的command来确定下一步的操作<ul><li>create：创建一个volume</li><li>inspect：显示一个或多个volume的信息</li><li>ls：列出所有的volume</li><li>prune：删除未使用的volume</li><li>rm：删除一个或多个指定的volume<br><a name="jTjBP"></a></li></ul></li></ul><h4 id="创建和查看数据卷">创建和查看数据卷</h4><p>需求：创建一个数据卷，并查看数据卷在宿主机的目录位置</p><ol><li>创建数据卷</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume create html</span><br></pre></td></tr></table></figure><ol start="2"><li>查看所有数据</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume <span class="built_in">ls</span></span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment">## docker volume ls</span></span><br><span class="line">DRIVER    VOLUME NAME</span><br><span class="line"><span class="built_in">local</span>     html</span><br></pre></td></tr></table></figure><ol start="3"><li>查看数据卷详细信息卷</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume inspect html</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker volume inspect html</span></span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;CreatedAt&quot;</span>: <span class="string">&quot;2024-04-02T23:29:49+08:00&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;local&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Labels&quot;</span>: null,</span><br><span class="line">        <span class="string">&quot;Mountpoint&quot;</span>: <span class="string">&quot;/var/lib/docker/volumes/html/_data&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;html&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Options&quot;</span>: null,</span><br><span class="line">        <span class="string">&quot;Scope&quot;</span>: <span class="string">&quot;local&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>可以看到我们创建的html这个数据卷关联的宿主机目录为/var/lib/docker/volumes/html/_data</p><ul><li>小结：<ul><li>数据卷的作用<ul><li>将容器与数据分离，解耦合，方便操作容器内数据，保证数据安全</li></ul></li><li>数据卷操作：<ul><li>docker volume create：创建数据卷</li><li>docker volume ls：查看所有数据卷</li><li>docker volume inspect：查看数据卷详细信息，包括关联的宿主机目录位置</li><li>docker volume rm：删除指定数据卷</li><li>rocker volume prune：删除所有未使用的数据卷<br><a name="GQf8O"></a></li></ul></li></ul></li></ul><h4 id="挂载数据卷">挂载数据卷</h4><ul><li>我们在创建容器时，可以通过-v参数来挂载一个数据卷到某个容器内目录，命令格式如下</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line">    -- name myNginx \</span><br><span class="line">    -v html:/root/html \</span><br><span class="line">    -p 8080:80 \</span><br><span class="line">    nginx \</span><br></pre></td></tr></table></figure><ul><li>这里的-v就是挂载数据卷的命令<ul><li>-v html:/root/html：把html数据卷挂载到容器内的/root/html这个目录中<br><a name="AjOiF"></a></li></ul></li></ul><h4 id="案例一-3">案例一</h4><p>需求：创建一个nginx容器，修改容器内的html目录的index.html内容<br />分析：上个案例中，我们进入nginx容器内部，已经知道了nginx的html目录所在位置/usr/share/nginx/html，我们需要把这个目录挂载到html这个数据卷上，方便操作其中的内容<br />提示：运行容器时，使用-v参数挂载数据卷</p><ol><li>创建容器并挂载数据卷到容器内的HTML目录</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name myNginx -v html:/usr/share/nginx/html -p 80:80 -d nginx</span><br></pre></td></tr></table></figure><ol start="2"><li>进入html数据卷所在位置，并修改HTML内容</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 查看数据卷位置</span></span><br><span class="line">docker volume inspect html</span><br><span class="line"><span class="comment">## 进入该目录</span></span><br><span class="line"><span class="built_in">cd</span> /var/lib/docker/volumes/html/_data</span><br><span class="line"><span class="comment">## 修改文件</span></span><br><span class="line">vi index.html</span><br><span class="line"><span class="comment">## 也可以在FinalShell中使用外部编译器（例如VSCode）来修改文件</span></span><br></pre></td></tr></table></figure><p><a name="kw5mz"></a></p><h4 id="案例二-3">案例二</h4><ul><li>容器不仅仅可以挂载数据卷，也可以直接挂载到宿主机目录上，关系如下<ul><li>带数据卷模式：宿主机目录 --&gt; 数据卷 --&gt; 容器内目录</li><li>直接挂载模式：宿主机目录 --&gt; 容器内目录</li></ul></li></ul><p><img src="https://s2.loli.net/2024/04/14/o5WVczGElgDdBqu.jpg" alt="63a015ceb1fccdcd36544958.jpg"></p><ul><li>目录挂载和数据卷挂载的语法是类似的<ul><li>-v [宿主机目录]:[容器内目录]</li><li>-v [宿主机文件]:[容器内文件]</li></ul></li></ul><p>需求：创建并运行一个MySQL容器，将宿主机目录直接挂载到容器</p><ol><li>从DockerHub中拉取一个MySQL的镜像</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql</span><br></pre></td></tr></table></figure><ol start="2"><li>创建目录/tmp/mysql/data</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /tmp/mysql/data</span><br></pre></td></tr></table></figure><ol start="3"><li>创建目录/tmp/mysql/conf，将myCnf.cnf文件上传到/tmp/mysql/conf</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /tmp/mysql/conf</span><br></pre></td></tr></table></figure><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">skip-name-resolve</span><br><span class="line">character_set_server=utf8</span><br><span class="line">datadir=/var/lib/mysql</span><br><span class="line">server-id=<span class="number">1000</span></span><br></pre></td></tr></table></figure><ol start="4"><li>去DockerHub中查阅资料，找到mysql容器内的conf目录和data目录的位置<br />容器中conf目录的位置是：/etc/mysql/conf.d<br />容器中存储数据的目录为：/var/lib/mysql</li><li>创建并运行MySQL容器，要求</li></ol><ul><li>挂载/tmp/mysql/data到mysql容器内数据存储目录</li><li>挂载/tmp/mysql/conf/myCnf.cnf到mysql容器的配置文件</li><li>设置MySQL密码</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line">--name mysql \ </span><br><span class="line">-e MYSQL_ROOT_PASSWORD=123456 \</span><br><span class="line">-v /tmp/mysql/conf:/etc/mysql/conf.d \</span><br><span class="line">-v /tmp/mysql/data:/var/lib/mysql \</span><br><span class="line">-p 3306:3306 \</span><br><span class="line">-d mysql</span><br></pre></td></tr></table></figure><ol start="6"><li>尝试使用Navicat连接数据库，注意自己设置的密码</li></ol><p><img src="https://s2.loli.net/2024/04/14/bCVmhMTpuzf5cI6.png" alt="image.png"><br><a name="gLl55"></a></p><h4 id="小结-4">小结</h4><ul><li>docker run的命令中通过-v参数挂载文件或目录到容器中<ul><li>-v [volume名称]:[容器内目录]</li><li>-v [宿主机文件]:[容器内文件]</li><li>-v [宿主机目录]:[容器内目录]</li></ul></li><li>数据卷挂载与目录直接挂载的区别<ul><li>数据卷挂载耦合度低，由docker来管理目录，但是目录较深，不好找</li><li>目录挂载耦合度高，需要我们自己管理目录，不过目录容易寻找查看<br><a name="XwpaY"></a></li></ul></li></ul><h2 id="Dockerfile自定义镜像">Dockerfile自定义镜像</h2><ul><li>常见的镜像在DockerHub就能找到，但是我们自己写的项目就必须构建镜像了。而要自定义镜像，则必须先连接镜像的结构才行。<br><a name="eC4oG"></a></li></ul><h3 id="镜像结构">镜像结构</h3><ul><li>镜像是将<strong>应用程序</strong>及其需要的<strong>系统函数库，环境、配置、依赖</strong>打包而成</li><li>以MySQL为例，来看看它的镜像组成结构<br /><a href="https://s2.loli.net/2024/04/14/pycPGYQ4R7I8bhX.jpg"><img src="https://s2.loli.net/2024/04/15/GPxIUT8tpj6fKmO.jpg" alt="image.png"></a></li><li>简单来说，镜像就是在系统函数库、运行环境的基础上，添加应用程序文件、配置文件、依赖文件等组合，然后编写好启动脚本打包在一起形成的文件</li><li>我们要构建镜像，其实就是实现上述打包的过程<br><a name="LesWf"></a></li></ul><h3 id="Dockerfile语法">Dockerfile语法</h3><ul><li>构建自定义镜像时，并不需要一个个文件去拷贝，打包。</li><li>我们只需要告诉Docker我们的镜像组成，需要哪些BaseImage、需要拷贝什么文件、需要安装什么依赖、启动脚本是什么，将来Docker会帮助我们构建镜像</li><li>而描述上述信息的就是Dockerfile文件。</li><li>Dockerfile就是一个文本文件，其中包含一个个指令(Instruction)，用指令说明要执行什么操作来构建镜像，每一个指令都会形成一层Layer。<br>| 指令 | 说明 | 示例 |<br>| — | — | — |<br>| FROM | 指定基础镜像 | FROM centos:6 |<br>| ENV | 设置环境变量，可在后面指令使用 | ENV key value |<br>| COPY | 拷贝本地文件到镜像的指定目录 | COPY ./mysql-5.7.rpm /tmp |<br>| RUN | 执行Linux的shell命令，一般是安装过程的命令 | RUN yum install gcc |<br>| EXPOSE | 指定容器运行时监听的端口，是给镜像使用者看的 | EXPOSE 8080 |<br>| ENTRYPOINT | 镜像中应用的启动命令，容器运行时调用 | ENTRYPOINTjava -jar xxjar |</li></ul><p><a name="eF0e4"></a></p><h3 id="构建Java项目">构建Java项目</h3><p><a name="P5RPe"></a></p><h4 id="基于Ubuntu构建Java项目">基于Ubuntu构建Java项目</h4><p>需求：基于Ubuntu镜像构建一个新镜像，运行一个Java项目</p><ol><li>创建一个空文件夹docker-demo</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /tmp/docker-demo</span><br></pre></td></tr></table></figure><ol start="2"><li>将docker-demo.jar文件拷贝到docker-demo这个目录</li><li>拷贝jdk8.tar.gz文件到docker-demo这个目录</li><li>在docker-demo目录下新建Dockerfile，并写入以下内容</li></ol><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 指定基础镜像</span></span><br><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">16.04</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 配置环境变量，JDK的安装目录</span></span><br><span class="line"><span class="keyword">ENV</span> JAVA_DIR=/usr/local</span><br><span class="line"></span><br><span class="line"><span class="comment">## 拷贝jdk的到JAVA_DIR目录下</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./jdk8.tar.gz <span class="variable">$JAVA_DIR</span>/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 安装JDK</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">cd</span> <span class="variable">$JAVA_DIR</span> &amp;&amp; tar -xf ./jdk8.tar.gz &amp;&amp; <span class="built_in">mv</span> ./jdk1.8.0_44 ./java8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 配置环境变量</span></span><br><span class="line"><span class="keyword">ENV</span> JAVA_HOME=$JAVA_DIR/java8</span><br><span class="line"><span class="keyword">ENV</span> PATH=$PATH:$JAVA_HOME/bin</span><br><span class="line"></span><br><span class="line"><span class="comment">## 拷贝java项目的包到指定目录下，我这里是/tmp/app.jar</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./docker-demo.jar /tmp/app.jar</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 暴露端口，注意这里是8090端口，如果你之前没有关闭防火墙，请关闭防火墙或打开对应端口，云服务器同理</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8090</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 入口，java项目的启动命令</span></span><br><span class="line">ENTERPOINT java -jar /tmp/app.jar</span><br></pre></td></tr></table></figure><ol start="5"><li>在docker-demo目录下使用docker build命令构建镜像</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t javaweb:1.0 .<span class="comment">##注意1.0和 .之间有个空格</span></span><br></pre></td></tr></table></figure><ul><li><strong>最后有个 .  别忘记</strong></li></ul><ol start="6"><li>使用docker images命令，查看镜像</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY   TAG            IMAGE ID       CREATED        SIZE</span><br><span class="line">javaweb      1.0            b41e763854e5   16 hours ago   722MB</span><br><span class="line">nginx        latest         605c77e624dd   2 years ago    141MB</span><br><span class="line">redis        latest         7614ae9453d1   2 years ago    113MB</span><br><span class="line">mysql        latest         3218b38490ce   2 years ago    516MB</span><br><span class="line">rabbitmq     3-management   6c3c2a225947   2 years ago    253MB</span><br></pre></td></tr></table></figure><ol start="7"><li>创建并运行一个docker_demo容器</li></ol><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="language-bash"> --name web -p 8090:8090 -d javaweb:1.0</span></span><br></pre></td></tr></table></figure><ol start="8"><li>浏览器访问<a href="http://192.168.200.128:8090/hello/count">192.168.200.128:8090/hello/count</a>， 即可看到页面效果(<strong>注意修改虚拟机ip</strong>)-&gt;“今天被访问了1次”<br><a name="t6ovL"></a></li></ol><h4 id="基于Java8构建Java项目">基于Java8构建Java项目</h4><ul><li>虽然我们可以基于Ubuntu基础镜像，添加任意自己需要的安装包来构建镜像，但是却比较麻烦。所以大多数情况下，我们都可以在一些安装了部分软件的基础镜像上做改造。</li><li>我们刚刚构建的Java项目有一个固定的死步骤，那就是安装JDK并配置环境变量，我们每次构建Java项目的镜像的时候，都需要完成这个步骤，所以我们可以找一个已经安装好了JDK的基础镜像，然后在其基础上来构建我们的Java项目的镜像</li></ul><p>需求：基于java:8-alpine镜像，将一个Java项目构建为镜像</p><ol><li>新建一个空目录(或者继续使用/tmp/docker-demo目录)</li><li>将docker-demo.jar复制到该目录下(继续使用刚刚的目录就不用管)</li><li>在目录中新建一个文件，命名为Dockerfile，并编写该文件</li></ol><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 将openjdk:8作为基础镜像</span></span><br><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">8</span></span><br><span class="line"><span class="comment">## 拷贝java项目的包到指定目录下，我这里是/tmp/app.jar</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./docker-demo.jar /tmp/app.jar</span></span><br><span class="line"><span class="comment">## 暴露端口</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8090</span></span><br><span class="line"><span class="comment">## 入口</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> java -jar /tmp/app.jar</span></span><br></pre></td></tr></table></figure><ol start="4"><li>构建镜像</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t javaweb:2.0 .</span><br></pre></td></tr></table></figure><ol start="5"><li>创建并运行一个docker_demo容器(在此之前停止之前的docker_demo容器)</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name web2 -p 8090:8090 -d javaweb:2.0</span><br></pre></td></tr></table></figure><ol start="6"><li>浏览器访问<a href="http://192.168.200.128:8090/hello/count">192.168.200.128:8090/hello/count</a>，即可看到页面效果-&gt;“今天被访问了1次”<br><a name="rgONu"></a></li></ol><h3 id="小结-5">小结</h3><ol><li>Dockerfile本质就是一个文件，通过指令描述镜像的构建过程</li><li>Dockerfile的第一行必须是FROM，从一个基础镜像来构建</li><li>基础镜像可以使基本操作系统，如Ubunut，也可以是其他人制作好的镜像，例如openjdk:8<br><a name="sQxl5"></a></li></ol><h2 id="Docker-Compose">Docker-Compose</h2><ul><li>Docker Compose可以基于Compose文件帮我们快速地部署分布式应用，而无需手动一个个创建和运行容器</li><li>真实企业项目开发中，可能有几十个，上百个微服务。<br><a name="HnAVb"></a></li></ul><h3 id="初识DockerCompose">初识DockerCompose</h3><ul><li>Compose文件是一个文本文件，通过指令定义集群中的每个容器如何运行，格式如下</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">version: <span class="string">&quot;3.8&quot;</span></span><br><span class="line">  services:</span><br><span class="line">    <span class="comment">## docker run --name mysql -e MYSQL_ROOT_PASSWORD=root -p 3306:3306 -v /tmp/mysql/data:/var/lib/mysql -v /tmp/mysql/conf/myCnf.cf:/etc/mysql/conf.d/myCnf.cnf -d mysql:5.7.25</span></span><br><span class="line">    mysql:  <span class="comment">## 对应docker run中的 --name</span></span><br><span class="line">      image: mysql:5.7.25 <span class="comment">## 对应docker run中最后声明的镜像</span></span><br><span class="line">      enviroment:   <span class="comment">## 对应docker run中的 -e MYSQL_ROOT_PASSWIRD=123456</span></span><br><span class="line">        MYSQL_ROOT_PASSWORD: 123456</span><br><span class="line">      volumes: <span class="comment">## 对应docker run中的 -v /tmp/mysql/data:/var/lib/mysql</span></span><br><span class="line">        - <span class="string">&quot;/tmp/mysql/data:/var/lib/mysql&quot;</span></span><br><span class="line">        - <span class="string">&quot;/tmp/mysql/conf/myCnf.cf:/etc/mysql/conf.d/myCnf.cnf&quot;</span></span><br><span class="line">    <span class="comment">## 这里并不需要-d参数来后台运行，因为此种方法默认就是后台运行</span></span><br><span class="line">    <span class="comment">## 同时也不需要暴露端口，在微服务集群部署中，MySQL仅仅是供给给集群内的服务使用的，所以不需要对外暴露端口</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">## 临时构建镜像并运行，下面的配置文件包含了docker build和docker run两个步骤</span></span><br><span class="line">    <span class="comment">## docker build -t web:1.0 .</span></span><br><span class="line">    <span class="comment">## docker run --name web -p 8090:8090 -d web:1.0</span></span><br><span class="line">    web:</span><br><span class="line">      build: .</span><br><span class="line">      ports:</span><br><span class="line">        - <span class="string">&quot;8090:8090&quot;</span></span><br></pre></td></tr></table></figure><ul><li>上面的Compose文件就描述一个项目，其中包含两个容器：<ul><li>mysql：一个基于mysql:5.7.25镜像构建的容器，并且挂载了两个项目</li><li>web：一个基于docker build临时构建的镜像容器，映射端口为8090</li></ul></li><li>DockerCompose的详细语法请参考官网：<a href="https://docs.docker.com/compose/compose-file/">https://docs.docker.com/compose/compose-file/</a></li><li>其实DockerCompose文件可以看做是将多个docker run命令写到一个文件，只是语法稍有差异<br><a name="ws60v"></a></li></ul><h3 id="安装DockerCompose">安装DockerCompose</h3><ul><li>在Linux下使用命令下载</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 安装curl -L https://github.com/docker/compose/releases/download/1.23.1/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-compose</span></span><br></pre></td></tr></table></figure><ul><li>修改文件权限</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><ul><li>Base自动补全命令</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -L https://raw.githubusercontent.com/docker/compose/1.29.1/contrib/completion/bash/docker-compose &gt; /etc/bash_completion.d/docker-compose</span><br></pre></td></tr></table></figure><p>如出现错误Failed connect to <a href="http://raw.githubusercontent.com:443">raw.githubusercontent.com:443</a>; Connection refused，需要修改自己的hosts文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;199.232.68.133 raw.githubusercontent.com&quot;</span> &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure><h3 id="部署微服务集群">部署微服务集群</h3><blockquote><p>需求：将之前学习的cloud-demo微服务集群利用DockerCompose部署</p></blockquote><ul><li>实现思路<ol><li>编写docker-compose文件</li><li>修改自己的cloud-demo项目，将其中的数据库、nacos地址，都重命名为docker-compose中的服务名</li><li>使用maven打包工具，将项目中的每个微服务都打包为app.jar（打包名与Dockerfile中一致即可）</li><li>将打包好的app.jar拷贝到cloud-demo中的每一个对应的子目录中，编写Dockerfile文件</li><li>将cloud-demo上传至虚拟机，利用<code>docker-compose up -d</code>来部署</li></ol></li></ul><h4 id="compose文件">compose文件</h4><ul><li>针对我们之前写的cloud-demo，来编写对应的docker-compose文件</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.2&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">nacos:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nacos/nacos-server</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MDOE:</span> <span class="string">standalone</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8848:8848&quot;</span></span><br><span class="line">    <span class="attr">mysql:</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">mysql:5.7.25</span></span><br><span class="line">      <span class="attr">environment:</span></span><br><span class="line">        <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&quot;$PWD/mysql/data:/var/lib/mysql&quot;</span>  <span class="comment">## 这里的$PWD是执行linux命令，获取当前目录</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&quot;$PWD/mysql/conf:/etc/mysql/conf.d&quot;</span></span><br><span class="line">    <span class="attr">userservice:</span></span><br><span class="line">      <span class="attr">build:</span> <span class="string">./user-service</span></span><br><span class="line">    <span class="attr">orderservice:</span></span><br><span class="line">      <span class="attr">build:</span> <span class="string">./order-service</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">build:</span> <span class="string">./gateway</span></span><br><span class="line">      <span class="attr">poets:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&quot;10010:10010&quot;</span></span><br></pre></td></tr></table></figure><ul><li>其中包含了5个服务：<ol><li>nacos：作为注册中心和配置中心<ul><li>image: nacos/nacos-server：基于nacos/nacos-server镜像构建</li><li>environment: 环境变量<ul><li>MODE: standalone：单点模式启动</li></ul></li><li>ports：端口映射，这里暴露了8848端口</li></ul></li><li>mysql：数据库<ul><li>image: mysql5.7.25：基于5.7.25版本的MySQL镜像构建</li><li>environment：环境变量<ul><li>MYSQL_ROOT_PASSWORD: root：设置数据库root账户密码为root</li></ul></li><li>volumes：数据卷挂载，这里挂载了mysql的data和conf目录</li></ul></li><li>userservice：基于Dockerfile临时构建，userservice不需要暴露端口，网关才是微服务的入口，如果暴露了userservice的端口，那么网关的身份认证，权限校验就形同虚设了</li><li>orderservice：基于Dockerfile临时构建，不需要暴露端口，理由同上</li><li>gateway：基于Dockerfile临时构建，网关需要暴露端口，它是其他微服务的入口</li></ol></li></ul><h4 id="修改微服务配置">修改微服务配置</h4><ul><li>使用Docker Compose部署时，所有的服务之间都可以用服务名互相访问，那我们现在就需要修改我们cloud-demo中的yml配置文件，如下</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## bootstrap.yml</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="comment">## server-addr: localhost:80 #Nacos地址</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">nacos:8848</span> <span class="comment">## 使用compose中的服务名来互相访问，用nacos替换localhost</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span> <span class="comment">## 文件后缀名</span></span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## application.yml</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="comment">## url: jdbc:mysql://mysql:3306/cloud_user?useSSL=false</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://mysql:3306/cloud_user?useSSL=false</span> <span class="comment">## 这里同理，使用mysql替换localhost</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br></pre></td></tr></table></figure><h4 id="打包">打包</h4><ul><li>将我们修改好的代码打包，注意修改pom文件指定打包名为app</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 服务打包的最终名称 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>app<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>之后使用maven工具打包</li></ul><h4 id="拷贝jar包到部署目录，并编写Dockerfile文件">拷贝jar包到部署目录，并编写Dockerfile文件</h4><div class="tabs" id="test4"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test4-1">gateway</button></li><li class="tab"><button type="button" data-href="#test4-2">order-service</button></li><li class="tab"><button type="button" data-href="#test4-3">user-service</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">FROM</span> <span class="string">openjdk:8</span></span><br><span class="line"><span class="string">COPY</span> <span class="string">./app.jar</span> <span class="string">/tmp/app.jar</span></span><br><span class="line"><span class="string">ENTERPOINT</span> <span class="string">java</span> <span class="string">-jar</span> <span class="string">/tmp/app.jar</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-2"><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">FROM</span> <span class="string">openjdk:8</span></span><br><span class="line"><span class="string">COPY</span> <span class="string">./app.jar</span> <span class="string">/tmp/app.jar</span></span><br><span class="line"><span class="string">ENTERPOINT</span> <span class="string">java</span> <span class="string">-jar</span> <span class="string">/tmp/app.jar</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-3"><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">FROM</span> <span class="string">openjdk:8</span></span><br><span class="line"><span class="string">COPY</span> <span class="string">./app.jar</span> <span class="string">/tmp/app.jar</span></span><br><span class="line"><span class="string">ENTERPOINT</span> <span class="string">java</span> <span class="string">-jar</span> <span class="string">/tmp/app.jar</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h4 id="部署">部署</h4><ul><li>将cloud-demo上传到虚拟机，进入目录，执行以下命令</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><ul><li>启动之后查看日志，会发现日志中报错<code> com.alibaba.nacos.api.exception.NacosException: failed to req API:/nacos/v1/ns/instance/list after all servers([nacos:8848]) tried: java.net.ConnectException: Connection refused (Connection refused)</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose logs -f</span><br></pre></td></tr></table></figure><p>阿里巴巴nacos连接失败，其原因是userservice在nacos之前启动了，而nacos启动太慢了，userservice注册失败，而且也没有重试机制（等nacos启动完成后，重试注册，就可以避免这个问题）</p><ul><li>所以建议nacos单独先启动，其他服务后启动，我这里的解决方案是重启另外三个服务</li><li>重启gateway userservice orderservice服务</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose restart gateway userservice orderserivce </span><br></pre></td></tr></table></figure><ul><li>查看userservice启动日志，这次就不报错了</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose logs -f userservice</span><br></pre></td></tr></table></figure><ul><li>在浏览器中访问<a href="http://192.168.129.128:10010/user/1?authorization=admin">192.168.129.128:10010/user/1?authorization=admin</a>就能看到如下界面了！（换成自己的虚拟机ip）</li><li>（我这里的ip和上文用到的ip不一样，是因为我把虚拟机的网络配置恢复默认了，系统又分配了个新的地址给我）</li></ul><p><img src="https://s2.loli.net/2024/06/01/vLsApBfDK6Eu8Cz.webp" alt="image-20240601152832765"></p><blockquote><p>如果还是启动失败，建议将自己的虚拟机内存调大一些，实测只开这些服务最多只占用3G内存！</p></blockquote><h2 id="Docker镜像仓库">Docker镜像仓库</h2><ul><li>搭建镜像仓库可以基于Docker官方提供的DockerRegistry来实现</li><li>官网地址：<a href="https://hub.docker.com/_/registry">https://hub.docker.com/_/registry</a></li></ul><h3 id="搭建私有镜像仓库">搭建私有镜像仓库</h3><ul><li>我们自己编写的项目显然是不适合放到Docker的共有仓库的，所以需要我们搭建一个<code>私服</code></li></ul><h4 id="配置Docker信任地址">配置Docker信任地址</h4><ul><li>我们的私服采用的是http协议，默认不被Docker信任，所以需要做一个配置：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 打开要修改的文件</span></span><br><span class="line">vi /etc/docker/daemon.json</span><br><span class="line"><span class="comment">## 添加内容：</span></span><br><span class="line"><span class="string">&quot;insecure-registries&quot;</span>:[<span class="string">&quot;http://192.168.129.128:8080&quot;</span>]</span><br><span class="line"><span class="comment">## 重加载</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line"><span class="comment">## 重启docker</span></span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><h4 id="带图形化界面版本">带图形化界面版本</h4><ul><li>使用DockerCompose部署带有图象界面的DockerRegistry，命令如下：</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.0&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">registry:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">registry</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./registry-data:/var/lib/registry</span></span><br><span class="line">  <span class="attr">ui:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">joxit/docker-registry-ui:static</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8080</span><span class="string">:80</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">REGISTRY_TITLE=XINGYE&#x27;S私有仓库</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">REGISTRY_URL=http://registry:5000</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">registry</span></span><br></pre></td></tr></table></figure><ul><li>随后打开浏览器访问<a href="http://192.168.129.128:8080/">http://192.168.129.128:8080/</a>， 就能看到带图形化界面的镜像仓库了</li></ul><p><img src="https://s2.loli.net/2024/06/01/TQdExR2gkaoI9PL.webp" alt="image-20240601154909342"></p><h3 id="推送、拉取镜像">推送、拉取镜像</h3><ul><li><p>推送镜像到私有镜像服务必须先tag，步骤如下</p><ol><li>重新tag本地镜像，名称前缀为私有仓库的地址：192.168.129.128:8080/</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker tag nginx:latest 192.168.129.128:8080/nginx:1.0</span><br></pre></td></tr></table></figure><ol start="2"><li>推送镜像</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker push 192.168.129.128:8080/nginx:1.0</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/06/01/dRyhTmPlvGi5r8N.webp" alt="image-20240601155157563"></p><ol start="3"><li>拉取镜像</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull 192.168.129.128:8080/nginx:1.0</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">Docker</summary>
    
    
    
    <category term="学习笔记" scheme="https://blog.xing-ye.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Docker" scheme="https://blog.xing-ye.top/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Hexo Butterfly自定义图标</title>
    <link href="https://blog.xing-ye.top/posts/e6b3cdc0/"/>
    <id>https://blog.xing-ye.top/posts/e6b3cdc0/</id>
    <published>2024-04-12T16:00:00.000Z</published>
    <updated>2024-05-28T08:48:50.302Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言">前言</h1><ul><li>Butterfly 主题内置了 Font Awesome V5 图标，目前已更新到 5.13.0，总共有 1,588 个免费图标。由于是国外的图标网站，对于国内的一些网站 Icon 并不支持。如有需要，你可以引入其它的图标服务商。</li><li>下面介绍 <a href="%5Biconfont-%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4%E7%9F%A2%E9%87%8F%E5%9B%BE%E6%A0%87%E5%BA%93%5D(https://www.iconfont.cn/)">iconfont - 阿里巴巴矢量图标库</a>引入自定义 icon</li></ul><h1 id="实操">实操</h1><h2 id="注册iconfont账号">注册iconfont账号</h2><ul><li>这步应该不用说了叭，官网在上面！</li></ul><p><img src="https://s2.loli.net/2024/04/13/mMxRiCX2Vfc3tqE.png" alt="iconfont登录页"></p><h2 id="添加图标并入库">添加图标并入库</h2><ul><li>搜索想要的图标，添加到购物车并添加到项目（没有新建一个）</li></ul><p><img src="https://s2.loli.net/2024/04/13/y5PFbhQcXJagiRq.png" alt="image-20240413153342658"></p><h2 id="生成CSS-链接">生成CSS 链接</h2><ul><li>添加成功后跳转到我的项目中，点击 Font class，点击生成在线链接</li></ul><p><img src="https://s2.loli.net/2024/04/13/EbHh6tW2vBx5QNl.png" alt="image-20240413153451145"></p><h2 id="添加链接进主题配置文件">添加链接进主题配置文件</h2><ul><li>打开_config.butterfly.yml，找到 inject 配置，按要求把链接填入</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Inject</span></span><br><span class="line"><span class="comment"># Insert the code to head (before &#x27;&lt;/head&gt;&#x27; tag) and the bottom (before &#x27;&lt;/body&gt;&#x27; tag)</span></span><br><span class="line"><span class="comment"># 插入代码到头部 &lt;/head&gt; 之前 和 底部 &lt;/body&gt; 之前</span></span><br><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;//at.alicdn.com/t/c/font_4506285_hr105kq4f2q.css&quot;&gt;</span></span><br><span class="line">    <span class="comment"># - &lt;link rel=&quot;stylesheet&quot; href=&quot;/xxx.css&quot;&gt;</span></span><br><span class="line">  <span class="attr">bottom:</span></span><br><span class="line">    <span class="comment"># - &lt;script src=&quot;xxxx&quot;&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><ul><li>在我们需要使用的地方填入 icon，例如 icon-Bing，图片使用格式为 iconfont icon 名字，我的社交图标配置：</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">social:</span></span><br><span class="line">   <span class="attr">fab fa-github:</span> <span class="string">https://github.com/xingye391</span> <span class="string">||</span> <span class="string">Github</span></span><br><span class="line">   <span class="attr">iconfont icon-Bzhan:</span> <span class="string">https://space.bilibili.com/1896203774</span> <span class="string">||</span> <span class="string">bilibili</span></span><br><span class="line">   <span class="attr">iconfont icon-gitee:</span> <span class="string">https://gitee.com/XINGYE391</span> <span class="string">||</span> <span class="string">Gitee</span></span><br><span class="line">   <span class="attr">fas fa-envelope:</span> <span class="string">mailto:1447424604@qq.com</span> <span class="string">||</span> <span class="string">Email</span></span><br></pre></td></tr></table></figure><h2 id="添加博客样式文件">添加博客样式文件</h2><ul><li><p>因为第三方图标样式可能和主题内置图标样式不一致，需要修改：</p><p>新建博客根目录/source/css/xingye391.github.io.css，xingye391.github.io.css 这里修改为你自己的网站，样式文件内容：</p></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 第三方图标样式 */</span></span><br><span class="line"><span class="selector-class">.iconfont</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>修改_config.butterfly.yml：</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Inject</span></span><br><span class="line"><span class="comment"># Insert the code to head (before &#x27;&lt;/head&gt;&#x27; tag) and the bottom (before &#x27;&lt;/body&gt;&#x27; tag)</span></span><br><span class="line"><span class="comment"># 插入代码到头部 &lt;/head&gt; 之前 和 底部 &lt;/body&gt; 之前</span></span><br><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;//at.alicdn.com/t/c/font_4506285_bvygb30mx4.css&quot;&gt;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;/css/xingye391.github.io.css&quot;&gt;</span></span><br><span class="line">  <span class="attr">bottom:</span></span><br><span class="line">    <span class="comment"># - &lt;script src=&quot;xxxx&quot;&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="效果预览">效果预览</h2><p><img src="https://s2.loli.net/2024/04/13/MwetDLKC4y5Ub7i.png" alt="image-20240413161058370"></p>]]></content>
    
    
    <summary type="html">Hexo Butterfly自定义图标</summary>
    
    
    
    <category term="博客" scheme="https://blog.xing-ye.top/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="博客" scheme="https://blog.xing-ye.top/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>利用 PicGo 快速迁移语雀外链图片到Hexo博客</title>
    <link href="https://blog.xing-ye.top/posts/9a830c3f/"/>
    <id>https://blog.xing-ye.top/posts/9a830c3f/</id>
    <published>2024-04-08T16:00:00.000Z</published>
    <updated>2024-05-17T02:27:47.475Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言">前言</h1><ul><li>本人最早写的博客笔记都是在语雀上，由于这个站的诞生，我开始迁移我的博客文章到本站。</li><li>但因语雀图床加了防盗链（后来才知道，最开始还以为能白嫖图床哈哈），导致我导出MD文档图片能只能在本地显示，放到Hexo预览却消失不见！</li><li>后面自己加入了阿里云OSS服务作为图床使用，但我一篇博客有几十张图片，如果需要手动一张张替换URL，多么费时费力啊！</li><li>于是呢，我就找有什么解决办法能够批量迁移出这些图片并自动放到我OSS里。</li></ul><h1 id="解决办法">解决办法</h1><h2 id="PicGo-插件-picgo-plugin-pic-migrater">PicGo 插件 picgo-plugin-pic-migrater</h2><ol><li>首先设置好图床</li></ol><p><img src="https://s2.loli.net/2024/04/10/2Nu6gWjF4kCJoA9.png" alt=""></p><ol start="2"><li>接着在插件设置模块搜索安装picgo-plugin-pic-migrater插件</li></ol><p><img src="https://s2.loli.net/2024/04/10/GTWlVk8qRUiCZLn.png" alt="image-20240410001810890"></p><ol start="3"><li>安装成功后，重启。把你写的那些文章全部复制到一个文件夹</li></ol><p><img src="https://s2.loli.net/2024/04/10/N8StJr1UzEgPomX.png" alt="image-20240410001921841"></p><ol start="4"><li>然后耐心的等待上传成功的消息就行</li><li>替换下之前博文的文档，重新部署一下，就能在博客里看见图片啦！</li></ol><hr><ul><li>全部替换成功后，只有一个字——爽！</li></ul>]]></content>
    
    
    <summary type="html">利用 PicGo 快速迁移语雀外链图片到Hexo博客</summary>
    
    
    
    <category term="博客" scheme="https://blog.xing-ye.top/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="博客" scheme="https://blog.xing-ye.top/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>建站小记基础篇</title>
    <link href="https://blog.xing-ye.top/posts/ae1c1b1b/"/>
    <id>https://blog.xing-ye.top/posts/ae1c1b1b/</id>
    <published>2024-04-07T00:00:00.000Z</published>
    <updated>2024-06-28T04:08:18.818Z</updated>
    
    <content type="html"><![CDATA[<p><a name="qKqb3"></a></p><h1 id="前言">前言</h1><ul><li>欢迎来到我的建站笔记，该系列的文章将教你如何使用<code>Github</code>搭建自己的博客网站。</li><li>这个博客网站需要用到<code>Hexo</code>框架和<code>Butterfly</code>主题，网站代码托管于<code>Github</code> 。</li><li><code>Hexo</code>是一个静态博客网站框架，使用 <code>Hexo</code>以及其提供的诸多配置选项，所有代码以及你的 <code>Markdown</code>博客被转换为静态网页文件后递交到 <code>Github</code>，不需要拥有自己的服务器就可以搭建一个博客网站。虽然静态网站有很多局限性，但这作为博客够用了！这是 <a href="https://hexo.io/zh-cn/">Hexo</a> 的官方文档，如果你需要更深入的使用 <code>Hexo</code>可能需要该官方文档。</li><li><code>Butterfly</code>是基于 <code>Hexo</code>的主题，提供了许多相关配置，快速美化你的博客网站。当然使用这类主题使得博客同质化严重。由于<code>Butterfly</code>的作者是香港人，这意味着你可以看到中文的官方文档。这是 <a href="https://butterfly.js.org/">Butterfly</a>的官方主页，右下角有简繁体转换按钮，后面的许多配置本文无法一一介绍，需要你自己查阅官方文档。<br><a name="dpK18"></a><div class="note info modern"><p>在正式开始你的配置之前，请务必确保你会以下技能：<code>命令行</code> 、 <code>Git</code> 、 <code>Markdown</code> 。<br />后面此博客的所有文章都使用 <code>Markdown</code> 书写。</p></div></li></ul><h1 id="建站小记（一）">建站小记（一）</h1><h2 id="环境准备">环境准备</h2><p>本教程主要面向 <code>Windows</code> 用户</p><ul><li>操作系统：<code>Windows10/11</code></li><li><code>Node</code>、<code>Git</code>、<code>Hexo</code></li><li><code>IDE</code>（自选，强烈推荐<code>VS code</code>）</li><li><code>GitHub</code> 帐号</li><li><code>域名</code>（可选，但推荐）</li><li><code>云服务器</code>（可选）</li></ul><h2 id="安装Node">安装Node</h2><ol><li><p>打开<a href="https://nodejs.org/en/download/">Node官网</a></p></li><li><p>下载稳定版本即可</p></li><li><p>傻瓜式安装，安装路径自选</p></li><li><p>安装完成后，检查是否安装成功。在键盘按下<code>win + R</code>键，输入<code>CMD</code>，然后回车，打开CMD窗口，执行<code>node -v</code>命令，看到版本信息，则说明安装成功。</p></li><li><p>修改<code>npm</code>源。<code>npm</code>下载各种模块，默认是从国外服务器下载，速度较慢，建议配置成淘宝镜像。</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo npm config <span class="built_in">set</span> registry https://registry.npmmirror.com</span><br></pre></td></tr></table></figure><p><a name="XHCqT"></a></p><h2 id="安装Hexo">安装Hexo</h2><ul><li>在目标路径打开<code>cmd</code>窗口 ，输入<code>npm install -g hexo-cli</code> 安装<code>Hexo</code>环境</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><ul><li>安装完输入<code>hexo -v</code>验证是否安装成功</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure><h2 id="GitHub账号相关">GitHub账号相关</h2><blockquote><p>该部分内容为补充内容</p></blockquote><ol><li><p>进入官网 <a href="https://github.com/">https://github.com/</a></p><p><img src="https://bu.dusays.com/2022/05/12/627d2c0449341.webp" alt="Github注册"></p></li><li><p>点击右上角的 Sign up(注册)</p><p><img src="https://bu.dusays.com/2022/05/12/627d2c05ee628.png" alt="Github注册"></p></li><li><p>填写自己的邮箱、密码、用户名等信息，然后用邮箱验证即可完成。</p></li><li><p>注册完成后，点击右上角的<code>+</code>按钮，选择<code>New repository</code>，创建一个<code>&lt;用户名&gt;.github.io</code>的仓库。</p></li></ol><ul><li><p>仓库的格式必须为：<code>&lt;用户名&gt;.github.io</code> (注意：前缀必须为用户名，不要等后面404了再来为什么！！！)</p></li><li><p>Description：为描述仓库（选填）</p></li><li><p>勾选 <code>Initialize this repository with a README</code>初始化一个 <a href="http://readme.md/">README.md</a> 文件</p></li><li><p>点击 <code>Creat repository</code> 进行创建（此处借用tzy大佬的图片）</p><p><img src="https://bu.dusays.com/2022/05/13/627d4109113e8.png" alt="此处借用tzy大佬的图片"></p></li></ul><h2 id="Git安装-连接Github">Git安装 &amp;&amp; 连接Github</h2><h3 id="安装">安装</h3><ol><li><p>进入官网：<a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a> ，由于官网下载太慢可以通过淘宝的开源镜像下载 网址：<a href="https://registry.npmmirror.com/binary.html?path=git-for-windows/v2.36.1.windows.1/">https://registry.npmmirror.com/binary.html?path=git-for-windows/v2.36.1.windows.1/</a> ，下载版本更具自己的需求选择即可。</p><p><img src="https://bu.dusays.com/2022/05/13/627d410b6156f.png" alt="img"></p></li><li><p>下载后傻瓜式安装Git即可，安装的目录可以使用默认目录【C:/Program Files/Git】，也可以自定义路径。</p></li><li><p>点击电脑左下角开始即可看见<code>Git Bash</code>。<img src="https://bu.dusays.com/2022/05/13/627d410ddc940.webp" alt="Git Bash"></p></li></ol><ul><li><code>Git CMD</code> 是windows 命令行的指令风格</li><li><code>Git Bash</code> 是linux系统的指令风格（建议使用）</li><li><code>Git GUI</code>是图形化界面（新手学习不建议使用）</li></ul><ol start="4"><li><p>常用命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config -l  //查看所有配置</span><br><span class="line">git config --system --list //查看系统配置</span><br><span class="line">git config --global --list //查看用户（全局）配置</span><br></pre></td></tr></table></figure></li><li><p>配置用户名和邮箱</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;你的用户名&quot;</span><br><span class="line">git config --global user.email &quot;你的邮箱&quot;</span><br></pre></td></tr></table></figure></li><li><p>通过<code>git config -l</code> 检查是否配置成功，至此git安装及配置全部完成。</p><p><img src="https://s2.loli.net/2024/06/28/cxEUMhqkDSJCjdz.webp" alt="image-20240628120103385"></p></li></ol><h3 id="连接GitHub">连接GitHub</h3><ol><li><p>执行以下命令生成ssh公钥，此公钥用于你的计算机连接Github</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;你的邮箱&quot;</span><br></pre></td></tr></table></figure><p>之后打开C盘下用户文件夹下的.ssh的文件夹，会看到 id_rsa.pub</p><p><img src="https://bu.dusays.com/2022/05/14/627e87126fc59.png" alt="公钥"></p><p>用记事本打开上述图片中的公钥（id_rsa.pub），复制里面的内容，然后开始在github中配置ssh密钥。</p><p><img src="https://bu.dusays.com/2022/05/14/627e87156038a.png" alt="记事本打开公钥"></p></li><li><p>将 SSH KEY 配置到 GitHub<br>进入github，点击右上角头像 选择<code>settings</code>，进入设置页后选择 <code>SSH and GPG keys</code>，名字随便起，公钥填到<code>Key</code>那一栏。</p><p><img src="https://s2.loli.net/2024/05/28/wWqINCapYT39yJb.png" alt="image-20221027112657256"></p></li></ol><blockquote><p>注意: 要是有【Key type】的选择项 ，选择默认Authentication Key 即可。</p></blockquote><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">ssh</span> -T git<span class="variable">@github</span>.com</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/05/28/1nCTs9yGFqSHzJa.png" alt="image-20221027112918539"></p><p>出现连接到账户的信息，说明已经大功告成，至此完成了环境准备工作。</p><h1 id="建站小记（二）">建站小记（二）</h1><h2 id="初始化Hexo项目">初始化Hexo项目</h2><ul><li>在目标路径打开<code>cmd</code>命令窗口，执行<code>hexo init</code>初始化项目<code>hexo init blog-demo</code></li></ul><p><img src="https://s2.loli.net/2024/04/12/GkD7g56mxAyXv4I.png" alt="image.png"></p><ul><li>进入blog-demo ,输入 <code>npm i </code>安装相关依赖</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> blog-demo  //进入blog-demo文件夹</span><br><span class="line">npm i</span><br></pre></td></tr></table></figure><ul><li>初始化项目后，blog-demo 有如下结构</li></ul><p><img src="https://s2.loli.net/2024/04/12/HUwNmkXSfsB8jce.png" alt="image.png"></p><ul><li>输入<code>hexo server</code></li></ul><p><img src="https://s2.loli.net/2024/04/12/qjLliAJhxtCK9Ub.png" alt="image.png"></p><ul><li>打开浏览器 输入地址，看到下面的效果说明博客已经构建成功了</li></ul><p><img src="https://s2.loli.net/2024/04/12/xvkryJqQXf8IOcV.png" alt="image.png"></p><h2 id="将静态博客挂载到GitHub-Pages">将静态博客挂载到GitHub Pages</h2><h3 id="安装-hexo-deployer-git">安装 hexo-deployer-git</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p><a name="Kv3VG"></a></p><h3 id="修改-config-yml文件">修改_config,yml文件</h3><ul><li>在blog-demo目录下的<code>_config.yml</code>，就是整个Hexo框架的配置文件了。可以在里面修改大部分的配置。详细可参考官方的配置描述。</li><li>修改最后一行的配置，将<code>repository</code>修改为你自己的github项目地址即可。</li><li>请检查自己的默认分支是不是master。（很重要我第一次部署就出错了！！！）</li><li>我的github默认分支时main ，后面去yml改过来了（如果还是没页面，要清下缓存）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repository: git@github.com:/XINGYE391/XINGYE391.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p><a name="qoWhH"></a></p><h3 id="部署项目到GitHub">部署项目到GitHub</h3><ul><li>修改配置完成后，运行命令，将代码部署到<code>GitHub</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><ul><li><code>hexo clean</code>：删除之前生成的文件，若未生成过静态文件，可忽略此命令。</li><li><code>hexo generate</code>：生成静态文章，可以用hexo g缩写</li><li><code>hexo deploy</code>：部署文章，可以用hexo d缩写</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo s <span class="comment">#hexo 三连</span></span><br></pre></td></tr></table></figure><ul><li>出现如下，说明部署成功</li></ul><p><img src="https://s2.loli.net/2024/04/12/bSTBa4ut6RQZChD.png" alt="image.png"></p><ul><li>（稍等几分钟）浏览器访问：<a href="https://xingye391.github.io/">https://xingye391.github.io/</a>，可以看到博客内容了</li><li>再次提醒！如果没页面——请检查自己的默认分支是不是master。（很重要我第一次部署就出错了！！！）</li></ul><p><img src="https://s2.loli.net/2024/04/12/FX2qpc8gfoeuyHt.png" alt="image.png"></p><h3 id="无法连接至Github的解决方案">无法连接至Github的解决方案</h3><blockquote><p>注意：当你在与Github进行ssh通信时候出现超时或者是连接被关闭的情况，可以尝试以下解决方案。</p></blockquote><ol><li><p>挂代理和换网络（这个就不用多说了）</p></li><li><p><a href="https://blog.csdn.net/weixin_41287260/article/details/124368189">Git问题：解决“ssh:connect to host github.com port 22: Connection timed out”</a></p></li><li><p>开源项目<a href="https://github.com/521xueweihan/GitHub520">Github520</a></p><p>通过修改Host文件的方法解决访问速度慢的问题</p></li></ol><p>连接有效性检验：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 任选其一即可</span></span><br><span class="line">ping github.com</span><br><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><h2 id="设置个人域名">设置个人域名</h2><p>现在你的个人网站的地址是 <code>yourname.github.io</code>。如果觉得不够定制化，可以购买一个专属域名。</p><div class="note info modern"><p>这一步不是必要的，如果目前还不想买域名可以先跳过。</p></div><p>阿里云、腾讯云等都是不错的选择，建议选用<code>com</code>，<code>cn</code>或<code>cc</code>这类常用好记的顶域，对SEO比较友好，自定义部分的长度尽可能短别人才会更容易地记住你的网站，要知道域名就是你网站的卡片。</p><p>博主选择的阿里云的<code>.top</code>。购买域名后，实名认证进入阿里云控制台，点云解析进去，找到你刚买的域名，点进去添加两条解析记录，记录值 请填写<code>&lt;用户名&gt;.github.io</code>，如下图所示：</p><p><img src="https://s2.loli.net/2024/05/28/zoLfOryZDJ5gt1W.png" alt="image-20240528161112261"></p><p>以我的域名：<code>xing-ye.top</code>为例进行说明</p><table><thead><tr><th style="text-align:center">主机记录</th><th style="text-align:center">解释</th></tr></thead><tbody><tr><td style="text-align:center">www</td><td style="text-align:center">解析后的域名为 <a href="http://www.xing-ye.top/">www.xing-ye.top</a></td></tr><tr><td style="text-align:center">@</td><td style="text-align:center">直接解析主域名 <a href="http://xing-ye.top/">xing-ye.top</a></td></tr><tr><td style="text-align:center">*</td><td style="text-align:center">泛解析，匹配其他所有域名 *.xing-ye.top</td></tr><tr><td style="text-align:center">mail</td><td style="text-align:center">将域名解析为 <a href="http://mail.xing-ye.top/">mail.xing-ye.top</a>，通常用于解析邮箱服务器</td></tr><tr><td style="text-align:center">二级</td><td style="text-align:center">如 <a href="http://abc.xing-ye.top/">abc.xing-ye.top</a>，填写 abc</td></tr><tr><td style="text-align:center">手机网站</td><td style="text-align:center">如 <a href="http://m.xing-ye.top/">m.xing-ye.top</a>，填写 m</td></tr><tr><td style="text-align:center">显性URL</td><td style="text-align:center">不支持泛解析（泛解析：将所有子域名解析到同一地址）</td></tr></tbody></table><p>将域名指向云服务器，请选择「A」； 将域名指向另一个域名，请选择「CNAME」； 建立邮箱请选择「MX」，根据邮箱服务商提供的 MX 记录填写。</p><table><thead><tr><th style="text-align:center">记录类型</th><th style="text-align:center">解释</th></tr></thead><tbody><tr><td style="text-align:center">A</td><td style="text-align:center">用来指定域名的 IPv4 地址（如 8.8.8.8），如果需要将域名指向一个 IP 地址，就需要添加 A 记录。</td></tr><tr><td style="text-align:center">CNAME</td><td style="text-align:center">如果需要将域名指向另一个域名，再由另一个域名提供 IP 地址，就需要添加 CNAME 记录。</td></tr><tr><td style="text-align:center">MX</td><td style="text-align:center">如果需要设置邮箱，让邮箱能收到邮件，就需要添加 MX 记录。</td></tr><tr><td style="text-align:center">TXT</td><td style="text-align:center">在这里可以填写任何东西，长度限制 255。绝大多数的 TXT 记录是用来做 SPF 记录（反垃圾邮件）</td></tr><tr><td style="text-align:center">NS</td><td style="text-align:center">域名服务器记录，如果需要将子域名交给其他 DNS 服务商解析，就需要添加 NS 记录。</td></tr><tr><td style="text-align:center">AAAA</td><td style="text-align:center">用来指定主机名（或域名）对应的 IPv6 地址（例如：ff06:0:0:0:0:0:0:c3）记录。</td></tr><tr><td style="text-align:center">SRV</td><td style="text-align:center">记录了哪台计算机提供了哪个服务。格式为：服务的名字、点、协议的类型，例如：_xmpp-server_tcp。</td></tr><tr><td style="text-align:center">显性URL</td><td style="text-align:center">从一个地址 301 重定向到另一个地址的时候，就需要添加显性 URL 记录（注：DNSPod 目前只支持 301 重定向）。</td></tr><tr><td style="text-align:center">隐性URL</td><td style="text-align:center">类似于显性 URL，区别在于隐性 URL 不会改变地址栏的域名。</td></tr></tbody></table><p>打开你的github博客项目，点击settings，点击Pages，拉到下面Custom domain处，填上你自己的域名 ，保存。</p><p><img src="https://s2.loli.net/2024/05/28/wvEIcQ846tTpLrl.png" alt="image-20240528162214339"></p><p>部署成功后，再打开你的浏览器，输入你自己的专属域名，即可看到你的博客网站！</p><h1 id="建站小记（三）">建站小记（三）</h1><h2 id="安装主题">安装主题</h2><ul><li>本站基于<code>Hexo</code>搭建，<code>ButterFly</code>主题</li><li>使用<code>git clone</code>安装 <code>ButterFly</code><ul><li>在博客根目录，打开<code>git</code>工具，执行命令</li><li>稳定主题</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure><ul><li>使用低版本butterfly会导致冲突报错（hexo版本高、butterfly版本低不兼容）<br><a name="ReAaV"></a></li></ul><h2 id="应用主题">应用主题</h2><ul><li>修改站点配置文件<code>_config.yml</code>，把主题改为 butterfly</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: butterfly</span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><p><img src="https://s2.loli.net/2024/04/12/ynINwbWQxKjRMp5.png" alt="image.png"></p><blockquote><p>把主题文件夹中的 <code>_config.yml</code> 复制到 Hexo 根目录里（我这里路径为【C:/Hexo-Blog/blog-demo】），同时重新命名为 <code>_config.butterfly.yml</code>。以后只需要在 <code>_config.butterfly.yml</code>进行配置即可生效。Hexo会自动合併主题中的<code>_config.yml</code>和 <code>_config.butterfly.yml</code>里的配置，如果存在同名配置，会使用<code>_config.butterfly.yml</code>的配置，其优先度较高。</p></blockquote><h2 id="安装渲染器">安装渲染器</h2><p>如果你没有<code>pug</code>以及<code>stylus</code>的渲染器，请下载安装，这两个渲染器是<code>Butterfly</code>生成基础页面所需的依赖包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure><h2 id="Front-matter">Front-matter</h2><ul><li><p>这部分内容每写一篇文章都要用到，我就给它单拎出来了。</p></li><li><p><code>Front-matter</code> 是 markdown 文件最上方以<code>---</code>分隔的区域，用于指定个别档案的变数。</p><ul><li>Page Front-matter 用于页面配置</li><li>Post Front-matter 用于文章页配置</li></ul></li><li><p>tips:如果标注可选的参数，可根据自己需要添加，不用全部都写</p></li></ul><p><strong>Page Front-matter：</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title:</span><br><span class="line">date:</span><br><span class="line">updated:</span><br><span class="line">type:</span><br><span class="line">comments:</span><br><span class="line">description:</span><br><span class="line">keywords:</span><br><span class="line">top<span class="emphasis">_img:</span></span><br><span class="line"><span class="emphasis">mathjax:</span></span><br><span class="line"><span class="emphasis">katex:</span></span><br><span class="line"><span class="emphasis">aside:</span></span><br><span class="line"><span class="emphasis">aplayer:</span></span><br><span class="line"><span class="emphasis">highlight_</span>shrink:</span><br><span class="line">---</span><br></pre></td></tr></table></figure><table><thead><tr><th>写法</th><th style="text-align:left">解释</th></tr></thead><tbody><tr><td>title</td><td style="text-align:left">【必需】页面标题</td></tr><tr><td>date</td><td style="text-align:left">【必需】页面创建日期</td></tr><tr><td>type</td><td style="text-align:left">【必需】标籤、分类和友情链接三个页面需要配置</td></tr><tr><td>updated</td><td style="text-align:left">【可选】页面更新日期</td></tr><tr><td>description</td><td style="text-align:left">【可选】页面描述</td></tr><tr><td>keywords</td><td style="text-align:left">【可选】页面关键字</td></tr><tr><td>comments</td><td style="text-align:left">【可选】显示页面评论模块(默认 true)</td></tr><tr><td>top_img</td><td style="text-align:left">【可选】页面顶部图片</td></tr><tr><td>mathjax</td><td style="text-align:left">【可选】显示mathjax(当设置mathjax的per_page: false时，才需要配置，默认 false)</td></tr><tr><td>kates</td><td style="text-align:left">【可选】显示katex(当设置katex的per_page: false时，才需要配置，默认 false)</td></tr><tr><td>aside</td><td style="text-align:left">【可选】显示侧边栏 (默认 true)</td></tr><tr><td>aplayer</td><td style="text-align:left">【可选】在需要的页面加载aplayer的js和css,请参考文章下面的音乐 配置</td></tr><tr><td>highlight_shrink</td><td style="text-align:left">【可选】配置代码框是否展开(true/false)(默认为设置中highlight_shrink的配置)</td></tr></tbody></table><p><strong>Post Front-matter：</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title:</span><br><span class="line">date:</span><br><span class="line">updated:</span><br><span class="line">tags:</span><br><span class="line">categories:</span><br><span class="line">keywords:</span><br><span class="line">description:</span><br><span class="line">top<span class="emphasis">_img:</span></span><br><span class="line"><span class="emphasis">comments:</span></span><br><span class="line"><span class="emphasis">cover:</span></span><br><span class="line"><span class="emphasis">toc:</span></span><br><span class="line"><span class="emphasis">toc_</span>number:</span><br><span class="line">toc<span class="emphasis">_style_</span>simple:</span><br><span class="line">copyright:</span><br><span class="line">copyright<span class="emphasis">_author:</span></span><br><span class="line"><span class="emphasis">copyright_</span>author<span class="emphasis">_href:</span></span><br><span class="line"><span class="emphasis">copyright_</span>url:</span><br><span class="line">copyright<span class="emphasis">_info:</span></span><br><span class="line"><span class="emphasis">mathjax:</span></span><br><span class="line"><span class="emphasis">katex:</span></span><br><span class="line"><span class="emphasis">aplayer:</span></span><br><span class="line"><span class="emphasis">highlight_</span>shrink:</span><br><span class="line"><span class="section">aside:</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>写法</th><th>解释</th></tr></thead><tbody><tr><td>title</td><td>【必需】文章标题</td></tr><tr><td>date</td><td>【必需】文章创建日期</td></tr><tr><td>updated</td><td>【可选】文章更新日期</td></tr><tr><td>tags</td><td>【可选】文章标籤</td></tr><tr><td>categories</td><td>【可选】文章分类</td></tr><tr><td>keywords</td><td>【可选】文章关键字</td></tr><tr><td>description</td><td>【可选】文章描述</td></tr><tr><td>top_img</td><td>【可选】文章顶部图片</td></tr><tr><td>cover</td><td>【可选】文章缩略图(如果没有设置top_img,文章页顶部将显示缩略图，可设为false/图片地址/留空)</td></tr><tr><td>comments</td><td>【可选】显示文章评论模块(默认 true)</td></tr><tr><td>toc</td><td>【可选】显示文章TOC(默认为设置中toc的enable配置)</td></tr><tr><td>toc_number</td><td>【可选】显示toc_number(默认为设置中toc的number配置)</td></tr><tr><td>toc_style_simple</td><td>【可选】显示 toc 简洁模式</td></tr><tr><td>copyright</td><td>【可选】显示文章版权模块(默认为设置中post_copyright的enable配置)</td></tr><tr><td>copyright_author</td><td>【可选】文章版权模块的文章作者</td></tr><tr><td>copyright_author_href</td><td>【可选】文章版权模块的文章作者链接</td></tr><tr><td>copyright_url</td><td>【可选】文章版权模块的文章连结链接</td></tr><tr><td>copyright_info</td><td>【可选】文章版权模块的版权声明文字</td></tr><tr><td>mathjax</td><td>【可选】显示mathjax(当设置mathjax的per_page: false时，才需要配置，默认 false)</td></tr><tr><td>katex</td><td>【可选】显示katex(当设置katex的per_page: false时，才需要配置，默认 false)</td></tr><tr><td>aplayer</td><td>【可选】在需要的页面加载aplayer的js和css,请参考文章下面的音乐 配置</td></tr><tr><td>highlight_shrink</td><td>【可选】配置代码框是否展开(true/false)(默认为设置中highlight_shrink的配置)</td></tr><tr><td>aside</td><td>【可选】显示侧边栏 (默认 true)</td></tr></tbody></table><h2 id="Butterfly-博客主题搭建配置">Butterfly 博客主题搭建配置</h2><ul><li>这边建议查看<a href="https://butterfly.js.org/posts/21cfbf15/">butterfly官网文档</a>OR<a href="https://www.fomal.cc/posts/3451f874.html">Hexo博客搭建基础教程(三) | Fomalhaut🥝</a></li><li>需要什么功能DIY就好啦</li></ul><h1 id="建站小记（四）">建站小记（四）</h1><h2 id="Typora-PicGo-阿里云OSS图床">Typora+PicGo+阿里云OSS图床</h2><p><a name="SOFh0"></a></p><h2 id="为什么要搭建博客图床">为什么要搭建博客图床?</h2><ul><li>在本地的markdown文件.md中，图片是以“外链”这一形式存在的</li><li>Office word中，图片是直接插入docx文件里面</li><li>Markdown中，图片只是一个本地/联网的地址</li><li>也就是说，如果我们使用本地markdown编译器（如typora）来编辑MD文件的时候，如果MD里面插入的图片的源文件被移动或者删除了，我们的MD文档里面对应的图片也无法显示出来。</li><li>这个时候就要选择<code>图床</code>了！图床是一个在云端存储图片的平台，使用图床可以比较好的解决这个问题。<br><a name="VlY5W"></a></li></ul><h2 id="准备软件">准备软件</h2><h3 id="Typora">Typora</h3><p>Typora：<a href="https://typora.com.cn/">【中文官网】</a><br />想必各位应该听很多博主安利过Typora这款软件，这里就不展开描述了<br />新版本typora需要付费买断。可以考虑支持正版，也可以去找找旧版本安装。</p><h3 id="Picgo">Picgo</h3><p>PicGo：<a href="https://github.com/Molunerfinn/PicGo/releases">【Github地址】</a><br />找到对应安装包，下载安装即可</p><h2 id="配置阿里云OSS">配置阿里云OSS</h2><p>在浏览器搜索<strong>阿里云OSS</strong>，即可找到<a href="https://www.aliyun.com/product/oss">官网</a>(我记得新用户有 3 个月免费使用，可以试一下!)</p><ol><li>登录阿里云网站，进入工作台页面，搜索对象存储，进入该页面，然后点击 bucket 列表</li></ol><p><img src="https://s2.loli.net/2024/04/12/agA6qjPH4wGOEeD.png" alt=""></p><ol start="2"><li>进入页面，点击创建 bucket</li></ol><ul><li>Bucket 名称和地域必填。地域选择一个距离自己近一些的地方。</li><li>读写权限选择为公共读，其余均默认，然后就创建成功啦。</li></ul><p><img src="https://s2.loli.net/2024/04/12/ZNSgmCJUtbDlAuo.png" alt=""></p><ol start="3"><li>点击网页右上角的头像，再点击 AccessKey 管理，进入该页面</li><li>生成一个 AccessKey，记得 Secret 只会显示这一次，所以要记录下来</li></ol><p><img src="https://s2.loli.net/2024/04/12/S81HiFT6CR2KGls.png" alt="image.png"><br><a name="mOef7"></a></p><h2 id="配置picgo">配置picgo</h2><h3 id="图床设置">图床设置</h3><p>在图床设置里面选择阿里云OSS，依照以下步骤填写信息<br />设定Keyld：填写刚刚获得的AccessKeyID<br />设定KeySecret：填写AccessKeyIDSecret<br />设定储存空间名：填写bucket名称<br />这里填写的是bucket名称，不是浏览器里的域名<br />确认存储区域：填写你的地域节点，注意复制的格式<br />指定存储路径：其实就是自定义一个文件夹的名字，以/结尾它会自动在你的bucket里面创建一个文件夹，并把图片上传进去</p><p><img src="https://s2.loli.net/2024/06/28/O5VQUtuwbskhM7E.webp" alt="image-20240628120735855"></p><h2 id="配置Typora">配置Typora</h2><p>使用 Typora 我们就能够边写，边截图图片放上去的时候，就会自动上传，这样就很轻松啦！！<br />当我们成功搭建好图床之后，每次写 Markdown 文档时，都需要先截图，再保存，然后手动打开 Picgo 完成上传，最后将图片地址复制到 Markdown 文档中。<br />如何做到更加高效地上传图片到图床呢？<br />用 Typora 写笔记，只需要先截图，再粘贴到 Markdown 文档，即可直接跳过上传操作，Typora 帮我们自动完成。<br />操作为：打开 Typora 的设置，点击图像，按照我给的图片进行设置<br /><img src="https://s2.loli.net/2024/04/12/HCO8w5dQVE3x6aI.png" alt=""></p><h1 id="Ending">Ending</h1><ul><li>本站<code>建站小记（一）-（四）</code>已完成博客搭建+基础主题配置+博文编写上传功能，已经满足了大部分人只为撰写博客的需求</li><li>若想让自己的博客更加美观，则须多加参考<a href="https://butterfly.js.org/">Butterfly官方文档</a>以及其他大佬的魔改教程，我本人也会在<code>博客</code>分类中分享一些魔改帖子（精力有限的情况下（哈哈））</li><li>此贴完结！！！</li></ul>]]></content>
    
    
    <summary type="html">建站小记基础篇</summary>
    
    
    
    <category term="博客" scheme="https://blog.xing-ye.top/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="建站小记" scheme="https://blog.xing-ye.top/tags/%E5%BB%BA%E7%AB%99%E5%B0%8F%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud</title>
    <link href="https://blog.xing-ye.top/posts/96a41905/"/>
    <id>https://blog.xing-ye.top/posts/96a41905/</id>
    <published>2024-04-06T16:00:00.000Z</published>
    <updated>2024-05-31T07:32:00.584Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在此感谢黑马程序员的<a href="https://www.bilibili.com/video/BV1LQ4y127n4?p=1&amp;vd_source=39cd09fae5d0f121c16eee7c134119f6">SpringCloud课程</a></p></blockquote><h2 id="认识微服务">认识微服务</h2><p>随着互联网行业的发展，对服务的要求也越来越高，服务架构也从单体架构逐渐演变为现在流行的微服务架构。这些架构之间有怎样的差别呢？</p><h3 id="单体架构">单体架构</h3><ul><li><p><strong>单体架构</strong>：将业务的所有功能集中在一个项目中开发，打成一个包部署。<img src="https://s2.loli.net/2024/05/30/z5E2gfCIYv1sRqj.png" alt="danti"></p></li><li><p>单体架构的优缺点：</p></li></ul><p>​<strong>优点：</strong> 架构简单、部署成本低</p><p>​<strong>缺点：</strong> 耦合度高（维护困难、升级困难）</p><h3 id="分布式架构">分布式架构</h3><ul><li><p><strong>分布式架构</strong>：根据业务功能对系统做拆分，每个业务功能模块作为独立项目开发，称为一个服务。<img src="https://s2.loli.net/2024/05/30/67zUMm2kgQDwLTe.webp" alt="image-20210713203124797"></p></li><li><p>分布式架构的优缺点：</p></li></ul><p><strong>优点：</strong>  降低服务耦合、有利于服务升级和拓展</p><p><strong>缺点：</strong>  服务调用关系错综复杂</p><p>分布式架构虽然降低了服务耦合，但是服务拆分时也有很多问题需要思考：</p><ul><li>服务拆分的粒度如何界定？</li><li>服务之间如何调用？</li><li>服务的调用关系如何管理？</li></ul><p>人们需要制定一套行之有效的标准来约束分布式架构。</p><h3 id="微服务">微服务</h3><p>微服务的架构特征：</p><ul><li>单一职责：微服务拆分粒度更小，每一个服务都对应唯一的业务能力，做到单一职责</li><li>自治：团队独立、技术独立、数据独立，独立部署和交付</li><li>面向服务：服务提供统一标准的接口，与语言和技术无关</li><li>隔离性强：服务调用做好隔离、容错、降级，避免出现级联问题</li></ul><p><img src="https://pic1.imgdb.cn/item/636a511416f2c2beb157bdb5.jpg" alt="image-20210713203753373"></p><p>微服务的上述特性其实是在给分布式架构制定一个标准，进一步降低服务之间的耦合度，提供服务的独立性和灵活性。做到<code>高内聚，低耦合</code>。</p><p>因此，可以认为<strong>微服务</strong>是一种经过良好架构设计的<strong>分布式架构方案</strong> 。</p><p>其中在Java领域最引人注目的就是SpringCloud提供的方案了。</p><h3 id="SpringCloud">SpringCloud</h3><p>SpringCloud是目前国内使用最广泛的微服务框架。官网地址：<a href="https://spring.io/projects/spring-cloud%E3%80%82">https://spring.io/projects/spring-cloud。</a></p><p>SpringCloud集成了各种微服务功能组件，并基于SpringBoot实现了这些组件的自动装配，从而提供了良好的开箱即用体验。</p><p>其中常见的组件包括：</p><p><img src="https://s2.loli.net/2024/05/30/THFOqv2mUuZScBj.webp" alt="image-20210713204155887"></p><ul><li>另外，SpringCloud 底层是依赖于SpringBoot的，并且有版本的兼容关系，如下</li></ul><table><thead><tr><th style="text-align:center">Release Train</th><th style="text-align:center">Boot Version</th></tr></thead><tbody><tr><td style="text-align:center">2020.0.x aka llford</td><td style="text-align:center">2.4.x</td></tr><tr><td style="text-align:center">Hoxton</td><td style="text-align:center">2.2.x,2.3.x (Starting with SR5)</td></tr><tr><td style="text-align:center">Greenwich</td><td style="text-align:center">2.1.x</td></tr><tr><td style="text-align:center">Finchley</td><td style="text-align:center">2.0.x</td></tr><tr><td style="text-align:center">Edgware</td><td style="text-align:center">1.5.x</td></tr><tr><td style="text-align:center">Dalston</td><td style="text-align:center">1.5.X</td></tr></tbody></table><ul><li>本文的学习版本是Hoxton.SR10，因此对应的是SpringBoot版本是2.3.x</li></ul><h3 id="总结">总结</h3><ul><li>单体架构：简单方便，高度耦合，扩展性差，适合小型项目。例如：学生管理系统</li><li>分布式架构：松耦合，扩展性好，但架构复杂，难度大。适合大型互联网项目。例如：京东、淘宝</li><li>微服务：一种更好的分布式架构方案<ul><li>优点：拆分力度更小、服务更独立、耦合度更低</li><li>缺点：架构非常复杂，运维、监控、部署难度提高</li></ul></li><li>SpringCloud 是微服务架构的一站式解决方案，集成了各种优秀的微服务功能组件</li></ul><h2 id="服务拆分和远程调用">服务拆分和远程调用</h2><h3 id="服务拆分原则">服务拆分原则</h3><p>这里我总结了微服务拆分时的几个原则：</p><ul><li>不同微服务，不要重复开发相同业务</li><li>微服务数据独立，不要访问其它微服务的数据库</li><li>微服务可以将自己的业务暴露为接口，供其它微服务调用</li></ul><p><img src="https://s2.loli.net/2024/05/30/7oBiEDjXqbHNPe2.webp" alt="image-20210713210800950"></p><h3 id="服务拆分示例">服务拆分示例</h3><ul><li>cloud-demo：父工程，管理依赖<ul><li>order-service：订单微服务，负责订单相关业务</li><li>user-service：用户微服务，负责用户相关业务</li></ul></li><li>需求<ul><li>订单微服务和用户微服务必须有各自的数据库，相互独立</li><li>订单服务和用户服务都对外暴露Restful的接口</li><li>订单服务如果需要查询用户信息，只能调用用户服务的Restful接口，不能查询用户数据库</li></ul></li></ul><h4 id="导入SQL语句">导入SQL语句</h4><ul><li>Order表</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE cloud_order;</span><br><span class="line">USE cloud_order;</span><br><span class="line"><span class="keyword">SET</span> NAMES utf8mb4;</span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for tb_order</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `tb_order`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tb_order`  (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;订单id&#x27;</span>,</span><br><span class="line">  `user_id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户id&#x27;</span>,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">100</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;商品名称&#x27;</span>,</span><br><span class="line">  `price` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;商品价格&#x27;</span>,</span><br><span class="line">  `num` <span class="type">int</span>(<span class="number">10</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> COMMENT <span class="string">&#x27;商品数量&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE,</span><br><span class="line">  <span class="keyword">UNIQUE</span> INDEX `username`(`name`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB AUTO_INCREMENT <span class="operator">=</span> <span class="number">109</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8_general_ci ROW_FORMAT <span class="operator">=</span> Compact;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of tb_order</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_order` <span class="keyword">VALUES</span> (<span class="number">101</span>, <span class="number">1</span>, <span class="string">&#x27;Apple 苹果 iPhone 12 &#x27;</span>, <span class="number">699900</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_order` <span class="keyword">VALUES</span> (<span class="number">102</span>, <span class="number">2</span>, <span class="string">&#x27;雅迪 yadea 新国标电动车&#x27;</span>, <span class="number">209900</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_order` <span class="keyword">VALUES</span> (<span class="number">103</span>, <span class="number">3</span>, <span class="string">&#x27;骆驼（CAMEL）休闲运动鞋女&#x27;</span>, <span class="number">43900</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_order` <span class="keyword">VALUES</span> (<span class="number">104</span>, <span class="number">4</span>, <span class="string">&#x27;小米10 双模5G 骁龙865&#x27;</span>, <span class="number">359900</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_order` <span class="keyword">VALUES</span> (<span class="number">105</span>, <span class="number">5</span>, <span class="string">&#x27;OPPO Reno3 Pro 双模5G 视频双防抖&#x27;</span>, <span class="number">299900</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_order` <span class="keyword">VALUES</span> (<span class="number">106</span>, <span class="number">6</span>, <span class="string">&#x27;美的（Midea) 新能效 冷静星II &#x27;</span>, <span class="number">544900</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_order` <span class="keyword">VALUES</span> (<span class="number">107</span>, <span class="number">2</span>, <span class="string">&#x27;西昊/SIHOO 人体工学电脑椅子&#x27;</span>, <span class="number">79900</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_order` <span class="keyword">VALUES</span> (<span class="number">108</span>, <span class="number">3</span>, <span class="string">&#x27;梵班（FAMDBANN）休闲男鞋&#x27;</span>, <span class="number">31900</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><ul><li>Use表</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE cloud_user;</span><br><span class="line">USE cloud_user;</span><br><span class="line"><span class="keyword">SET</span> NAMES utf8mb4;</span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for tb_user</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `tb_user`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tb_user`  (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `username` <span class="type">varchar</span>(<span class="number">100</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;收件人&#x27;</span>,</span><br><span class="line">  `address` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;地址&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE,</span><br><span class="line">  <span class="keyword">UNIQUE</span> INDEX `username`(`username`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB AUTO_INCREMENT <span class="operator">=</span> <span class="number">109</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8_general_ci ROW_FORMAT <span class="operator">=</span> Compact;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of tb_user</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;柳岩&#x27;</span>, <span class="string">&#x27;湖南省衡阳市&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;文二狗&#x27;</span>, <span class="string">&#x27;陕西省西安市&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="string">&#x27;华沉鱼&#x27;</span>, <span class="string">&#x27;湖北省十堰市&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">4</span>, <span class="string">&#x27;张必沉&#x27;</span>, <span class="string">&#x27;天津市&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">5</span>, <span class="string">&#x27;郑爽爽&#x27;</span>, <span class="string">&#x27;辽宁省沈阳市大东区&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">6</span>, <span class="string">&#x27;范兵兵&#x27;</span>, <span class="string">&#x27;山东省青岛市&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h4 id="导入demo">导入demo</h4><ul><li>导入黑马提供好的demo，里面包含了<code>order-service</code>和<code>user-service</code>，将其配置文件中的数据库修改为自己的配置，随后将这两个服务启动，开始我们的调用案例</li></ul><h3 id="实现远程调用案例">实现远程调用案例</h3><ul><li>在order-service中的web包下，有一个OrderController，是根据id查询订单的接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;order&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderController</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   <span class="keyword">private</span> OrderService orderService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;&#123;orderId&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Order <span class="title function_">queryOrderByUserId</span><span class="params">(<span class="meta">@PathVariable(&quot;orderId&quot;)</span> Long orderId)</span> &#123;</span><br><span class="line">        <span class="comment">// 根据id查询订单并返回</span></span><br><span class="line">        <span class="keyword">return</span> orderService.queryOrderById(orderId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>我们打开浏览器，访问http://localhost:8080/order/101 ，是可以查询到数据的，但此时的user是null</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">101</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="number">699900</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Apple 苹果 iPhone 12 &quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;num&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;userId&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;user&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>在user-service中的web包下，也有一个UserController，其中包含一个根据id查询用户的接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br></pre></td></tr></table></figure><ul><li>我们打开浏览器，访问http://localhost:8081/user/1 ，查询到的数据如下</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;柳岩&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;湖南省衡阳市&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="案例需求">案例需求</h4><ul><li><p>修改order-service中的根据id查询订单业务，要求在查询订单的同时，根据订单中包含的userId查询出用户信息，一并返回<br><img src="https://pic1.imgdb.cn/item/636c781316f2c2beb1ad9894.jpg" alt="img"></p></li><li><p>因此，我们需要在order-service 中向user-service 发起一个http 请求，调用http://localhost:8081/user/{userId} 这个接口。</p></li><li><p>大概步骤如下</p><ol><li>注册一个RestTemplate 的实例到Spring 容器</li><li>修改order-service 服务中的OrderService 类中的queryOrderById 方法，根据Order 对象中的userId 查询User</li><li>将查询到的User 填充到Order 对象，一并返回</li></ol></li></ul><h3 id="注册RestTemplate">注册RestTemplate</h3><ul><li>首先我们在order-service服务中的OrderApplication启动类中，注册RestTemplate实例</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MapperScan(&quot;cn.itcast.order.mapper&quot;)</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(OrderApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="实现远程调用">实现远程调用</h4><ul><li>修改order-service服务中的queryById方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderMapper orderMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Order <span class="title function_">queryOrderById</span><span class="params">(Long orderId)</span> &#123;</span><br><span class="line">        <span class="comment">// 1.查询订单</span></span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> orderMapper.findById(orderId);</span><br><span class="line">        <span class="comment">// 2. 远程查询User</span></span><br><span class="line">        <span class="comment">// 2.1 url地址，这里的url是写死的，后面会改进</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://localhost:8081/user/&quot;</span> + order.getUserId();</span><br><span class="line">        <span class="comment">// 2.2 发起调用</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> restTemplate.getForObject(url, User.class);</span><br><span class="line">        <span class="comment">// 3. 存入order</span></span><br><span class="line">        order.setUser(user);</span><br><span class="line">        <span class="comment">// 4.返回</span></span><br><span class="line">        <span class="keyword">return</span> order;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>再次访问http://localhost:8080/order/101， 这次就能看到User数据了</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">101</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="number">699900</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Apple 苹果 iPhone 12 &quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;num&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;userId&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;user&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;柳岩&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;湖南省衡阳市&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="提供者与消费者">提供者与消费者</h3><ul><li>在服务调用关系中，会有两个不同的角色<ul><li><code>服务提供者</code>：一次业务中，被其他微服务调用的服务（提供接口给其他微服务）</li><li><code>服务消费者</code>：一次业务中，调用其他微服务的服务（调用其他微服务提供的接口）</li></ul></li><li>但是，服务提供者与服务消费者的角色并不是绝对的，而是相对于业务而言</li><li>如果服务A调用了服务B，而服务B又调用的服务C，那么服务B的角色是什么？<ul><li>对于A调用B的业务而言：A是服务消费者，B是服务提供者</li><li>对于B调用C的业务而言：B是服务消费者，C是服务提供者</li></ul></li><li>因此服务B既可以是服务提供者，也可以是服务消费者</li></ul><h2 id="Eureka注册中心">Eureka注册中心</h2><ul><li>假如我们的服务提供者user-service提供了三个实例，占用的分别是8081、8082、8083端口</li><li>那我们来思考几个问题<ul><li><code>问题一</code>：order-service在发起远程调用的时候，该如何得知user-service实例的ip地址和端口？</li><li><code>问题二</code>：有多个user-service实例地址，order-service调用时，该如何选择？</li><li><code>问题三</code>：order-service如何得知某个user-service实例是否健康，是不是已经宕机？</li></ul></li></ul><h3 id="Eureka的结构和作用">Eureka的结构和作用</h3><ul><li><p>这些问题都需要利用SpringCloud中的注册中心来解决，其中最广为人知的注册中心就是Eureka，其结构如下<br><img src="https://pic1.imgdb.cn/item/636cb44216f2c2beb104f20b.jpg" alt="img"></p></li><li><p>那么现在来回答之前的各个问题</p><ul><li><p>问题一 ：order-service如何得知user-service实例地址？</p><ul><li>获取地址信息流程如下<ol><li>user-service服务实例启动后，将自己的信息注册到eureka-server（Eureka服务端），这个叫服务注册</li><li>eureka-server保存服务名称到服务实例地址列表的映射关系</li><li>order-service根据服务名称，拉取实例地址列表，这个叫服务发现或服务拉取</li></ol></li></ul></li><li><p>问题二：order-service如何从多个user-service实例中选择具体的实例？</p><ul><li>order-service从实例列表中利用负载均衡算法选中一个实例地址</li><li>向该实例地址发起远程调用</li></ul></li><li><p>问题三：order-service如何得知某个user-service实例是否依然健康，是不是已经宕机？</p><ul><li>user-service会每隔一段时间（默认30秒）向eureka-server发起请求，报告自己的状态，成为心跳</li><li>当超过一定时间没有发送心跳时，eureka-server会认为微服务实例故障，将该实例从服务列表中剔除</li><li>order-service拉取服务时，就能将该故障实例排除了</li></ul></li></ul></li></ul><blockquote><p>注意：一个微服务，即可以是服务提供者，又可以是服务消费者，因此eureka将服务注册、服务发现等功能统一封装到了eureka-client端</p></blockquote><ul><li>因此，我们接下来动手实践的步骤包括<ol><li>搭建注册中心<ul><li>搭建EurekaServer</li></ul></li><li>服务注册<ul><li>将user-service、order-service都注册到eureka</li></ul></li><li>服务发现<ul><li>在order-service中完成服务拉取，然后通过负载均衡挑选一个服务，实现远程调用</li></ul></li></ol></li></ul><h3 id="搭建eureka-server">搭建eureka-server</h3><ul><li>首先我们注册中心服务端：eureka，这必须是一个独立的微服务</li></ul><h4 id="创建eureka-server服务">创建eureka-server服务</h4><ul><li>在cloud-demo父工程下，创建一个子模块，这里就直接创建一个maven项目就好了，然后填写服务信息</li></ul><h4 id="引入eureka依赖">引入eureka依赖</h4><ul><li>引入SpringCloud为eureka提供的starter依赖：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="编写启动类">编写启动类</h4><ul><li>给eureka-server服务编写一个启动类，一定要添加一个@EnableEurekaServer注解，开启eureka的注册中心功能</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EurekaApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(EurekaApplication.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="编写配置文件">编写配置文件</h4><ul><li>编写一个application.yml文件，内容如下</li><li>为什么也需要配置eureka的服务名称呢？<ul><li>eureka也会将自己注册为一个服务</li></ul></li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">10086</span> <span class="comment">## 服务端口</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">eureka-server</span> <span class="comment">## eureka的服务名称</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span> <span class="comment">## eureka的地址信息</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10086/eureka</span></span><br></pre></td></tr></table></figure><h4 id="启动服务">启动服务</h4><blockquote><p>如果出现报错，请检查你的JDK版本是否是17，是17请降级为11，就能正常启动!</p></blockquote><ul><li>启动微服务，然后在浏览器访问 <a href="http://localhost:10086/%EF%BC%8C">http://localhost:10086/，</a> 看到如下结果就是成功了<br><img src="https://s2.loli.net/2024/05/30/LkU5hgscRvG9b7q.webp" alt="image-20240530152201547"></li></ul><h3 id="服务注册">服务注册</h3><ul><li>下面，我们将user-service注册到eureka-server中去</li></ul><h4 id="引入依赖">引入依赖</h4><ul><li>在user-service的pom.xml文件中，引入下面的eurekaclient依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- eureka-client --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="配置文件">配置文件</h4><ul><li>在user-service中，修改application.yml文件，添加服务名称、eureka地址</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">userservice</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10086/eureka</span></span><br></pre></td></tr></table></figure><h4 id="启动多个user-service实例">启动多个user-service实例</h4><ul><li>为了演示一个服务有多个实例的场景，我们添加一个SpringBoot的启动配置，再启动一个user-service，其操作步骤就是复制一份user-service的配置，name配置为UserApplication2，同时也要配合VM选项，修改端口号<code>-Dserver.port=8082</code>，点击确定之后，在IDEA的服务选项卡中，就会出现两个user-service启动配置，一个端口是8081，一个端口是8082</li><li>之后我们按照相同的方法配置orderservice，并将两个user-service和一个order-service都启动，然后查看eureka-server管理页面，发现服务确实都启动了，而且user-service有两个</li></ul><p><img src="https://s2.loli.net/2024/05/30/ZPisxS8W6t5UcfH.webp" alt="image-20240530154120730"></p><h3 id="服务发现">服务发现</h3><ul><li>下面，我们将order-service的逻辑修改：向eureka-server拉取user-service的信息，实现服务发现</li></ul><h4 id="引入依赖-2">引入依赖</h4><ul><li>之前说过，服务发现、服务注册统一都封装在eureka-client依赖，因此这一步与服务注册时一致</li><li>在order-service的pom.xml文件中，引入eureka-client依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- eureka-client --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">orderservice</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10086/eureka</span></span><br></pre></td></tr></table></figure><h4 id="服务拉取和负载均衡">服务拉取和负载均衡</h4><ul><li>最后，我们要去eureka-server中拉取user-service服务的实例列表，并实现负载均衡</li><li>不过这些操作并不需要我们来做，是需要添加一些注解即可</li><li>在order-service的OrderApplication中，给RestTemplate这个Bean添加一个<code>@LoadBalanced</code>注解</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MapperScan(&quot;cn.itcast.order.mapper&quot;)</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(OrderApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>修改order-service服务中的OrderService类中的queryOrderById方法，修改访问路径，用服务名来代替ip、端口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Order <span class="title function_">queryOrderById</span><span class="params">(Long orderId)</span> &#123;</span><br><span class="line">    <span class="comment">// 1.查询订单</span></span><br><span class="line">    <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> orderMapper.findById(orderId);</span><br><span class="line">    <span class="comment">// 2. 远程查询User</span></span><br><span class="line">    <span class="comment">// 2.1 url地址，用user-service替换了localhost:8081</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://user-service/user/&quot;</span> + order.getUserId();</span><br><span class="line">    <span class="comment">// 2.2 发起调用</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> restTemplate.getForObject(url, User.class);</span><br><span class="line">    <span class="comment">// 3. 存入order</span></span><br><span class="line">    order.setUser(user);</span><br><span class="line">    <span class="comment">// 4.返回</span></span><br><span class="line">    <span class="keyword">return</span> order;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Spring会自动帮我们从eureka-server端，根据user-service这个服务名称，获取实例列表，然后完成负载均衡</li></ul><h3 id="小结">小结</h3><ol><li>搭建EurekaServer<ul><li>引入eureka-server依赖</li><li>添加@EnableEurekaServer注解</li><li>在application.yml中配置eureka地址</li></ul></li><li>服务注册<ul><li>引入eureka-client依赖</li><li>在application.yml中配置eureka地址</li></ul></li><li>服务发现<ul><li>引入eureka-client依赖</li><li>在application.yml中配置eureka地址</li><li>在RestTemplate添加<code>@LoadBalanced</code>注解</li><li>用服务提供者的服务名称远程调用</li></ul></li></ol><h2 id="Ribbon负载均衡">Ribbon负载均衡</h2><ul><li>在这个小节，我们来说明@LoadBalanced注解是怎么实现的负载均衡功能</li></ul><h3 id="负载均衡原理">负载均衡原理</h3><ul><li>SpringCloud底层其实是利用了一个名为Ribbon的组件，来实现负载均衡功能的<br><img src="https://pic1.imgdb.cn/item/636ce11216f2c2beb14b55af.jpg" alt="img"></li><li>那么我们明明发出的请求是http://userservice/user/1， 怎么变成了http://localhost:8080/user/1 的呢</li></ul><h3 id="源码跟踪">源码跟踪</h3><ul><li>为什么我们只输入了service名称就可以访问了呢？之前还得获取ip和端口</li><li>答案显然是有人帮我们根据service名称，获取到了服务实例的ip和端口。它就是LoadBalancerInterceptor，这个类会第RestTemplate的请求进行拦截，然后从Eureka根据服务id获取服务列表，随后利用负载均衡算法，得到真实的服务地址信息，替换服务id</li><li>那下面我们来进行源码跟踪</li></ul><ol><li><p>LoadBalancerInterceptor</p><ul><li>代码如下</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoadBalancerInterceptor</span> <span class="keyword">implements</span> <span class="title class_">ClientHttpRequestInterceptor</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> LoadBalancerClient loadBalancer;</span><br><span class="line">    <span class="keyword">private</span> LoadBalancerRequestFactory requestFactory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LoadBalancerInterceptor</span><span class="params">(LoadBalancerClient loadBalancer, LoadBalancerRequestFactory requestFactory)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.loadBalancer = loadBalancer;</span><br><span class="line">        <span class="built_in">this</span>.requestFactory = requestFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LoadBalancerInterceptor</span><span class="params">(LoadBalancerClient loadBalancer)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(loadBalancer, <span class="keyword">new</span> <span class="title class_">LoadBalancerRequestFactory</span>(loadBalancer));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ClientHttpResponse <span class="title function_">intercept</span><span class="params">(<span class="keyword">final</span> HttpRequest request, <span class="keyword">final</span> <span class="type">byte</span>[] body, <span class="keyword">final</span> ClientHttpRequestExecution execution)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">URI</span> <span class="variable">originalUri</span> <span class="operator">=</span> request.getURI();</span><br><span class="line">        <span class="type">String</span> <span class="variable">serviceName</span> <span class="operator">=</span> originalUri.getHost();</span><br><span class="line">        Assert.state(serviceName != <span class="literal">null</span>, <span class="string">&quot;Request URI does not contain a valid hostname: &quot;</span> + originalUri);</span><br><span class="line">        <span class="keyword">return</span> (ClientHttpResponse)<span class="built_in">this</span>.loadBalancer.execute(serviceName, <span class="built_in">this</span>.requestFactory.createRequest(request, body, execution));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/05/30/Z38wGpRyFkTlenu.webp" alt="1525620483637"></p></li></ol><p>可以看到这里的intercept方法，拦截了用户的HttpRequest请求，然后做了几件事：</p><ul><li><code>request.getURI()</code>：获取请求uri，本例中就是 <a href="http://user-service/user/8">http://user-service/user/8</a></li><li><code>originalUri.getHost()</code>：获取uri路径的主机名，其实就是服务id，<code>user-service</code></li><li><code>this.loadBalancer.execute()</code>：处理服务id，和用户请求。</li></ul><p>这里的<code>this.loadBalancer</code>是<code>LoadBalancerClient</code>类型，我们继续跟入。</p><ol start="2"><li>LoadBalancerClient</li></ol><p>继续跟入execute方法：</p><p><img src="https://s2.loli.net/2024/05/30/bqDuXTBvIlPn86O.webp" alt="1525620787090"></p><p>代码是这样的：</p><ul><li>getLoadBalancer(serviceId)：根据服务id获取ILoadBalancer，而ILoadBalancer会拿着服务id去eureka中获取服务列表并保存起来。</li><li>getServer(loadBalancer)：利用内置的负载均衡算法，从服务列表中选择一个。本例中，可以看到获取了8082端口的服务</li></ul><p>放行后，再次访问并跟踪，发现获取的是8081：果然实现了负载均衡。</p><p><img src="https://s2.loli.net/2024/05/30/rEVsaPNvhZ1J3Cm.webp" alt="1525620835911"></p><ol start="3"><li>负载均衡策略IRule</li></ol><ul><li>在刚才的代码中，可以看到获取服务是通过一个getServer的方法来做负载均衡，我们继续跟入，会发现这样一段代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Server <span class="title function_">chooseServer</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.counter == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.counter = <span class="built_in">this</span>.createCounter();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.counter.increment();</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.rule == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.rule.choose(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception var3) &#123;</span><br><span class="line">            logger.warn(<span class="string">&quot;LoadBalancer [&#123;&#125;]:  Error choosing server for key &#123;&#125;&quot;</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="built_in">this</span>.name, key, var3&#125;);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在try/catch代码块中，进行服务选择的是this.rule.choose(key)，那我们看看这个rule是谁<br><img src="https://pic1.imgdb.cn/item/636d08b216f2c2beb18e6c9e.jpg" alt="img"></li><li>这里的rule默认值是一个RoundRobinRule，也就是轮询</li><li>那么到这里，整个负载均衡的流程我们就清楚了</li></ul><ol start="4"><li>总结</li></ol><ul><li>SpringCloudRibbon的底层采用了一个拦截器，拦截了RestTemplate发出的请求，对地址做了修改，用一幅图来总结一下<br><img src="https://pic1.imgdb.cn/item/636d099016f2c2beb1904047.jpg" alt="img"></li><li>整个流程如下<ol><li>拦截我们的RestTemplate请求：<a href="http://user-service/user/1">http://user-service/user/1</a></li><li>RibbonLoadBalancerClient会从请求url中获取服务名称，也就是user-service</li><li>DynamicServerListLoadBalancer根据user-service到eureka拉取服务列表</li><li>eureka返回列表，localhost:8081、localhost:8082</li><li>IRule利用内置负载均衡规则，从列表中选择一个，例如localhost:8081</li><li>RibbonLoadBalancerClient修改请求地址，用localhost:8081替代user-service，得到http://localhost:8081/user/1， 发起真实请求</li></ol></li></ul><h3 id="负载均衡策略">负载均衡策略</h3><h4 id="负载均衡策略-2">负载均衡策略</h4><ul><li>负载均衡的规则都定义在IRule接口中，而IRule有很多不同的实现类<br><img src="https://pic1.imgdb.cn/item/636d0b8816f2c2beb193499b.jpg" alt="img"></li><li>不同规则的含义如下</li></ul><table><thead><tr><th style="text-align:center"><strong>内置负载均衡规则类</strong></th><th style="text-align:center"><strong>规则描述</strong></th></tr></thead><tbody><tr><td style="text-align:center">RoundRobinRule</td><td style="text-align:center">简单轮询服务列表来选择服务器。它是Ribbon默认的负载均衡规则。</td></tr><tr><td style="text-align:center">AvailabilityFilteringRule</td><td style="text-align:center">对以下两种服务器进行忽略： （1）在默认情况下，这台服务器如果3次连接失败，这台服务器就会被设置为“短路”状态。短路状态将持续30秒，如果再次连接失败，短路的持续时间就会几何级地增加。 （2）并发数过高的服务器。如果一个服务器的并发连接数过高，配置了AvailabilityFilteringRule规则的客户端也会将其忽略。并发连接数的上限，可以由客户端的…ActiveConnectionsLimit属性进行配置。</td></tr><tr><td style="text-align:center">WeightedResponseTimeRule</td><td style="text-align:center">为每一个服务器赋予一个权重值。服务器响应时间越长，这个服务器的权重就越小。这个规则会随机选择服务器，这个权重值会影响服务器的选择。</td></tr><tr><td style="text-align:center"><strong>ZoneAvoidanceRule</strong></td><td style="text-align:center">以区域可用的服务器为基础进行服务器的选择。使用Zone对服务器进行分类，这个Zone可以理解为一个机房、一个机架等。而后再对Zone内的多个服务做轮询。</td></tr><tr><td style="text-align:center">BestAvailableRule</td><td style="text-align:center">忽略那些短路的服务器，并选择并发数较低的服务器。</td></tr><tr><td style="text-align:center">RandomRule</td><td style="text-align:center">随机选择一个可用的服务器。</td></tr><tr><td style="text-align:center">RetryRule</td><td style="text-align:center">重试机制的选择逻辑</td></tr></tbody></table><ul><li>默认的实现就是ZoneAvoidanceRule，是一种轮询方案</li></ul><h4 id="自定义负载均衡策略">自定义负载均衡策略</h4><ul><li><p>通过定义IRule实现，可以修改负载均衡规则，有两种方式</p><ol><li>代码方式：在order-service中的OrderApplication类中，定义一个IRule，此种方式定义的负载均衡规则，对<code>所有微服务</code>均有效</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> IRule <span class="title function_">randomRule</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RandomRule</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>配置文件方式(针对某个服务)：在order-service中的application.yml文件中，添加新的配置也可以修改规则</li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">user-service:</span> <span class="comment">## 给某个微服务配置负载均衡规则，这里是user-service服务</span></span><br><span class="line">  <span class="attr">ribbon:</span></span><br><span class="line">    <span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.netflix.loadbalancer.RandomRule</span> <span class="comment">## 负载均衡规则 </span></span><br></pre></td></tr></table></figure></li></ul><blockquote><p>注意：一般使用默认的负载均衡规则，不做修改</p></blockquote><h3 id="饥饿加载">饥饿加载</h3><ul><li>Ribbon默认是采用<code>懒加载</code>，即第一次访问时，才会去创建LoadBalanceClient，请求时间会很长</li><li>而饥饿加载在则会在项目启动时创建，降低第一次访问的耗时，通过下面配置开启饥饿加载</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="attr">eager-load:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment">## 开启饥饿加载</span></span><br><span class="line">    <span class="attr">clients:</span> <span class="string">user-service</span>  <span class="comment">## 指定对user-service这个服务进行饥饿加载，可以指定多个服务</span></span><br></pre></td></tr></table></figure><h3 id="小结-2">小结</h3><ol><li><p>Ribbon负载均衡规则</p><ul><li>规则接口是IRule</li><li>默认实现是ZoneAvoidanceRule，根据zone选择服务列表，然后轮询</li></ul></li><li><p>负载均衡自定义方式</p><ul><li>代码方式：配置灵活，但修改时需要重新打包发布</li><li>配置方式：直观，方便，无需重新打包发布，但是无法做全局配置（只能指定某一个微服务）</li></ul></li><li><p>饥饿加载</p><ul><li>开启饥饿加载</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><ul><li>指定饥饿加载的微服务名称，可以配置多个</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">clients:</span> </span><br><span class="line">  <span class="bullet">-</span> <span class="string">user-service</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">xxx-service</span> </span><br></pre></td></tr></table></figure></li></ol><h2 id="Nacos注册中心">Nacos注册中心</h2><ul><li>国内公司一般都推崇阿里巴巴的技术，比如注册中心，<code>SpringCloud Alibaba</code>也推出了一个名为<code>Nacos</code>的注册中心</li></ul><h3 id="认识和安装Nacos">认识和安装Nacos</h3><ul><li>Nacos是阿里巴巴的产品，现在是SpringCloud中的一个组件，相比于Eureka，功能更加丰富，在国内受欢迎程度较高</li><li>在Nacos的GitHub页面，提供有下载链接，可以下载编译好的Nacos服务端或者源代码：<ul><li>GitHub主页：<a href="https://github.com/alibaba/nacos">https://github.com/alibaba/nacos</a></li><li>GitHub的Release下载页：<a href="https://github.com/alibaba/nacos/releases">https://github.com/alibaba/nacos/releases</a></li></ul></li><li>下载好了之后，将文件解压到非中文路径下的任意目录，目录说明：<ul><li>bin：启动脚本</li><li>conf：配置文件</li></ul></li><li>Nacos的默认端口是8848，如果你电脑上的其它进程占用了8848端口，请先尝试关闭该进程。<ul><li>如果无法关闭占用8848端口的进程，也可以进入nacos的conf目录，修改配置文件application.properties中的server.port</li></ul></li><li>Nacos的启动非常简单，进入bin目录，打开cmd窗口执行以下命令即可</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">startup.cmd -m standalone <span class="comment">#单机启动</span></span><br></pre></td></tr></table></figure><ul><li>之后在浏览器访问http://localhost:8848/nacos 即可，默认的登录账号和密码都是nacos</li></ul><h3 id="服务注册到Nacos">服务注册到Nacos</h3><ul><li>Nacos是SpringCloudAlibaba的组件，而<code>SpringCloud Alibaba</code>也遵循SpringCloud中定义的服务注册、服务发现规范。因此使用Nacos与使用Eureka对于微服务来说，并没有太大区别</li><li>主要差异在于<ol><li>依赖不同</li><li>服务地址不同</li></ol></li></ul><h4 id="引入依赖-3">引入依赖</h4><ul><li>在cloud-demo父工程的pom.xml文件中引入SpringCloudAlibaba的依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>然后在user-service和order-service中的pom文件引入nacos-discovery依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：同时也要将eureka的依赖注释/删除掉</p></blockquote><h4 id="配置Nacos地址">配置Nacos地址</h4><ul><li>在user-service和order-service的application.yml中添加Nacos地址</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br></pre></td></tr></table></figure><p>注意：同时也要将eureka的地址注释掉</p><h4 id="重启服务">重启服务</h4><ul><li>重启微服务后，登录nacos的管理页面，可以看到微服务信息</li></ul><p><img src="https://s2.loli.net/2024/05/30/cKTGznE6BDhHbAU.webp" alt="image-20240530170705702"></p><h3 id="服务分级存储模型">服务分级存储模型</h3><ul><li>一个服务可以有多个实例，例如我们的user-service，可以有<ul><li>127.0.0.1:8081</li><li>127.0.0.1:8082</li><li>127.0.0.1:8083</li></ul></li><li>假如这些实例分布于全国各地的不同机房，例如<ul><li>127.0.0.1:8081，在杭州机房</li><li>127.0.0.1:8082，在杭州机房</li><li>127.0.0.1:8083，在上海机房</li></ul></li><li>Nacos就将在同一机房的实例，划分为一个<code>集群</code></li><li>也就是说，user-service是服务，一个服务可以包含多个集群，例如在杭州，上海，每个集群下可以有多个实例，形成分级模型</li><li>微服务相互访问时，应该尽可能访问同集群实例，因为本地访问速度更快，房本集群内不可用时，才去访问其他集群<ul><li>例如：杭州机房内的order-service应该有限访问同机房的user-service，若无法访问，则去访问上海机房的user-service</li></ul></li></ul><h4 id="给user-service配置集群">给user-service配置集群</h4><ul><li>修改user-service的application.yml文件，添加集群配置</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">cluster-name:</span> <span class="string">HZ</span> <span class="comment">## 集群名称，杭州</span></span><br></pre></td></tr></table></figure><ul><li>重启两个user-service实例</li><li>之后我们再复制一个user-service的启动配置，端口号设为8083，之后修改application.yml文件，将集群名称设为上海，之后启动该服务</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">cluster-name:</span> <span class="string">SH</span> <span class="comment">## 集群名称，上海</span></span><br></pre></td></tr></table></figure><ul><li>那么我们现在就启动了两个集群名称为HZ的user-service，一个集群名称为SH的user-service，在Nacos控制台看到如下结果</li></ul><p><img src="https://s2.loli.net/2024/05/30/MpekNAxG7clPSvg.webp" alt="image-20240530172605568"></p><ul><li>Nacos服务分级存储模型<ol><li>一级是服务，例如user-service</li><li>二级是集群，例如杭州或上海</li><li>三级是实例，例如杭州机房的某台部署了user-service的服务器</li></ol></li><li>如何设置实例的集群属性<ul><li>修改application.yml文件，添加spring.cloud.nacos.discovery.cluster-name属性即可</li></ul></li></ul><h4 id="同集群优先的负载均衡">同集群优先的负载均衡</h4><ul><li><p>默认的ZoneAvoidanceRule并不能根据同集群优先来实现负载均衡</p></li><li><p>因此Nacos中提供了一个NacosRule的实现，可以优先从同集群中挑选实例</p><ol><li>给order-service配置集群信息，修改其application.yml文件，将集群名称配置为HZ</li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">cluster-name:</span> <span class="string">HZ</span> <span class="comment">## 集群名称，杭州</span></span><br></pre></td></tr></table></figure><ol start="2"><li>修改负载均衡规则</li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">user-service:</span> <span class="comment">## 给某个微服务配置负载均衡规则，这里是user-service服务</span></span><br><span class="line">  <span class="attr">ribbon:</span></span><br><span class="line">    <span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.alibaba.cloud.nacos.ribbon.NacosRule</span> <span class="comment">## 负载均衡规则</span></span><br></pre></td></tr></table></figure></li><li><p>那我们现在访问http://localhost:8080/order/101 ，同时观察三个user-service的日志输出，集群名称为HZ的两个user-service可以看到日志输出，而集群名称为SH的user-service则看不到日志输出</p></li><li><p>那我们现在将集群名称为HZ的两个user-service服务停掉，那么现在访问http://localhost:8080/order/101， 则集群名称为SH的user-service会输出日志</p></li><li><p>NacosRule负载均衡策略</p><ol><li>优先选择同集群服务实例列表</li><li>本地集群找不到提供者，才去其他集群寻找，并且会报警告</li><li>确定了可用实例列表后，再采用随机负载均衡挑选实例</li></ol></li></ul><h3 id="权重配置">权重配置</h3><ul><li>实际部署中肯定会出现这样的场景<ul><li>服务器设备性能有差异，部分实例所在的机器性能较好，而另一些较差，我么你希望性能好的机器承担更多的用户请求</li><li>但默认情况下NacosRule是统计群内随机挑选，不会考虑机器性能的问题</li></ul></li><li>因此Nacos提供了权重配置来控制访问频率，权重越大则访问频率越高</li><li>在Nacos控制台，找到user-service的实例列表，点击编辑，即可以修改权重</li></ul><blockquote><p>注意：若权重修改为0，则该实例<code>永远不会被访问</code><br>我们可以将某个服务的权重修改为0，然后进行更新，然后也不会影响到用户的正常访问别的服务集群，之后我们可以给更新后的该服务，设置一个很小的权重，这样就会有一小部分用户来访问该服务，测试该服务是否稳定（类似于灰度测试）</p></blockquote><h3 id="环境隔离">环境隔离</h3><ul><li>Nacos提供了namespace来实现环境隔离功能<ul><li>nacos中可以有多个namespace</li><li>namespace下可以由group、service等</li><li>不同的namespace之间相互隔离，例如不同的namespace的服务互相不可见</li></ul></li></ul><h4 id="创建namespace">创建namespace</h4><ul><li>默认情况下，所有的service、data、group都是在同一个namespace，名为public</li><li>我们点击<code>命名空间</code> -&gt; <code>新建命名空间</code> -&gt; <code>填写表单</code>，可以创建一个新的namespace</li></ul><p><img src="https://s2.loli.net/2024/05/30/k2gf8ZTcORCP9y1.webp" alt="image-20240530180404807"></p><h4 id="给微服务配置namespace">给微服务配置namespace</h4><ul><li>给微服务配置namespace只能通过修改配置来实现</li><li>例如，修改order-service的application.yml文件</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">cluster-name:</span> <span class="string">HZ</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">f5c56ca7-1bd6-40a4-b5af-75c1ff283594</span> <span class="comment">## 命名空间，填上图中的命名空间ID</span></span><br></pre></td></tr></table></figure><ul><li>重启order-service后，访问Nacos控制台，可以看到下面的结果，此时访问order-service，因为namespace不同，会导致找不到user-service，若访问http://localhost:8080/order/101 则会报错<img src="https://s2.loli.net/2024/05/30/TBPXJ76IWshcKia.webp" alt="image-20240530180713812"></li></ul><h3 id="Nacos和Eureka的区别">Nacos和Eureka的区别</h3><ul><li>Nacos的服务实例可以分为两种类型<ol><li>临时实例：如果实例宕机超过一定时间，会从服务列表剔除，默认的类型</li><li>非临时实例：如果实例宕机，不会从服务列表剔除，也可以叫永久实例</li></ol></li><li>配置一个服务实例为永久实例</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">ephemeral:</span> <span class="literal">false</span> <span class="comment">## 设置为非临时实例</span></span><br></pre></td></tr></table></figure><p>Nacos和Eureka整体结构类似，服务注册、服务拉取、心跳等待，但是也存在一些差异<br><img src="https://pic1.imgdb.cn/item/636e06fa16f2c2beb1cf68c6.jpg" alt="img"></p><ul><li>Nacos与Eureka的共同点<ol><li>都支持服务注册和服务拉取</li><li>都支持服务提供者心跳方式做健康监测</li></ol></li><li>Nacos与Eureka的区别<ol><li>Nacos支持服务端主动检测提供者状态：临时实例采用心跳模式，非临时实例采用主动检测模式（但是对服务器压力比较大，不推荐）</li><li>临时实例心跳不正常会被剔除，非临时实例则不会被剔除</li><li>Nacos支持服务列表变更的消息推送模式，服务列表更新更及时</li><li>Nacos集群默认采用AP方式，当集群中存在非临时实例时，采用CP模式；Eureka采用AP方式</li></ol></li></ul><h2 id="Nacos配置管理">Nacos配置管理</h2><ul><li>Nacos除了可以做注册中心，同样还可以做配置管理来使用</li></ul><h3 id="统一配置管理">统一配置管理</h3><ul><li>当微服务部署的实例越来越多，达到数十、数百时，逐个修改微服务配置就会让人抓狂，而且容易出错，所以我们需要一种统一配置管理方案，可以集中管理所有实例的配置</li><li>Nacos一方面可以将配置集中管理，另一方面可以在配置变更时，及时通知微服务，实现配置的<code>热更新</code></li></ul><h4 id="在Nacos中添加配置文件">在Nacos中添加配置文件</h4><ul><li>如何在Nacos中管理配置呢<ul><li><code>配置列表</code> -&gt; <code>点击右侧加号</code></li></ul></li><li>在弹出的表单中，填写配置信息</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pattern:</span></span><br><span class="line">  <span class="attr">dateformat:</span> <span class="string">yyyy-MM-dd</span> <span class="string">HH:mm:ss</span></span><br></pre></td></tr></table></figure><p><img src="https://pic1.imgdb.cn/item/636e666016f2c2beb17dfa3b.jpg" alt="img"></p><blockquote><p>注意：只有需要热更新的配置才有放到Nacos管理的必要，基本不会变更的一些配置，还是保存到微服务本地比较好（例如数据库连接配置等）</p></blockquote><h4 id="从微服务拉取配置">从微服务拉取配置</h4><ul><li><p>微服务要拉取Nacos中管理的配置，并且与本地的application.yml配置合并，才能完成项目启动</p></li><li><p>但如果尚未读取application.yml，又如何得知Nacos地址呢？</p></li><li><p>Spring引入了一种新的配置文件：<code>bootstrap.yml文件</code>，会在application.yml之前被读取，流程如下</p><ol><li>项目启动</li><li>加载bootstrap.yml文件，获取Nacos地址，配置文件id</li><li>根据配置文件id，读取Nacos中的配置文件</li><li>读取本地配置文件application.yml，与Nacos拉取到的配置合并</li><li>创建Spring容器</li><li>加载bean</li></ol></li><li><p>引入nacos-config依赖</p><ul><li>首先在user-service服务中，引入nacos-config的客户端依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--nacos配置管理依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>添加bootstrap.yml</p><ul><li>然后在user-service中添加一个bootstrap.yml文件，内容如下</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">user-service</span> <span class="comment">## 服务名称</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span> <span class="comment">#开发环境，这里是dev </span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment">## Nacos地址</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span> <span class="comment">## 文件后缀名</span></span><br></pre></td></tr></table></figure><ul><li>这里会根据spring.cloud.nacos.server-addr获取Nacos地址，再根据<code>$&#123;spring.application.name&#125;-$&#123;spring.profiles.active&#125;.$&#123;spring.cloud.nacos.config.file-extension&#125;</code>作为文件id，来读取配置。</li><li>在本例中，就是读取user-service-dev.yaml</li><li>测试是否真的读取到了，我们在user-service的UserController中添加业务逻辑，读取nacos中的配置信息pattern.dateformat配置</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;pattern.dateformat&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String dateformat;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> LocalDateTime.now().format(DateTimeFormatter.ofPattern(dateformat));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>打开浏览器，访问http://localhost:8081/user/test， 看到如下结果，则说明确实读取到了配置信息</p></li></ul><p><img src="https://s2.loli.net/2024/05/30/nbZSdE2uCxv4TJD.webp" alt="image-20240530184252681"></p><h3 id="配置热更新">配置热更新</h3><ul><li>我们最终的目的，是修改Nacos中的配置后，微服务中无需重启即可让配置生效，也就是配置热更新</li><li>要实现配置热更新，可以使用两种方式</li></ul><h4 id="方式一">方式一</h4><ul><li>在@Value注入的变量类上添加注解@RefreshScope（刷新作用域）</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@Slf4j</span><br><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;/user&quot;)</span><br><span class="line">@RefreshScope</span><br><span class="line">public class UserController &#123;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;pattern.dateformat&#125;&quot;)</span><br><span class="line">    private String dateformat;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;/test&quot;)</span><br><span class="line">    public String test() &#123;</span><br><span class="line">        return LocalDateTime.now().format(DateTimeFormatter.ofPattern(dateformat));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>测试是否热更新</p><ul><li>启动服务，打开浏览器，访问http://localhost:8081/user/test， 由于我们之前配置的dateformat是yyyy-MM-dd MM:hh:ss，所以看到的日期格式为<code>2024-05-30 18:42:39</code></li><li>那我们现在直接在Nacos中编辑配置信息，并保存</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pattern:</span></span><br><span class="line">  <span class="attr">dateformat:</span> <span class="string">yyyy年MM月dd日</span> <span class="string">HH:mm:ss</span></span><br></pre></td></tr></table></figure><ul><li>无需重启服务器，直接刷新页面，看到的日期格式为<code>2024年05月30日18:50:07</code>，说明确实是热更新</li></ul></li></ul><h4 id="方式二">方式二</h4><ul><li>使用@ConfigurationProperties注解代替<code>@Value</code>注解</li><li>在user-service服务中，添加一个类，读取<code>pattern.dateformat</code>属性</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;pattern&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PatternProperties</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String dateformat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在UserController中用这个类来代替<code>@Value</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="meta">@RefreshScope</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PatternProperties patternProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> LocalDateTime.now().format(DateTimeFormatter.ofPattern(patternProperties.getDateformat()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用同样的方法进行测试，这里就不赘述了</li></ul><h3 id="配置共享">配置共享</h3><ul><li>其实微服务启动时，会去Nacos读取多个配置文件，例如<ul><li><code>[spring.application.name]-[spring.profiles.active].yaml</code>，例如：user-service-dev.yaml</li><li><code>[spring.application.name].yaml</code>，例如：userservice.yaml</li></ul></li><li>而<code>[spring.application.name].yaml</code>不包含环境，因此可以被多个环境共享</li><li>那下面我们通过案例来测试配置共享</li></ul><h4 id="添加一个环境共享配置">添加一个环境共享配置</h4><ul><li>我们在Nacos中添加一个<code>Data ID</code>为<code>user-service.yml</code>文件，编写的配置内容如下</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pattern:</span></span><br><span class="line">  <span class="attr">envSharedValue:</span> <span class="string">多环境共享属性值</span></span><br></pre></td></tr></table></figure><ul><li>修改user-service-dev.yml文件</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pattern:</span></span><br><span class="line">  <span class="attr">dateformat:</span> <span class="string">yyyy/MM/dd</span> <span class="string">HH:mm:ss</span></span><br><span class="line">  <span class="attr">env:</span> <span class="string">user-service开发环境配置</span></span><br></pre></td></tr></table></figure><h4 id="在user-service中读取共享配置">在user-service中读取共享配置</h4><ul><li>修改我们的PatternProperties类，添加envSharedValue和env属性</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;pattern&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PatternProperties</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String dateformat;</span><br><span class="line">    <span class="keyword">private</span> String envSharedValue;</span><br><span class="line">    <span class="keyword">private</span> String env;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>同时修改UserController，添加一个方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="meta">@RefreshScope</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PatternProperties patternProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/prop&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> PatternProperties <span class="title function_">prop</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> patternProperties;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>修改UserApplication2的启动项，改变其profile值为test（改变环境），同时新建一个user-service-test.yml配置</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pattern:</span></span><br><span class="line">  <span class="attr">dateformat:</span> <span class="string">yyyy-MM-dd</span> <span class="string">HH:mm:ss</span></span><br><span class="line">  <span class="attr">env:</span> <span class="string">user-service测试环境配置</span></span><br></pre></td></tr></table></figure><ul><li>那现在，我们的UserApplication加载的是user-service-dev.yml和user-service.yml这两个配置文件</li><li>我们的UserApplication2加载的是user-service-test.yml和user-service.yml这两个配置文件</li><li>启动这两个服务，打开浏览器分别访问http://localhost:8081/user/prop 和http://localhost:8082/user/prop，看到的结果如下</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//dev 环境下</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;dateformat&quot;</span><span class="punctuation">:</span> <span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;envSharedValue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;多环境共享属性值&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;env&quot;</span><span class="punctuation">:</span> <span class="string">&quot;user-service开发环境配置&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//test 环境下</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;dateformat&quot;</span><span class="punctuation">:</span> <span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;envSharedValue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;多环境共享属性值&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;env&quot;</span><span class="punctuation">:</span> <span class="string">&quot;user-service测试环境配置&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>可以看出，不管是dev还是test环境，都读取到了envSharedValue这个属性的值，且dev和test也都有自己特有的属性值</li></ul><h4 id="配置共享的优先级">配置共享的优先级</h4><ul><li>当Nacos、服务本地同时出现相同属性时，优先级也有高低之分</li><li>服务名-profile.yaml （独有）&gt; 服务名.yaml（共享） &gt; 本地配置<ul><li>例：user-service-dev.yaml &gt; user-service.yaml &gt; application.yaml</li></ul></li></ul><h3 id="搭建Nacos集群">搭建Nacos集群</h3><h4 id="集群结构图">集群结构图</h4><ul><li><p><code>Nacos生产环境下一定要部署为集群状态</code></p></li><li><p>官方给出的Nacos集群图<br><img src="https://pic1.imgdb.cn/item/6370616d16f2c2beb15057b8.jpg" alt="img"></p></li><li><p>其中包含3个Nacos节点，然后一个负载均衡器代理3个Nacos。这里的负载均衡器可以使用Nginx。</p></li><li><p>我们计划的集群结构<br><img src="https://pic1.imgdb.cn/item/6370623216f2c2beb15138b8.jpg" alt="img"></p></li><li><p>3个Nacos节点的地址</p></li></ul><table><thead><tr><th style="text-align:center">节点</th><th style="text-align:center">ip</th><th style="text-align:center">port</th></tr></thead><tbody><tr><td style="text-align:center">nacos1</td><td style="text-align:center">192.168.150.1</td><td style="text-align:center">8845</td></tr><tr><td style="text-align:center">nacos2</td><td style="text-align:center">192.168.150.1</td><td style="text-align:center">8846</td></tr><tr><td style="text-align:center">nacos3</td><td style="text-align:center">192.168.150.1</td><td style="text-align:center">8847</td></tr></tbody></table><h4 id="搭建集群">搭建集群</h4><ul><li><p>搭建集群的基本步骤</p><ol><li>搭建数据库，初始化数据库表结构</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> nacos_config;</span><br><span class="line">USE nacos_config;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `config_info` (</span><br><span class="line">`id` <span class="type">BIGINT</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">`data_id` <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;data_id&#x27;</span>,</span><br><span class="line">`group_id` <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`content` LONGTEXT <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;content&#x27;</span>,</span><br><span class="line">`md5` <span class="type">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;md5&#x27;</span>,</span><br><span class="line">`gmt_create` DATETIME <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">`gmt_modified` DATETIME <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">`src_user` TEXT COMMENT <span class="string">&#x27;source user&#x27;</span>,</span><br><span class="line">`src_ip` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;source ip&#x27;</span>,</span><br><span class="line">`app_name` <span class="type">VARCHAR</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`tenant_id` <span class="type">VARCHAR</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;租户字段&#x27;</span>,</span><br><span class="line">`c_desc` <span class="type">VARCHAR</span>(<span class="number">256</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`c_use` <span class="type">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`effect` <span class="type">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`type` <span class="type">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`c_schema` TEXT,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line"><span class="keyword">UNIQUE</span> KEY `uk_configinfo_datagrouptenant` (`data_id`,`group_id`,`tenant_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;config_info&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = config_info_aggr   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `config_info_aggr` (</span><br><span class="line">`id` <span class="type">BIGINT</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">`data_id` <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;data_id&#x27;</span>,</span><br><span class="line">`group_id` <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;group_id&#x27;</span>,</span><br><span class="line">`datum_id` <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;datum_id&#x27;</span>,</span><br><span class="line">`content` LONGTEXT <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;内容&#x27;</span>,</span><br><span class="line">`gmt_modified` DATETIME <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">`app_name` <span class="type">VARCHAR</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`tenant_id` <span class="type">VARCHAR</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;租户字段&#x27;</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line"><span class="keyword">UNIQUE</span> KEY `uk_configinfoaggr_datagrouptenantdatum` (`data_id`,`group_id`,`tenant_id`,`datum_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;增加租户字段&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = config_info_beta   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `config_info_beta` (</span><br><span class="line">`id` <span class="type">BIGINT</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">`data_id` <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;data_id&#x27;</span>,</span><br><span class="line">`group_id` <span class="type">VARCHAR</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;group_id&#x27;</span>,</span><br><span class="line">`app_name` <span class="type">VARCHAR</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;app_name&#x27;</span>,</span><br><span class="line">`content` LONGTEXT <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;content&#x27;</span>,</span><br><span class="line">`beta_ips` <span class="type">VARCHAR</span>(<span class="number">1024</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;betaIps&#x27;</span>,</span><br><span class="line">`md5` <span class="type">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;md5&#x27;</span>,</span><br><span class="line">`gmt_create` DATETIME <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">`gmt_modified` DATETIME <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">`src_user` TEXT COMMENT <span class="string">&#x27;source user&#x27;</span>,</span><br><span class="line">`src_ip` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;source ip&#x27;</span>,</span><br><span class="line">`tenant_id` <span class="type">VARCHAR</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;租户字段&#x27;</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line"><span class="keyword">UNIQUE</span> KEY `uk_configinfobeta_datagrouptenant` (`data_id`,`group_id`,`tenant_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;config_info_beta&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = config_info_tag   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `config_info_tag` (</span><br><span class="line">`id` <span class="type">BIGINT</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">`data_id` <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;data_id&#x27;</span>,</span><br><span class="line">`group_id` <span class="type">VARCHAR</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;group_id&#x27;</span>,</span><br><span class="line">`tenant_id` <span class="type">VARCHAR</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;tenant_id&#x27;</span>,</span><br><span class="line">`tag_id` <span class="type">VARCHAR</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;tag_id&#x27;</span>,</span><br><span class="line">`app_name` <span class="type">VARCHAR</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;app_name&#x27;</span>,</span><br><span class="line">`content` LONGTEXT <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;content&#x27;</span>,</span><br><span class="line">`md5` <span class="type">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;md5&#x27;</span>,</span><br><span class="line">`gmt_create` DATETIME <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">`gmt_modified` DATETIME <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">`src_user` TEXT COMMENT <span class="string">&#x27;source user&#x27;</span>,</span><br><span class="line">`src_ip` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;source ip&#x27;</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line"><span class="keyword">UNIQUE</span> KEY `uk_configinfotag_datagrouptenanttag` (`data_id`,`group_id`,`tenant_id`,`tag_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;config_info_tag&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = config_tags_relation   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `config_tags_relation` (</span><br><span class="line">`id` <span class="type">BIGINT</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">`tag_name` <span class="type">VARCHAR</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;tag_name&#x27;</span>,</span><br><span class="line">`tag_type` <span class="type">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;tag_type&#x27;</span>,</span><br><span class="line">`data_id` <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;data_id&#x27;</span>,</span><br><span class="line">`group_id` <span class="type">VARCHAR</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;group_id&#x27;</span>,</span><br><span class="line">`tenant_id` <span class="type">VARCHAR</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;tenant_id&#x27;</span>,</span><br><span class="line">`nid` <span class="type">BIGINT</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`nid`),</span><br><span class="line"><span class="keyword">UNIQUE</span> KEY `uk_configtagrelation_configidtag` (`id`,`tag_name`,`tag_type`),</span><br><span class="line">KEY `idx_tenant_id` (`tenant_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;config_tag_relation&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = group_capacity   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `group_capacity` (</span><br><span class="line">`id` <span class="type">BIGINT</span>(<span class="number">20</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">`group_id` <span class="type">VARCHAR</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;Group ID，空字符表示整个集群&#x27;</span>,</span><br><span class="line">`quota` <span class="type">INT</span>(<span class="number">10</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;配额，0表示使用默认值&#x27;</span>,</span><br><span class="line">`usage` <span class="type">INT</span>(<span class="number">10</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;使用量&#x27;</span>,</span><br><span class="line">`max_size` <span class="type">INT</span>(<span class="number">10</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;单个配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,</span><br><span class="line">`max_aggr_count` <span class="type">INT</span>(<span class="number">10</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;聚合子配置最大个数，，0表示使用默认值&#x27;</span>,</span><br><span class="line">`max_aggr_size` <span class="type">INT</span>(<span class="number">10</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,</span><br><span class="line">`max_history_count` <span class="type">INT</span>(<span class="number">10</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;最大变更历史数量&#x27;</span>,</span><br><span class="line">`gmt_create` DATETIME <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">`gmt_modified` DATETIME <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line"><span class="keyword">UNIQUE</span> KEY `uk_group_id` (`group_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;集群、各Group容量信息表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = his_config_info   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `his_config_info` (</span><br><span class="line">`id` <span class="type">BIGINT</span>(<span class="number">64</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`nid` <span class="type">BIGINT</span>(<span class="number">20</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">`data_id` <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`group_id` <span class="type">VARCHAR</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`app_name` <span class="type">VARCHAR</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;app_name&#x27;</span>,</span><br><span class="line">`content` LONGTEXT <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`md5` <span class="type">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`gmt_create` DATETIME <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">`gmt_modified` DATETIME <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">`src_user` TEXT,</span><br><span class="line">`src_ip` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`op_type` <span class="type">CHAR</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`tenant_id` <span class="type">VARCHAR</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;租户字段&#x27;</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`nid`),</span><br><span class="line">KEY `idx_gmt_create` (`gmt_create`),</span><br><span class="line">KEY `idx_gmt_modified` (`gmt_modified`),</span><br><span class="line">KEY `idx_did` (`data_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;多租户改造&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = tenant_capacity   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tenant_capacity` (</span><br><span class="line">`id` <span class="type">BIGINT</span>(<span class="number">20</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">`tenant_id` <span class="type">VARCHAR</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;Tenant ID&#x27;</span>,</span><br><span class="line">`quota` <span class="type">INT</span>(<span class="number">10</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;配额，0表示使用默认值&#x27;</span>,</span><br><span class="line">`usage` <span class="type">INT</span>(<span class="number">10</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;使用量&#x27;</span>,</span><br><span class="line">`max_size` <span class="type">INT</span>(<span class="number">10</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;单个配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,</span><br><span class="line">`max_aggr_count` <span class="type">INT</span>(<span class="number">10</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;聚合子配置最大个数&#x27;</span>,</span><br><span class="line">`max_aggr_size` <span class="type">INT</span>(<span class="number">10</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,</span><br><span class="line">`max_history_count` <span class="type">INT</span>(<span class="number">10</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;最大变更历史数量&#x27;</span>,</span><br><span class="line">`gmt_create` DATETIME <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">`gmt_modified` DATETIME <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line"><span class="keyword">UNIQUE</span> KEY `uk_tenant_id` (`tenant_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;租户容量信息表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tenant_info` (</span><br><span class="line">`id` <span class="type">BIGINT</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">`kp` <span class="type">VARCHAR</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;kp&#x27;</span>,</span><br><span class="line">`tenant_id` <span class="type">VARCHAR</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;tenant_id&#x27;</span>,</span><br><span class="line">`tenant_name` <span class="type">VARCHAR</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;tenant_name&#x27;</span>,</span><br><span class="line">`tenant_desc` <span class="type">VARCHAR</span>(<span class="number">256</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;tenant_desc&#x27;</span>,</span><br><span class="line">`create_source` <span class="type">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;create_source&#x27;</span>,</span><br><span class="line">`gmt_create` <span class="type">BIGINT</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">`gmt_modified` <span class="type">BIGINT</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line"><span class="keyword">UNIQUE</span> KEY `uk_tenant_info_kptenantid` (`kp`,`tenant_id`),</span><br><span class="line">KEY `idx_tenant_id` (`tenant_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;tenant_info&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `users` (</span><br><span class="line">`username` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">`password` <span class="type">VARCHAR</span>(<span class="number">500</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`enabled` <span class="type">BOOLEAN</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `roles` (</span><br><span class="line">`username` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`role` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line"><span class="keyword">UNIQUE</span> INDEX `idx_user_role` (`username` <span class="keyword">ASC</span>, `role` <span class="keyword">ASC</span>) <span class="keyword">USING</span> BTREE</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `permissions` (</span><br><span class="line">`role` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`resource` <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`action` <span class="type">VARCHAR</span>(<span class="number">8</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line"><span class="keyword">UNIQUE</span> INDEX `uk_role_permission` (`role`,`resource`,`action`) <span class="keyword">USING</span> BTREE</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> users (username, PASSWORD, enabled) <span class="keyword">VALUES</span> (<span class="string">&#x27;nacos&#x27;</span>, <span class="string">&#x27;$2a$10$EuWPZHzz32dJN7jexM34MOeYirDdFAZm2kuWj7VEOJhhZkDrxfvUu&#x27;</span>, <span class="literal">TRUE</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> roles (username, role) <span class="keyword">VALUES</span> (<span class="string">&#x27;nacos&#x27;</span>, <span class="string">&#x27;ROLE_ADMIN&#x27;</span>);</span><br></pre></td></tr></table></figure><ol start="2"><li>配置Nacos</li></ol><ul><li>我们进入Nacos的conf目录，修改配置文件cluster.conf.example，重命名为cluster.conf，然后添加内容，如果后面启动报错了，就把这里的127.0.0.1换成本机真实IP</li></ul><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0.0.1:8845</span></span><br><span class="line"><span class="number">127.0.0.1:8846</span></span><br><span class="line"><span class="number">127.0.0.1:8847</span></span><br></pre></td></tr></table></figure><ul><li>然后修改application.properties文件，添加数据库配置</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.datasource.platform</span>=<span class="string">mysql</span></span><br><span class="line"></span><br><span class="line"><span class="attr">db.num</span>=<span class="string">1</span></span><br><span class="line"></span><br><span class="line"><span class="attr">db.url.0</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/nacos_config?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=UTC</span></span><br><span class="line"><span class="attr">db.user.0</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">db.password.0</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure><ol start="3"><li>启动Nacos集群</li></ol><ul><li><p>将nacos文件夹复制3份，分别命名为：nacos1、nacos2、nacos3</p></li><li><p>然后分别修改这三个文件夹中的application.properties</p><ul><li>nacos1</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">8845</span></span><br></pre></td></tr></table></figure><ul><li>nacos2</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">8846</span></span><br></pre></td></tr></table></figure><ul><li>nacos3</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">8847</span></span><br></pre></td></tr></table></figure></li></ul><p>4.Nginx反向代理</p><ul><li>修改conf/nginx.conf文件，将下面的配置粘贴到http块中</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">upstream</span> <span class="string">nacos-cluster &#123;</span></span><br><span class="line">    <span class="attr">server</span> <span class="string">127.0.0.1:8845;</span></span><br><span class="line">    <span class="attr">server</span> <span class="string">127.0.0.1:8846;</span></span><br><span class="line">    <span class="attr">server</span> <span class="string">127.0.0.1:8847;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">listen</span>       <span class="string">80;</span></span><br><span class="line">    <span class="attr">server_name</span>  <span class="string">localhost;</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">location</span> <span class="string">/nacos &#123;</span></span><br><span class="line">        <span class="attr">proxy_pass</span> <span class="string">http://nacos-cluster;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>启动nginx，然后在浏览器访问http://localhost/nacos 即可</li><li>同时将<code>bootstrap.yml</code>中的Nacos地址修改为<code>localhost:80</code>，user-service和order-service中都改</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:80</span> <span class="comment">## Nacos地址 Ngnix做了监听</span></span><br></pre></td></tr></table></figure><ul><li>重启服务，在Nacos中可以看到管理的服务<br><img src="https://s2.loli.net/2024/05/30/xmBpyK6HI8uw32F.webp" alt="image-20240530193546423"></li></ul></li></ul><h2 id="Feign远程调用">Feign远程调用</h2><ul><li>先来看看我们以前利用RestTemplate发起远程调用的代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://user-service/user/&quot;</span> + order.getUserId();</span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> restTemplate.getForObject(url, User.class);</span><br></pre></td></tr></table></figure><ul><li>存在以下问题：<ol><li>代码可读性差，编程体验不统一</li><li>参数复杂的URL难以维护（百度随便搜一个中文名词，然后看一下url有多长，有多少参数）</li></ol></li><li>我们可以利用<code>Feign</code>来解决上面提到的问题</li><li>Feign是一个声明式的http客户端，官网地址https://github.com/OpenFeign/feign， 其作用就是帮助我们优雅的实现http请求的发送</li></ul><h3 id="Feign替代RestTemplate">Feign替代RestTemplate</h3><ul><li><p>Feign的使用步骤如下</p><ol><li><p>引入依赖</p><ul><li>我们在order-service服务的pom文件中引入Feign的依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>添加注解</p><ul><li>在order-service的启动类上添加<code>@EnableFeignClients</code>注解，开启Feign的功能</li></ul></li><li><p>编写Feign客户端</p><ul><li>在order-service中新建com.itcast.order.client包，然后新建一个接口，内容如下</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(&quot;user-service&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserClient</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user/&#123;id&#125;&quot;)</span></span><br><span class="line">    User <span class="title function_">findById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这个客户端主要是基于SpringMVC的注解来声明远程调用的信息，比如<ol><li>服务名称：user-service</li><li>请求方式：GET</li><li>请求路径：/user/{id}</li><li>请求参数：Long id</li><li>返回值类型：User</li></ol></li><li>这样，Feign就可以帮助我们发送http请求，无需自己使用RestTemplate来发送了</li></ul></li><li><p>测试</p><ul><li>修改order-service中的OrderService类中的queryOrderById方法，使用Feign客户端代替RestTemplate</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//修改后的代码</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderMapper orderMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserClient userClient;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Order <span class="title function_">queryOrderById</span><span class="params">(Long orderId)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 查询订单</span></span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> orderMapper.findById(orderId);</span><br><span class="line">        <span class="comment">// 2. 利用Feign发起http请求，查询用户</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userClient.findById(order.getUserId());</span><br><span class="line">        <span class="comment">// 3. 封账user到order</span></span><br><span class="line">        order.setUser(user);</span><br><span class="line">        <span class="comment">// 4. 返回</span></span><br><span class="line">        <span class="keyword">return</span> order;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>总结</p><ul><li>使用Feign的步骤<ol><li>引入依赖</li><li>主启动类添加@EnableFeignClients注解</li><li>编写FeignClient接口</li><li>使用FeignClient中定义的方法替代RestTemplate</li></ol></li></ul></li></ol></li></ul><h3 id="自定义配置">自定义配置</h3><ul><li>Feign可以支持很多的自定义配置，如下表所示</li></ul><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">作用</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">feign.Logger.Level</td><td style="text-align:center">修改日志级别</td><td style="text-align:center">包含四种不同的级别：NONE、BASIC、HEADERS、FULL</td></tr><tr><td style="text-align:center">feign.codec.Decoder</td><td style="text-align:center">响应结果的解析器</td><td style="text-align:center">http远程调用的结果做解析，例如解析json字符串为java对象</td></tr><tr><td style="text-align:center">feign.codec.Encoder</td><td style="text-align:center">请求参数编码</td><td style="text-align:center">将请求参数编码，便于通过http请求发送</td></tr><tr><td style="text-align:center">feign. Contract</td><td style="text-align:center">支持的注解格式</td><td style="text-align:center">默认是SpringMVC的注解</td></tr><tr><td style="text-align:center">feign. Retryer</td><td style="text-align:center">失败重试机制</td><td style="text-align:center">请求失败的重试机制，默认是没有，不过会使用Ribbon的重试</td></tr></tbody></table><ul><li>一般情况下，默认值就能满足我们的使用，如果需要自定义，只需要创建自定义的@Bean覆盖默认的Bean即可，下面以日志为例来演示如何自定义配置</li></ul><h4 id="配置文件方式">配置文件方式</h4><ul><li>基于配置文件修改Feign的日志级别可以针对单个服务</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span>  </span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">config:</span> </span><br><span class="line">      <span class="attr">userservice:</span> <span class="comment">## 针对某个微服务的配置</span></span><br><span class="line">        <span class="attr">loggerLevel:</span> <span class="string">FULL</span> <span class="comment">##  日志级别</span></span><br></pre></td></tr></table></figure><ul><li>也可以针对所有服务</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span>  </span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">config:</span> </span><br><span class="line">      <span class="attr">default:</span> <span class="comment">## 这里用default就是全局配置，如果是写服务名称，则是针对某个微服务的配置</span></span><br><span class="line">        <span class="attr">loggerLevel:</span> <span class="string">FULL</span> <span class="comment">##  日志级别 </span></span><br></pre></td></tr></table></figure><ul><li>而日志的级别分为四种<ol><li>NONE：不记录任何日志信息，这是默认值</li><li>BASIC：仅记录请求的方法，URL以及响应状态码和执行时间</li><li>HEADERS：在BASIC的基础上，额外记录了请求和响应头的信息</li><li>FULL：记录所有请求和响应的明细，包括头信息、请求体、元数据</li></ol></li></ul><h4 id="Java代码方式">Java代码方式</h4><ul><li>也可以基于Java代码修改日志级别，先声明一个类，然后声明一个Logger.Level的对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefaultFeignConfiguration</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Logger.Level <span class="title function_">feignLogLevel</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Logger.Level.BASIC; <span class="comment">//日志级别设置为 BASIC</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果要全局生效，将其放到启动类的@EnableFeignClients这个注解中</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableFeignClients(defaultConfiguration = DefaultFeignConfiguration.class)</span></span><br></pre></td></tr></table></figure><ul><li>如果是局部生效，则把它放到对应的@FeignClient注解中</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(value = &quot;user-service&quot;, configuration = DefaultFeignConfiguration.class)</span></span><br></pre></td></tr></table></figure><h3 id="Feign使用优化">Feign使用优化</h3><ul><li><p>Feign底层发起http请求，依赖于其他框架，其底层客户端实现包括</p><ol><li>URLConnection：默认实现，不支持连接池</li><li>Apache HttpClient：支持连接池</li><li>OKHttp：支持连接池</li></ol></li><li><p>因此提高Frign的性能主要手段就是使用连接池，代替默认的URLConnection</p></li><li><p>这里我们使用Apache的HttpClient来演示</p><ol><li><p>引入依赖</p><ul><li>在order-service的pom文件中引入Apache的HttpClient依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--httpClient的依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.openfeign<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>feign-httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置连接池</p><ul><li>在order-service的application.yml中添加配置</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">feign</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">default:</span> <span class="comment">## default全局的配置</span></span><br><span class="line">        <span class="attr">logger-level:</span> <span class="string">BASIC</span> <span class="comment">## 日志级别，BASIC就是基本的请求和响应信息</span></span><br><span class="line">  <span class="attr">httpclient:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment">## 开启feign对HttpClient的支持</span></span><br><span class="line">    <span class="attr">max-connections:</span> <span class="number">200</span> <span class="comment">## 最大的连接数</span></span><br><span class="line">    <span class="attr">max-connections-per-route:</span> <span class="number">50</span> <span class="comment">## 每个路径的最大连接数</span></span><br></pre></td></tr></table></figure></li></ol></li><li><p>小结，Feign的优化</p><ol><li>日志级别尽量使用BASIC</li><li>使用HttpClient或OKHttp代替URLConnection<ul><li>引入feign-httpclient依赖</li><li>配置文件中开启httpclient功能，设置连接池参数</li></ul></li></ol></li></ul><h3 id="最佳实践">最佳实践</h3><ul><li>所谓最佳实践，就是使用过程中总结的经验，最好的一种使用方式</li><li>仔细观察发现，Feign的客户端与服务提供者的controller代码十分相似</li></ul><div class="tabs" id="test4"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test4-1">Feign</button></li><li class="tab"><button type="button" data-href="#test4-2">Controller</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(value = &quot;user-service&quot;,configuration = DefaultFeignConfiguration.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserClient</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user/&#123;id&#125;&quot;)</span></span><br><span class="line">    User <span class="title function_">findById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="meta">@RefreshScope</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">queryById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userService.queryById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><ul><li>除了方法名，其余代码几乎一模一样，那有没有一种方法简化这种重复的代码编写呢？</li></ul><h4 id="继承方式">继承方式</h4><ul><li><p>这两部分相同的代码，可以通过继承来共享</p><ol><li>定义一个API接口，利用定义方法，并基于SpringMVC注解做声明</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserAPI</span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user/&#123;id&#125;&quot;)</span></span><br><span class="line">    User <span class="title function_">findById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>Feign客户端和Controller都继承该接口</li></ol><div class="tabs" id="test4"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test4-1">Feign</button></li><li class="tab"><button type="button" data-href="#test4-2">Controller</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(value = &quot;user-service&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserClient</span> <span class="keyword">extends</span> <span class="title class_">UserAPI</span>&#123;&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> implents UserAPI&#123;</span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">findById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>&#123;</span><br><span class="line">        <span class="comment">// ...实现业务逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></li><li><p>优点</p><ol><li>简单</li><li>实现了代码共享</li></ol></li><li><p>缺点</p><ol><li>服务提供方、服务消费方紧耦合</li><li>参数列表中的注解映射并不会继承，所以Controller中必须再次声明方法、参数列表、注解</li></ol></li></ul><h4 id="抽取方式">抽取方式</h4><ul><li>将Feign的Client抽取为独立模块，并且把接口有关的POJO、默认的Feign配置都放到这个模块中，提供给所有消费者使用</li><li>例如，将UserClient、User、Feign的默认配置都抽取到一个feign-api包中，所有微服务引用该依赖包，即可直接使用<br><img src="https://pic1.imgdb.cn/item/6370956216f2c2beb19f94b1.jpg" alt="img"></li></ul><h4 id="实现基于抽取的最佳实践">实现基于抽取的最佳实践</h4><ol><li><p>抽取</p><ul><li>首先创建一个新的module，命名为feign-api，然后在pom文件中引入feign的starter依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>然后将order-service中编写的UserClient、User、DefaultFeignConfiguration都复制到feign-api项目中<br><img src="https://pic1.imgdb.cn/item/6370974f16f2c2beb1a3cb9a.jpg" alt=""></li></ul></li><li><p>在order-service中使用feign-api</p><ul><li>首先，将order-service中的UserClient、User、DefaultFeignConfiguration等类或接口删除掉</li><li>然后在order-service中的pom文件中引入我们自己编写的feign-api依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.itcast.demo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>feign-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>接着修改order-service中涉及到以上三个组件的代码爆红部分</li></ul></li><li><p>解决包扫描问题</p></li></ol><ul><li><p>现在UserClient在cn.itcast.feign.clients包下，而order-service的@EnableFeignClients注解是在cn.itcast.order包下，不在同一个包，无法扫描到UserClient</p><ul><li>方式一：指定Feign应该扫描的包</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableFeignClients(basePackages = &quot;cn.itcast.feign.clients&quot;)</span></span><br></pre></td></tr></table></figure><ul><li>方式二：指定需要加载的Client接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableFeignClients(clients = &#123;UserClient.class&#125;)</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="Gateway服务网关">Gateway服务网关</h2><ul><li>SpringCloudGateway是SpringCloud的一个全新项目，该项目是基于Spring 5.0，SpringBoot2.0和ProjectReactor等响应式办成和事件流技术开发的网关，它旨在为微服务框架提供一种简单有效的统一的API路由管理方式</li></ul><h3 id="为什么需要网关">为什么需要网关</h3><ul><li>Gateway网关是我们服务的守门神，是所有微服务的统一入口</li><li>网关的核心功能特性<ol><li>请求路由</li><li>权限控制</li><li>限流</li></ol></li><li>架构图如下<br><img src="https://pic1.imgdb.cn/item/6370a4ce16f2c2beb1ba1aa6.jpg" alt="img"></li><li>路由和负载均衡：一切请求都必须先经过gateway，但网关不处理业务，而是根据某种规则，把请求转发到某个微服务，这个过程叫路由。当然路由的目标服务有多个时，还需要做负载均衡</li><li>权限控制：网关作为微服务的入口，需要校验用户是否有请求资格，如果没有则拦截</li><li>限流：当请求量过高时，在网关中按照微服务能够接受的速度来放行请求，避免服务压力过大</li><li>在SpringCloud中网关的实现包括两种<ol><li>gateway</li><li>zuul</li></ol></li><li>Zuul是基于Servlet的实现，属于阻塞式编程。而SpringCloudGateway则是基于Spring5中提供的WebFlux，属于响应式编程的实现，具备更好的性能</li></ul><h3 id="gateway快速入门">gateway快速入门</h3><ul><li><p>下面，我们就来演示一下网关的基本路由功能，基本步骤如下</p><ol><li><p>创建SpringBoot工程gateway，引入网关依赖</p><ul><li>创建一个maven工程就行，引入依赖如下</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--网关--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--nacos服务发现依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写启动类</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GatewayApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(GatewayApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>编写基础配置和路由规则</li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">10010</span> <span class="comment">## 网关端口</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gateway</span> <span class="comment">## 服务名称</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:80</span> <span class="comment">## nacos地址（我这里还是用的nginx反向代理，你们可以启动一个单体的nacos，用8848端口）</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">user-service</span> <span class="comment">## 路由id，自定义，只需要唯一即可</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://user-service</span> <span class="comment">## 路由的目标地址，lb表示负载均衡，后面跟服务名称</span></span><br><span class="line">          <span class="comment">## uri: http://localhost:8081 ## 路由的目标地址，http就是固定地址</span></span><br><span class="line">          <span class="attr">predicates:</span> <span class="comment">## 路由断言，也就是判断请求是否符合路由规则的条件</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/user/**</span> <span class="comment">## 这个是按照路径匹配，只要是以/user开头的，就符合规则</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">order-service</span> <span class="comment">## 按照上面的写法，再配置一下order-service</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://order-service</span> </span><br><span class="line">          <span class="attr">predicates:</span> </span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/order/**</span> <span class="comment">##注意Path是大写！！！</span></span><br></pre></td></tr></table></figure><ol start="4"><li>启动网关服务进行测试</li></ol><ul><li>重启网关，访问http://localhost:10010/user/1 时，符合/user/**规则，请求转发到http://user-service/user/1，结果如下</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;柳岩&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;湖南省衡阳市&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>访问http://localhost:10010/order/101 时，符合/order/**规则，请求转发到http://order-service/order/101，结果如下</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">101</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="number">699900</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Apple 苹果 iPhone 12 &quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;num&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;userId&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;user&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;柳岩&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;湖南省衡阳市&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ol start="5"><li>网关陆游的流程图<br><img src="https://pic1.imgdb.cn/item/6370a93e16f2c2beb1c23c09.jpg" alt="img"></li></ol></li><li><p>总结</p><ul><li><p>网关搭建的步骤</p><ol><li>创建项目，引入nacos和gateway依赖</li><li>配置application.yml，包括服务基本信息，nacos地址、路由</li></ol></li><li><p>路由配置包括</p><ol><li>路由id：路由的唯一表示</li><li>路由目标（uri）：路由的目标地址，http代表固定地址，lb代表根据服务名称负载均衡</li><li>路由断言（predicates）：判断路由的规则</li><li>路由过滤器（filters）：对请求或相应做处理</li></ol></li><li><p>接下来我们就来重点学习路由断言和路由过滤器的详细知识</p></li></ul></li></ul><h3 id="断言工厂">断言工厂</h3><ul><li>我们在配置文件中写的断言规则只是字符串，这些字符串会被<code>Predicate Factory</code>读取并处理，转变为路由判断的条件</li><li>例如<code>Path=/user/**</code>是按照路径匹配，这个规则是由<code>org.springframework.cloud.gateway.handler.predicate.PathRoutePredicateFactory</code>类来处理的，像这样的断言工厂，在SpringCloudGatewway还有十几个</li></ul><table><thead><tr><th style="text-align:center"><strong>名称</strong></th><th style="text-align:center"><strong>说明</strong></th><th style="text-align:center"><strong>示例</strong></th></tr></thead><tbody><tr><td style="text-align:center">After</td><td style="text-align:center">是某个时间点后的请求</td><td style="text-align:center">- After=2037-01-20T17:42:47.789-07:00[America/Denver]</td></tr><tr><td style="text-align:center">Before</td><td style="text-align:center">是某个时间点之前的请求</td><td style="text-align:center">- Before=2031-04-13T15:14:47.433+08:00[Asia/Shanghai]</td></tr><tr><td style="text-align:center">Between</td><td style="text-align:center">是某两个时间点之前的请求</td><td style="text-align:center">- Between=2037-01-20T17:42:47.789-07:00[America/Denver], 2037-01-21T17:42:47.789-07:00[America/Denver]</td></tr><tr><td style="text-align:center">Cookie</td><td style="text-align:center">请求必须包含某些cookie</td><td style="text-align:center">- Cookie=chocolate, ch.p</td></tr><tr><td style="text-align:center">Header</td><td style="text-align:center">请求必须包含某些header</td><td style="text-align:center">- Header=X-Request-Id, \d+</td></tr><tr><td style="text-align:center">Host</td><td style="text-align:center">请求必须是访问某个host（域名）</td><td style="text-align:center">- Host=<strong>.somehost.org,</strong>.anotherhost.org</td></tr><tr><td style="text-align:center">Method</td><td style="text-align:center">请求方式必须是指定方式</td><td style="text-align:center">- Method=GET,POST</td></tr><tr><td style="text-align:center">Path</td><td style="text-align:center">请求路径必须符合指定规则</td><td style="text-align:center">- Path=/red/{segment},/blue/**</td></tr><tr><td style="text-align:center">Query</td><td style="text-align:center">请求参数必须包含指定参数</td><td style="text-align:center">- Query=name, Jack或者- Query=name</td></tr><tr><td style="text-align:center">RemoteAddr</td><td style="text-align:center">请求者的ip必须是指定范围</td><td style="text-align:center">- RemoteAddr=192.168.1.1/24</td></tr><tr><td style="text-align:center">Weight</td><td style="text-align:center">权重处理</td><td style="text-align:center"></td></tr></tbody></table><ul><li>关于更详细的使用方法，可以参考<a href="https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#gateway-request-predicates-factories">官方文档</a></li></ul><h3 id="过滤器工厂">过滤器工厂</h3><ul><li>GatewayFilter是网关中提供的一种过滤器，可以对进入网关的请求和微服务返回的响应做处理<br><img src="https://pic1.imgdb.cn/item/6370bf6c16f2c2beb1e827f7.jpg" alt="img"></li></ul><h4 id="路由过滤器的种类">路由过滤器的种类</h4><ul><li>Spring提供了31中不同的路由过滤器工厂，例如</li></ul><table><thead><tr><th style="text-align:center"><strong>名称</strong></th><th style="text-align:center"><strong>说明</strong></th></tr></thead><tbody><tr><td style="text-align:center">AddRequestHeader</td><td style="text-align:center">给当前请求添加一个请求头</td></tr><tr><td style="text-align:center">RemoveRequestHeader</td><td style="text-align:center">移除请求中的一个请求头</td></tr><tr><td style="text-align:center">AddResponseHeader</td><td style="text-align:center">给响应结果中添加一个响应头</td></tr><tr><td style="text-align:center">RemoveResponseHeader</td><td style="text-align:center">从响应结果中移除有一个响应头</td></tr><tr><td style="text-align:center">RequestRateLimiter</td><td style="text-align:center">限制请求的流量</td></tr></tbody></table><ul><li>官方文档的使用举例</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">add_request_header_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://example.org</span></span><br><span class="line">        <span class="attr">filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">AddRequestHeader=X-Request-red,</span> <span class="string">blue</span></span><br></pre></td></tr></table></figure><ul><li>This listing adds X-Request-red:blue header to the downstream request’s headers for all matching requests.</li><li>关于更详细的使用方法，可以参考<a href="https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#gateway-request-predicates-factories">官方文档</a></li></ul><h4 id="请求头过滤器">请求头过滤器</h4><ul><li>下面我们以AddRequestHeader为例，作为讲解</li></ul><blockquote><p>需求：给所有进入user-service的请求都添加一个请求头：Truth=Hello World!</p></blockquote><ul><li>只需要修改gateway服务的application.yml文件，添加路由过滤即可</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">10010</span> <span class="comment">## 网关端口</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gateway</span> <span class="comment">## 服务名称</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment">## nacos地址</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">user-service</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://user-service</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/user/**</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">AddRequestHeader=Truth,Hello</span> <span class="string">World!</span> <span class="comment">## 添加请求头</span></span><br></pre></td></tr></table></figure><ul><li>当前过滤器写在user-service路由下，因此仅仅对访问user-service的请求有效，我们在UserController中编写对应的方法来测试</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">@GetMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="string">public</span> <span class="string">void</span> <span class="string">test(@RequestHeader(&quot;Truth&quot;)</span> <span class="string">String</span> <span class="string">word)</span> &#123;</span><br><span class="line">    <span class="string">System.out.println(word);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>重启网关和user-service，打开浏览器访问http://localhost:10010/user/test， 控制台会输出<code>Hello World!</code>，证明我们的配置已经生效</li></ul><h4 id="默认过滤器">默认过滤器</h4><ul><li>如果要对所有的路由都生效，则可以将过滤器工厂写到default下，格式如下</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">YML</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">10010</span> <span class="comment">## 网关端口</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gateway</span> <span class="comment">## 服务名称</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:80</span> <span class="comment">## nacos地址</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">user-service</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://user-service</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/user/**</span></span><br><span class="line">      <span class="attr">default-filters:</span> </span><br><span class="line">        <span class="bullet">-</span> <span class="string">AddRequestHeader=Truth,</span> <span class="string">Hello</span> <span class="string">World!</span> <span class="comment">## 添加请求头</span></span><br></pre></td></tr></table></figure><ul><li>重启网关服务，打开浏览器访问http://localhost:10010/user/test， 控制台依旧会输出<code>Hello World!!</code>，证明我们的配置已经生效</li></ul><h4 id="小结-3">小结</h4><ul><li>过滤器的作用是什么？<ul><li>对路由的请求或响应做加工处理，比如添加请求头</li><li>配置在路由下的过滤器只对当前路由请求生效</li></ul></li><li>default-filters的作用是什么？<ul><li>对所有路由都生效的过滤器</li></ul></li></ul><h3 id="全局过滤器">全局过滤器</h3><ul><li>上面提到的31中过滤器的每一种的作用都是固定的，如果我们希望拦截请求，做自己的业务逻辑，则无法实现，这就要用到我们的全局过滤器了</li></ul><h4 id="全局过滤器的作用">全局过滤器的作用</h4><ul><li>全局过滤器的作用也是处理一切进入网关的请求和微服务响应，与GatewayFilter的作用一样。区别在于GatewayFilter通过配置定义，处理的逻辑是固定的，而GlobalFilter的逻辑需要我们自己编写代码实现</li><li>定义的方式就是实现GlobalFilter接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">GlobalFilter</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  处理当前请求，有必要的话通过&#123;<span class="doctag">@link</span> GatewayFilterChain&#125;将请求交给下一个过滤器处理</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> exchange 请求上下文，里面可以获取Request、Response等信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> chain 用来把请求委托给下一个过滤器 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> Mono&lt;Void&gt;&#125; 返回标示当前过滤器业务结束</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在filter中编写自定义逻辑，可以实现下列功能<ol><li>登录状态判断</li><li>权限校验</li><li>请求限流等</li></ol></li></ul><h4 id="自定义全局过滤器">自定义全局过滤器</h4><ul><li><p>需求：定义全局过滤器，拦截请求，判断请求参数是否满足下面条件</p><ol><li>参数中是否有authorization</li><li>authorization参数值是否为admin</li></ol></li><li><p>如果同时满足，则放行，否则拦截</p></li><li><p>具体实现如下</p><ul><li>在gateway模块下新建cn.itcast.gateway.filter包，然后在其中编写AuthorizationFilter类，实现GlobalFilter接口，重写其中的filter方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Order(-1)</span><span class="comment">//执行优先级</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthorizationFilter</span> <span class="keyword">implements</span> <span class="title class_">GlobalFilter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 获取请求参数</span></span><br><span class="line">        MultiValueMap&lt;String, String&gt; params = exchange.getRequest().getQueryParams();</span><br><span class="line">        <span class="comment">// 2. 获取authorization参数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">authorization</span> <span class="operator">=</span> params.getFirst(<span class="string">&quot;authorization&quot;</span>);</span><br><span class="line">        <span class="comment">// 3. 校验</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;admin&quot;</span>.equals(authorization)) &#123;</span><br><span class="line">            <span class="comment">// 4. 满足需求则放行</span></span><br><span class="line">            <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 5. 不满足需求，设置状态码，这里的常量底层就是401，在restFul中401表示未登录</span></span><br><span class="line">        exchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED);</span><br><span class="line">        <span class="comment">// 6. 结束处理</span></span><br><span class="line">        <span class="keyword">return</span> exchange.getResponse().setComplete();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>重启网关，测试我们的拦截器是否生效，打开浏览器访问http://localhost:10010/user/1，无法正常访问；加上需要的请求参数访问http://localhost:10010/user/1?authorization=admin， 可以看到正常数据</p></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;柳岩&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;湖南省衡阳市&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="过滤器执行顺序">过滤器执行顺序</h4><ul><li><p>请求进入网关会碰到三类过滤器：当前路由的过滤器、DefaultFilter、GlobalFilter</p></li><li><p>请求路由后，会将当前路由过滤器和DefaultFilter、GlobalFilter，合并到一个过滤器链（集合）中，排序后依次执行每个过滤器<br><img src="https://pic1.imgdb.cn/item/6370ca2d16f2c2beb1f9c769.jpg" alt="img"></p></li><li><p>那么排序的规则是什么呢？</p><ul><li><p>每个过滤器都必须指定一个int类型的order值，<code>order值越小，优先级越高</code>，执行顺序越靠前（默认值为2147483647，即int最大值）</p></li><li><p>GlobalFilter通过实现<code>Ordered</code>接口，或者添加<code>@Order</code>注解来指定order值(像上面我们自定义全局过滤器那样)，需要我们自己指定</p></li><li><p>实现Ordered接口</p></li><li><p>使用</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthorizationFilter</span> <span class="keyword">implements</span> <span class="title class_">GlobalFilter</span>, Ordered &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 获取请求参数</span></span><br><span class="line">        MultiValueMap&lt;String, String&gt; params = exchange.getRequest().getQueryParams();</span><br><span class="line">        <span class="comment">// 2. 获取authorization参数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">authorization</span> <span class="operator">=</span> params.getFirst(<span class="string">&quot;authorization&quot;</span>);</span><br><span class="line">        <span class="comment">// 3. 校验</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;admin&quot;</span>.equals(authorization)) &#123;</span><br><span class="line">            <span class="comment">// 4. 满足需求则放行</span></span><br><span class="line">            <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 5. 不满足需求，设置状态码，这里的常量底层就是401，在restFul中401表示未登录</span></span><br><span class="line">        exchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED);</span><br><span class="line">        <span class="comment">// 6. 结束处理</span></span><br><span class="line">        <span class="keyword">return</span> exchange.getResponse().setComplete();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>路由过滤器和defaultFilter的order由Spring指定，默认是按照声明顺序从1递增</p></li><li><p>当过滤器的order值一样时，会按照<code>defaultFilter &gt; 路由过滤器 &gt; GlobalFilter的顺序执行</code></p><ul><li>例如下面这种情况下的order值就会相同，如果我们在自定义全局过滤器中设定的order也为1，那么也会冲突</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">10010</span> <span class="comment">## 网关端口</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gateway</span> <span class="comment">## 服务名称</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:80</span> <span class="comment">## nacos地址</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">user-service</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://user-service</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/user/**</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">AddRequestHeader=Truth,</span> <span class="string">Hello</span> <span class="string">World!</span> <span class="comment">## 1</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">AddRequestHeader=Truth,</span> <span class="string">Hello</span> <span class="string">World!</span> <span class="comment">## 2</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">AddRequestHeader=Truth,</span> <span class="string">Hello</span> <span class="string">World!</span> <span class="comment">## 3</span></span><br><span class="line">      <span class="attr">default-filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">AddRequestHeader=Truth,</span> <span class="string">Hello</span> <span class="string">World!</span> <span class="comment">## 1</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">AddRequestHeader=Truth,</span> <span class="string">Hello</span> <span class="string">World!</span> <span class="comment">## 2</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">AddRequestHeader=Truth,</span> <span class="string">Hello</span> <span class="string">World!</span> <span class="comment">## 3</span></span><br></pre></td></tr></table></figure></li><li><p>详细内容，可以查看源码：</p><ul><li><code>org.springframework.cloud.gateway.route.RouteDefinitionRouteLocator#getFilters()</code>方法是先加载defaultFilters，然后再加载某个route的filters，然后合并。</li><li><code>org.springframework.cloud.gateway.handler.FilteringWebHandler#handle()</code>方法会加载全局过滤器，与前面的过滤器合并后根据order排序，组织过滤器链</li></ul></li></ul></li></ul><h3 id="跨域问题">跨域问题</h3><h4 id="什么是跨域问题">什么是跨域问题</h4><ul><li>跨域：域名不一致就是跨域，主要包括<ol><li>域名不同：<code>www.baidu.com</code>和<code>www.baidu.org</code>，<code>www.js.com</code>和<code>miaosha.js.com</code></li><li>域名相同，端口不同：localhost:8080和localhost:8081</li></ol></li><li>跨域问题：浏览器禁止请求的发起者与服务端发生跨域ajax请求，请求被浏览器拦截的问题</li><li>解决方案：<code>CORS</code><ul><li>CORS是一个W3C标准，全称是&quot;跨域资源共享&quot;（Cross-origin resource sharing）。</li><li>它允许浏览器向跨源服务器，发出XMLHttpRequest请求，从而克服了AJAX只能同源使用的限制。</li></ul></li></ul><h4 id="解决跨域问题">解决跨域问题</h4><ul><li>在gateway服务的application.yml文件中，添加下面的配置</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">globalcors:</span> <span class="comment">## 全局的跨域处理</span></span><br><span class="line">        <span class="attr">add-to-simple-url-handler-mapping:</span> <span class="literal">true</span> <span class="comment">## 解决options请求被拦截问题</span></span><br><span class="line">        <span class="attr">corsConfigurations:</span></span><br><span class="line">          <span class="string">&#x27;[/**]&#x27;</span><span class="string">:</span></span><br><span class="line">            <span class="attr">allowedOrigins:</span> <span class="comment">## 允许哪些网站的跨域请求 </span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;http://localhost:1234&quot;</span></span><br><span class="line">            <span class="attr">allowedMethods:</span> <span class="comment">## 允许的跨域ajax的请求方式</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;GET&quot;</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;POST&quot;</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;DELETE&quot;</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;PUT&quot;</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;OPTIONS&quot;</span></span><br><span class="line">            <span class="attr">allowedHeaders:</span> <span class="string">&quot;*&quot;</span> <span class="comment">## 允许在请求中携带的头信息</span></span><br><span class="line">            <span class="attr">allowCredentials:</span> <span class="literal">true</span> <span class="comment">## 是否允许携带cookie</span></span><br><span class="line">            <span class="attr">maxAge:</span> <span class="number">360000</span> <span class="comment">## 这次跨域检测的有效期</span></span><br></pre></td></tr></table></figure><ul><li>配置完成后，重启网关，成功访问到参数，解决跨域问题</li></ul><blockquote><p><a href="https://blog.xing-ye.top/posts/Docker/">Docker笔记导航</a></p></blockquote>]]></content>
    
    
    <summary type="html">SpringCloud学习笔记</summary>
    
    
    
    <category term="学习笔记" scheme="https://blog.xing-ye.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="SpringCloud" scheme="https://blog.xing-ye.top/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>Linux</title>
    <link href="https://blog.xing-ye.top/posts/Linux/"/>
    <id>https://blog.xing-ye.top/posts/Linux/</id>
    <published>2024-04-04T06:59:59.000Z</published>
    <updated>2024-05-31T07:28:03.597Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Linux安装">Linux安装</h2><p>关于安装这里就不过多介绍了，安装版本是CentOS 7，详情安装步骤见下述博客<br /><a href="https://blog.csdn.net/m0_52389735/article/details/130622718?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522171205355116800222892906%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=171205355116800222892906&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-2-130622718-null-null.142%5Ev100%5Epc_search_result_base8&amp;utm_term=vmware%20centos7%E5%AE%89%E8%A3%85&amp;spm=1018.2226.3001.4187">在VMware中安装CentOS7（超详细的图文教程）_vm安装centos7-CSDN博客</a><br><a name="NTwPZ"></a></p><h3 id="Linux的目录结构">Linux的目录结构</h3><p><img src="https://s2.loli.net/2024/04/14/JhVZ7g8YmReiPTx.jpg" alt=""></p><table><thead><tr><th>目录</th><th>含义</th></tr></thead><tbody><tr><td>/bin</td><td>存放二进制可执行文件</td></tr><tr><td>/boot</td><td>存放系统引导时使用的各种文件</td></tr><tr><td>/dev</td><td>存放设备文件</td></tr><tr><td>/etc</td><td>存放系统配置文件</td></tr><tr><td>/home</td><td>存放系统用户的文件</td></tr><tr><td>/lib</td><td>存放程序运行所需的共享库和内核模块</td></tr><tr><td>/opt</td><td>额外安装的可选应用程序包所放置的位置</td></tr><tr><td>/root</td><td>超级用户目录</td></tr><tr><td>/sbin</td><td>存放二进制可执行文件，只有root用户才能访问</td></tr><tr><td>/tmp</td><td>存放临时文件</td></tr><tr><td>/usr</td><td>存放系统应用程序</td></tr><tr><td>/var</td><td>存放运行时需要改变数据的文件，例如日志文件</td></tr></tbody></table><p><a name="bGdC4"></a></p><h2 id="Linux常用命令">Linux常用命令</h2><p><a name="gCis7"></a></p><h3 id="Linux命令常用技巧">Linux命令常用技巧</h3><ul><li>Tab键自动补全</li><li>连续按两次Tab键，给出操作提示</li><li>使用上下箭头快速调出曾经使用过的命令</li><li>使用Clear命令或者快捷键Ctrl+L实现清屏<br><a name="lINdq"></a></li></ul><h3 id="Linux命令格式">Linux命令格式</h3><ul><li>Linux命令格式如下</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">command</span> [-options] [parameter]</span><br></pre></td></tr></table></figure><blockquote><p>说明：</p><ul><li>command：命令名</li><li>[-options]：选项，可用来对命令进行控制，也可以省略</li><li>[parameter]：传给命令的参数，可以是0个，1个或多个</li></ul></blockquote><p>注意：</p><ul><li>[]代表可选命令名</li><li>选项，参数之间需要用空格进行分隔<br><a name="auwvt"></a></li></ul><h3 id="文件目录操作命令">文件目录操作命令</h3><p><a name="OSKiU"></a></p><h4 id="ls">ls</h4><ul><li>作用：显示指定目录下的内容</li><li>语法：<code>ls [-al] [dir]</code></li></ul><blockquote><p>说明：</p><ul><li>-a：显示所有文件及目录（以.开头的隐藏文件也会列出）</li><li>-l：除文件名外，还会讲文件的形态、权限、拥有者、文件大小等详细信息列出</li></ul></blockquote><p>注意：由于我们使用ls命令时，经常会加上-l选项，所以Linux很人性化的为我们提供了ll命令来作为ls -l命令的简写，使用ll -a也可以替代ls -al<br><a name="Ojfrm"></a></p><h4 id="cd">cd</h4><ul><li>作用：用户切换当前工作目录，即进入指定目录</li><li>语法<code>cd [dirName]</code></li></ul><blockquote><p>说明：</p><ul><li>~表示用户的home目录</li><li>.表示当前所在的目录</li><li>…表示当前位置的上级目录</li></ul></blockquote><p><a name="VSr6y"></a></p><h4 id="cat">cat</h4><ul><li>作用：用于显示文件内容</li><li>语法：<code>cat [-n] fileName</code></li></ul><blockquote><p>说明：</p><ul><li>-n：由1开始对所有输出的行数编号</li></ul></blockquote><blockquote><p>举例：</p><ul><li>cat /etc/profile<ul><li>查看/etc目录下的profile文件内容</li></ul></li><li>cat -n /etc/profile<ul><li>查看/etc目录下的profile文件内容，显示行号</li></ul></li></ul></blockquote><p><a name="m5Sq3"></a></p><h4 id="more">more</h4><ul><li>作用：以分页的形式显示文件内容</li><li>语法：<code>more fileName</code></li></ul><blockquote><p>说明：</p><ul><li><p>回车键：向下滚动一行</p></li><li><p>空格键：向下滚动一屏</p></li><li><p>b：返回上一屏</p></li><li><p>q或者Ctrl+C：退出more</p></li></ul></blockquote><blockquote><p>举例：</p><ul><li>more /etc/profile<ul><li>以分页方式显示/etc目录下的profile文件内容</li></ul></li></ul></blockquote><p><a name="HUNaW"></a></p><h4 id="tail">tail</h4><ul><li>作用：查看文件末尾的内容</li><li>语法：<code>tail [-f] fileName</code></li></ul><blockquote><p>说明：</p><ul><li>-f：动态读取文件末尾内容并显示，通常用于日志文件的内容输出</li></ul></blockquote><blockquote><p>举例：</p><ul><li>tail /etc/profile<ul><li>显示/etc目录下的profile文件末尾10行的内容</li></ul></li><li>tail -20 /etc/profile<ul><li>显示/etc目录下的profile文件末尾20行的内容</li></ul></li><li>tail -f /kyle/blog.log<ul><li>动态读取/kyle目录下的blog.log文件末尾内容并显示</li></ul></li></ul></blockquote><p><a name="RewEf"></a></p><h4 id="mkdir">mkdir</h4><ul><li>作用：创建目录</li><li>语法：<code>mkdir[-p] dirName</code></li></ul><blockquote><p>说明：</p><ul><li>-p：确保目录名称存在，不存在的就创建一个。通过此选项，可以实现多层目录同时创建</li></ul></blockquote><blockquote><p>举例：</p><ul><li>mkdir linuxCast<ul><li>在当前目录下，建立一个名为linuxCast的子目录</li></ul></li><li>mkdir-p linuxCast/test<ul><li>在工作目录下的linuxCast目录中建立一个名为test的子目录，若linuxCast目录不存在，则建立一个</li></ul></li></ul></blockquote><p><a name="UweLX"></a></p><h4 id="rmdir">rmdir</h4><ul><li>作用：删除空目录</li><li>语法：<code>rmdir [-p] dirName</code></li></ul><blockquote><p>说明：</p><ul><li>-p：当子目录被删除后使父目录为空目录的话，则一并删除</li></ul></blockquote><blockquote><p>举例：</p><ul><li>rmdir linuxCast删除名为linuxCast的空目录</li><li>rmdir -p linuxCast/test删除linuxCast目录中名为test的子目录，若test目录删除后linuxCast目录变为空目录，则也被删除</li><li>rmdir linuxCast*删除名称以linuxCast开始的空目录</li></ul></blockquote><p><a name="opnx1"></a></p><h4 id="rm">rm</h4><ul><li>作用：删除文件或者目录</li><li>语法：<code>rm [-rf] name</code></li></ul><blockquote><p>说明：</p><ul><li><p>-r：将目录及目录中所有文件（目录）逐一删除，即递归删除</p></li><li><p>-f：无需确认，直接删除</p></li><li><p>name：要删除的文件/目录，支持通配符</p></li></ul></blockquote><p><a name="Pc56i"></a></p><h3 id="拷贝移动命令">拷贝移动命令</h3><p><a name="o8YYt"></a></p><h4 id="cp">cp</h4><p>作用：用于复制文件或目录<br />语法：<code>cp [-r] source dest</code></p><blockquote><p>说明：</p><ul><li>-r：如果复制的是目录需要使用此选项，此时将复制该目录下所有的子目录和文件</li><li>source：要复制的资源（文件/目录）</li><li>dest：要移动到的位置</li></ul></blockquote><blockquote><p>举例：</p><ul><li>cp hello.txt linuxCast/<ul><li>将hello.txt复制到linuxCast目录中</li></ul></li><li>cp hello.txt ./ hi.txt<ul><li>将hello.txt复制到当前目录，并改名为hi.txt</li></ul></li><li>cp -r linuxCast/ ./blog/<ul><li>将linuxCast目录和目录下所有文件复制到blog目录下</li></ul></li><li>cp -r linuxCast/* ./blog/<ul><li>将linuxCast目录下所有文件复制blog目录下</li></ul></li></ul></blockquote><p><a name="kZEjW"></a></p><h4 id="mv">mv</h4><p>作用：为文件或目录改名、或将文件或目录移动到其它位置<br />语法：<code>mv source dest</code></p><blockquote><p>说明：</p><ul><li>source：要移动的资源（文件/目录）</li><li>dest：要移动到的位置</li></ul></blockquote><blockquote><p>举例：</p><ul><li>mv hello.txt hi.txt<ul><li>将hello.txt改名为hi.txt</li></ul></li><li>mv hi.txt blog/<ul><li>将文件hi.txt移动到blog目录中</li></ul></li><li>mv hi.txt blog/hello.txt<ul><li>将hi.txt移动到blog目录中，并改名为hello.txt</li></ul></li><li>mv linuxCast/ blog/<ul><li>如果blog目录不存在，将linuxCast目录改名为blog</li></ul></li><li>mv linuxCast/ blog/<ul><li>如果blog目录存在，将linuxCast目录移动到blog目录中</li></ul></li></ul></blockquote><p><a name="ehODj"></a></p><h3 id="打包压缩命令">打包压缩命令</h3><p><a name="dg1oz"></a></p><h4 id="tar">tar</h4><p>作用：对文件进行打包、解包、压缩、解压<br />语法：<code>tar [-zcxvf] fileName [files]</code><br />包文件后缀为.tar表示只是完成了打包，并没有压缩<br />包文件后缀为.tar.gz表示打包的同时还进行了压缩，也可以用.tgz作为简写</p><blockquote><p>说明：</p><ul><li>-z： 代表的是gzip，通过gzip命令处理文件，gzip可以对文件压缩或者解压</li><li>-c： 代表的是create，即创建新的包文件</li><li>-x： 代表的是extract，实现从包文件中还原文件</li><li>-v： 代表的是verbose，显示命令的执行过程</li><li>-f： 代表的是file，用于指定包文件的名称</li><li>c和x是互斥的，解压和压缩不能同时进行</li></ul></blockquote><blockquote><p>举例 ：</p><ul><li>tar -cvf hello.tar ./*<ul><li>将当前目录下所有文件打包，打包后的文件名为hello.tar</li></ul></li><li>tar -czvf hello.tar.gz ./*<ul><li>将当前目录下所有文件打包并压缩，打包后的文件名为hello.tar.gz</li></ul></li><li>tar -zxvf hello.tar.gz<ul><li>将hello.tar.gz中的文件解压缩</li></ul></li></ul></blockquote><p><a name="wVucn"></a></p><h3 id="文本编辑命令">文本编辑命令</h3><p><a name="ttlUf"></a></p><h4 id="vi">vi</h4><p>作用：vi命令是Linux系统提供的一个文本编辑工具，可以对文件内容进行编辑，类似于windows中的记事本<br />语法：<code>vi fileName</code></p><blockquote><p>说明：</p><ol><li>vim是从vi发展来的一个功能更加强大的文本编辑工具，在编辑文件时可以对文本内容进行着色，方便我们对文件进行编辑处理，所以实际工作中vim更加常用。</li><li>要使用vim命令，需要我们自己完成安装。可以使用下面的命令来完成安装：yum install vim</li></ol></blockquote><p><a name="SlgUZ"></a></p><h4 id="vim">vim</h4><p>作用：对文件内容进行编辑，vim其实就是一个文本编辑器<br />语法：<code>vim fileName</code></p><blockquote><p>说明：</p><ol><li>在使用vim命令编辑文件时，如果指定的文件存在则直接打开此文件。如果指定的文件不存在则新建文件。</li><li>vim在进行文本编辑时共分为三种模式，分别是命令模式（Command mode），插入模式（Insert mode）和底行模式（Last line mode）。这三种模式之间可以相互切换。我们在使用vim时一定要注意我们当前所处的是哪种模式。</li></ol></blockquote><p>针对vim中的三种模式说明如下：</p><blockquote><ol><li>命令模式<br />命令模式下可以查看文件内容、移动光标（上下左右箭头、gg(开头)、G（末尾））<br />通过vim命令打开文件后，默认进入命令模式<br />另外两种模式需要首先进入命令模式，才能进入彼此</li><li>插入模式<br />插入模式下可以对文件内容进行编辑<br />在命令模式下按下[i,a,o]任意一个，可以进入插入模式。进入插入模式后，下方会出现INSERT字样<br />在插入模式下按下ESC键，回到命令模式</li><li>底行模式<br />底行模式下可以通过命令对文件内容进行查找、显示行号、退出等操作<br />在命令模式下按下[:,/]任意一个，可以进入底行模式<br />通过 / 方式进入底行模式后，可以对文件内容进行查找<br />通过 : 方式进入底行模式后，可以输入wq（保存并退出）、q！（不保存退出）、set nu（显示行号）</li></ol></blockquote><p><a name="ACaGQ"></a></p><h3 id="查找命令">查找命令</h3><p><a name="zKaNC"></a></p><h4 id="find">find</h4><p>作用：在指定目录下查找文件<br />语法：<code>find dirName -option fileName</code></p><blockquote><p>说明：</p><ul><li>dirName：指定目录</li><li>-option：一般指定-name（根据文件名称来查找）</li><li>fileName：可以使用通配符的方式</li></ul></blockquote><blockquote><p>举例：</p><ul><li>find / -name helloworld.log<ul><li>在所有文件夹下查找helloworld.log文件</li></ul></li><li>find . -name “*.java”<ul><li>在当前目录及其子目录下查找.java结尾文件</li></ul></li><li>find /linuxCast -name “*.java”<ul><li>在/linuxCast目录及其子目录下查找.java结尾的文件</li></ul></li></ul></blockquote><p><a name="K99bh"></a></p><h4 id="grep">grep</h4><p>作用：从指定文件中查找指定的文本内容<br />语法：<code>grep word fileName</code></p><blockquote><p>说明：</p><ul><li>word：查找的文本</li><li>fileName：从哪个文件中种找</li></ul></blockquote><blockquote><p>举例：</p><ul><li>grep Hello Helloworld.java<ul><li>查找Helloworld.java文件中出现的Hello字符串的位置</li></ul></li><li>grep hello *.java<ul><li>查找当前目录中所有.java结尾的文件中包含hello字符串的位置</li></ul></li></ul></blockquote><p><a name="B9GRk"></a></p><h2 id="Linux软件安装">Linux软件安装</h2><p><a name="cH4MX"></a></p><h3 id="软件安装方式">软件安装方式</h3><ol><li>二进制发布包安装<ul><li>软件已经针对具体平台编译打包发布，只要解压，修改配置即可</li></ul></li><li>rpm安装<ul><li>软件已经按照redhat的包管理规范进行打包，使用rpm命令进行安装，不能自行解决库依赖问题</li></ul></li><li>yum安装<ul><li>一种在线软件安装方式，本质上还是rpm安装，自动下载安装包并安装，安装过程中自动解决库依赖问题</li></ul></li><li>源码编译安装<ul><li>软件以源码工程的形式发布，需要自己编译打包</li></ul></li></ol>]]></content>
    
    
    <summary type="html">Linux</summary>
    
    
    
    <category term="学习笔记" scheme="https://blog.xing-ye.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Linux" scheme="https://blog.xing-ye.top/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>自定义实现布隆过滤器与自动扩容</title>
    <link href="https://blog.xing-ye.top/posts/4635349b/"/>
    <id>https://blog.xing-ye.top/posts/4635349b/</id>
    <published>2024-03-29T16:00:00.000Z</published>
    <updated>2024-05-28T08:47:47.112Z</updated>
    
    <content type="html"><![CDATA[<p><a name="siGg4"></a></p><h2 id="前言">前言</h2><p>布隆过滤器（Bloom Filter）是1970年由布隆提出的一种数据结构，它本质上是一个很长的二进制位数组和一系列随机映射函数。这种数据结构主要用于检索一个元素是否在一个集合中，其优点在于空间效率和查询时间都比一般的算法要好得多，同时散列函数相互之间没有关系，方便由硬件并行实现。然而，布隆过滤器也存在一些缺点，比如有一定的误识别率，并且删除元素比较困难。<br>在具体实现上，布隆过滤器并不直接存储数据本身，而是通过多个哈希函数对要存储的数据进行哈希运算，并将哈希运算的结果作为位数组的下标，将对应的数组元素修改为1。因此，布隆过滤器不需要存储元素本身，这在某些对保密要求非常严格的场合具有优势。<br>布隆过滤器的应用场景非常广泛。例如，在避免缓存穿透的场景中，当使用Redis等缓存系统时，如果缓存中没有命中，通常需要查询数据库。如果查询量非常大，会对数据库造成压力。此时，可以使用布隆过滤器来减少不必要的数据库查询，从而减轻数据库的压力。另外，布隆过滤器还可以用于判断用户是否是刷单用户，是否在黑名单池内等场景。<br><a name="UzzWE"></a></p><h2 id="介绍">介绍</h2><p><a name="EGcMX"></a></p><h3 id="快速启动">快速启动</h3><p>布隆过滤器常用于解决缓存穿透问题，平常我们可以使用Google Guava库中的BloomFilter类、Apache Commons库中的BloomFilter类等来创建布隆过滤器，示例代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BloomFilterExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建布隆过滤器，预期数据量为1000，误判率为0.01</span></span><br><span class="line">        BloomFilter&lt;Integer&gt; bloomFilter = BloomFilter.create(Funnels.integerFunnel(), <span class="number">1000</span>, <span class="number">0.01</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加元素到布隆过滤器</span></span><br><span class="line">        bloomFilter.put(<span class="number">123</span>);</span><br><span class="line">        bloomFilter.put(<span class="number">456</span>);</span><br><span class="line">        bloomFilter.put(<span class="number">789</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检查元素是否存在于布隆过滤器中</span></span><br><span class="line">        System.out.println(bloomFilter.mightContain(<span class="number">123</span>)); <span class="comment">// true</span></span><br><span class="line">        System.out.println(bloomFilter.mightContain(<span class="number">999</span>)); <span class="comment">// false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="xTvQP"></a></p><h3 id="原理">原理</h3><p>布隆过滤器可以看作是一个bits为n的bitmap，同时有k个哈希函数。 当一个元素加入位图时，通过k个hash函数将元素映射到位图的k个点，并把它们置1；当检索时，再通过k个hash函数运算检查位图的k个点是否都为1；如果有不为1的点，那么认为该key不存在；如果全部为1，则可能存在。 同时可能存在误判的情况，即k个点均为1，而实际上该key并不存在布隆过滤器中。<br><img src="https://s2.loli.net/2024/04/21/6EKvYMZOkbANczB.png" alt=""><br>布隆过滤器的误判率，主要取决于bitmap的大小和hash函数的个数以及设计。 正常我们在使用布隆过滤器的时候，是给定预期数据量n和误判率p，然后动态生成我们所需要的布隆过滤器。 计算公式如下： <img src="https://s2.loli.net/2024/04/21/hn3UFgAkOCGqvoT.png" alt="image.png"> 得到bitmap的大小m和所需哈希函数个数k之后，我们便可以开始构造属于我们的布隆过滤器了<br><a name="VoxTJ"></a></p><h2 id="代码实现">代码实现</h2><p><a name="dh4Jc"></a></p><h3 id="定义布隆过滤器接口">定义布隆过滤器接口</h3><p>定义布隆过滤器的接口类，方便程序的扩展和后续的使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 布隆过滤器接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BloomFilter</span> &#123;</span><br><span class="line">    <span class="comment">//添加元素</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Object value)</span>;</span><br><span class="line">    <span class="comment">//判断元素是否存在</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(Object value)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="MK6he"></a></p><h3 id="实现简单布隆过滤器">实现简单布隆过滤器</h3><p>属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 位数组大小</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> size;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SimpleHash Function 的个数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> k;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过这个数组可以创建 多 个不同的哈希函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> List&lt;Integer&gt; SEEDS ;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 位数组。数组中的元素只能是 0 或者 1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> BitSet bits ;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 存放包含 hash 函数的类的数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> ArrayList&lt;SimpleHash&gt; func = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br></pre></td></tr></table></figure><p>简单布隆过滤器  接收位数组大小和哈希函数个数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">SimpleBloomFilter</span><span class="params">(<span class="type">int</span> size,<span class="type">int</span> k)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.size = size;</span><br><span class="line">        <span class="built_in">this</span>.k = k;</span><br><span class="line">        <span class="built_in">this</span>.bits = <span class="keyword">new</span> <span class="title class_">BitSet</span>(size);</span><br><span class="line">        <span class="comment">// 根据k的值获得k个种子数组</span></span><br><span class="line">        SEEDS = PrimeNumbers.getKDistinctPrimes(k);</span><br><span class="line">        <span class="comment">// 根据k个种子创建k个哈希函数并添加到数组中</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> seed :SEEDS)&#123;</span><br><span class="line">            func.add(<span class="keyword">new</span> <span class="title class_">SimpleHash</span>(size,seed));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><a name="mgday"></a></p><h3 id="定义哈希类">定义哈希类</h3><p>根据上文所述，我们需要k个哈希函数，在此我们定义一个SimpleHash类，给定bitmap容量和随机数种子之后可以动态的生成一个hash函数<br><strong>注意</strong>：<br>需要给定bitmap的容量是因为我们的hash函数生成的hashcode的范围应该在（0,m-1）<br>种子最好为质数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 静态内部类 用于HASH操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SimpleHash</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> cap;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> seed;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">SimpleHash</span><span class="params">(<span class="type">int</span> cap, <span class="type">int</span> seed)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.cap = cap;</span><br><span class="line">            <span class="built_in">this</span>.seed = seed;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hash</span><span class="params">(Object value)</span>&#123;</span><br><span class="line">            <span class="type">int</span> h;</span><br><span class="line">            <span class="keyword">return</span>(value == <span class="literal">null</span>)?<span class="number">0</span>:Math.abs(seed*(cap-<span class="number">1</span>)&amp;((h = value.hashCode())^(h&gt;&gt;&gt;<span class="number">16</span>)));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><a name="AHxpp"></a></p><h3 id="质数生成器">质数生成器</h3><p>我们需要一个相对均匀的质数数组，所以我们实现一个简单的质数生成器，每个质数之间的间隔大于20，以确保它相对来说均匀</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PrimeNumbers</span> &#123;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">static</span> List&lt;Integer&gt; <span class="title function_">getKDistinctPrimes</span><span class="params">(<span class="type">int</span> k)</span>&#123;</span><br><span class="line">        List&lt;Integer&gt; primes = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">        <span class="comment">//生成k个质数</span></span><br><span class="line">        <span class="keyword">while</span>(primes.size() &lt; k)&#123;</span><br><span class="line">            <span class="keyword">if</span>(isPrime(num)&amp;&amp;isWellDistributed(num,primes))&#123;</span><br><span class="line">                primes.add(num);</span><br><span class="line">            &#125;</span><br><span class="line">            num++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> primes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断质数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> num</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isPrime</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (num &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (num &lt;= <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (num % <span class="number">2</span> == <span class="number">0</span> || num % <span class="number">3</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sqrtNum</span> <span class="operator">=</span> (<span class="type">int</span>) Math.sqrt(num);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">5</span>; i &lt;= sqrtNum; i += <span class="number">6</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (num % i == <span class="number">0</span> || num % (i + <span class="number">2</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isWellDistributed</span><span class="params">(<span class="type">int</span> num, List&lt;Integer&gt; primes)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> prime : primes) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Math.abs(prime - num) &lt; <span class="number">20</span>) &#123; <span class="comment">// 设置一个距离阈值，确保质数之间距离较远</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="x0DIn"></a></p><h3 id="实现接口方法">实现接口方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 添加元素到位数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Object value)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span>(SimpleHash f:func)&#123;</span><br><span class="line">        bits.set(f.hash(value));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断指定元素是否存在于位数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(Object value)</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">ret</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(SimpleHash f:func)&#123;</span><br><span class="line">        ret = ret &amp;&amp; bits.get(f.hash(value));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="akhLc"></a></p><h3 id="实现布隆过滤器工厂">实现布隆过滤器工厂</h3><p>布隆过滤器工厂接收预期数据量n和误差率p，根据上面两个数据计算出布隆过滤器的大小m(size)和哈希函数个数k。通过布隆过滤器工厂创建布隆过滤器可以简化布隆过滤器的使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BloomFilterFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建普通布隆过滤器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> BloomFilter <span class="title function_">createBloomFilter</span><span class="params">(<span class="type">int</span> n,<span class="type">double</span> p)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> getSizeOfBloomFilter(n,p);</span><br><span class="line">        <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> getNumberOfHashFuc(size,n);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SimpleBloomFilter</span>(size,k);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据传入的数据量 n 和 误差率 p返回size</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getSizeOfBloomFilter</span><span class="params">(<span class="type">int</span> n, <span class="type">double</span> p)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> (<span class="type">int</span>) Math.ceil(-(n * Math.log(p)) / Math.pow(Math.log(<span class="number">2</span>), <span class="number">2</span>));</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据传入的 size 和 数据量 n 返回所需的哈希函数值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getNumberOfHashFuc</span><span class="params">(<span class="type">int</span> size, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> (<span class="type">int</span>) Math.ceil((size / (<span class="type">double</span>) n) * Math.log(<span class="number">2</span>));</span><br><span class="line">        <span class="keyword">return</span> k;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="Guyjd"></a></p><h2 id="程序中实际应用布隆过滤器">程序中实际应用布隆过滤器</h2><p>程序执行逻辑梳理： 请求到来之后在Server到Redis之间插入布隆过滤器，先判断数据是否存在，存在再执行接下来的步骤，不存在则直接返回。同时在每次查询到数据结果之后，布隆过滤器添加该key。<br><img src="https://s2.loli.net/2024/04/21/84KTeHrhLXfkVdI.png" alt="image.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">loomFilter</span> <span class="variable">myBloomFilter</span> <span class="operator">=</span> BloomFilterFactory.createBloomFilter(<span class="number">1000</span>,<span class="number">0.001</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化布隆过滤器，将数据库中的数据初始化进入布隆过滤器中</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;Shop&gt; shops = shopMapper.selectList(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Shop shop : shops)&#123;</span><br><span class="line">            myBloomFilter.add(shop.getId());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">queryById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="comment">//先从布隆过滤中判断是否有这个数据</span></span><br><span class="line">        <span class="keyword">if</span>(!myBloomFilter.contains(id))&#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;不包含这个id&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;cache:shop:&quot;</span> + id;</span><br><span class="line">        <span class="comment">// 1. 从redis查询商铺缓存</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">shopJson</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(key);</span><br><span class="line">        <span class="comment">// 2. 判断是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isNotBlank(shopJson))&#123;</span><br><span class="line">            <span class="comment">// 3.存在，直接返回</span></span><br><span class="line">            <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> JSONUtil.toBean(shopJson,Shop.class);</span><br><span class="line">            <span class="keyword">return</span> Result.ok(shop);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 4.不存在，根据id查询数据库</span></span><br><span class="line">        <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> getById(id);</span><br><span class="line">        <span class="comment">// 5.不存在，返回错误</span></span><br><span class="line">        <span class="keyword">if</span> (shop == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>  Result.fail(<span class="string">&quot;商铺不存在！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 6.存在，写入redis,并设置过期时间</span></span><br><span class="line">        stringRedisTemplate.opsForValue().set(key,JSONUtil.toJsonStr(shop));</span><br><span class="line">        <span class="comment">//设置30+1~5 mins的过期时间，以解决缓存雪崩问题</span></span><br><span class="line">        stringRedisTemplate.expire(key,<span class="number">30</span>+RANDOM_EXPIRE_TIME, TimeUnit.MINUTES);</span><br><span class="line">        <span class="keyword">return</span> Result.ok(shop);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><a name="M6dem"></a></p><h2 id="自扩容布隆过滤器">自扩容布隆过滤器</h2><p>当布隆过滤器实际的数据存储量超过预期数据量之后，误判率也会随之上涨。 但是布隆过滤器是不能删除已有元素的，在这里我们采取的方案是再创建一个布隆过滤器 添加操作在最新的布隆过滤器中执行，contain操作在所有的布隆过滤器中执行 代码实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">**</span><br><span class="line"> * 自适应布隆过滤器，当满了的时候实现自动扩容</span><br><span class="line"> */</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AdaptBloomFilter</span> <span class="keyword">implements</span> <span class="title class_">BloomFilter</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> n;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> p;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AdaptBloomFilter</span><span class="params">(<span class="type">int</span> n, <span class="type">double</span> p)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.n=n;</span><br><span class="line">        <span class="built_in">this</span>.p=p;</span><br><span class="line">        <span class="built_in">this</span>.bloomList.add(BloomFilterFactory.createBloomFilter(n,p));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 布隆过滤器列表</span></span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;BloomFilter&gt; bloomList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//此布隆过滤器实现</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Object value)</span> &#123;</span><br><span class="line">        <span class="comment">// 向最后的一个布隆过滤器添加</span></span><br><span class="line">        bloomList.get(bloomList.size()-<span class="number">1</span>).add(value);</span><br><span class="line">        <span class="keyword">if</span> (count++&gt;n)&#123;</span><br><span class="line">            expand();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(Object value)</span> &#123;</span><br><span class="line">        <span class="comment">// 遍历每个布隆过滤器判断是否存在</span></span><br><span class="line">        <span class="keyword">for</span> (BloomFilter i : bloomList)&#123;</span><br><span class="line">            <span class="keyword">if</span> (bloomList.contains(value))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">expand</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.bloomList.add(BloomFilterFactory.createBloomFilter((<span class="type">int</span>) (n),p));</span><br><span class="line">        n= (n*<span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">自定义实现布隆过滤器(轮子)</summary>
    
    
    
    <category term="实用工具" scheme="https://blog.xing-ye.top/categories/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="轮子项目" scheme="https://blog.xing-ye.top/tags/%E8%BD%AE%E5%AD%90%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="布隆过滤器" scheme="https://blog.xing-ye.top/tags/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
    
  </entry>
  
</feed>
